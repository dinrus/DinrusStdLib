topic "Класс Raster";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,2#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_} 
[ {{10000@(113.42.0) [s0;%RU-RU [*@7;4 Класс Raster]]}}&]
[s3; &]
[s1;:Raster`:`:class: [@(0.0.255)3 class][3 _][*3 Raster]&]
[s9;%RU-RU Raster `- абстрактный класс, представляющий 
растровое изображение. Примером производног
о от Raster класса является PngRaster, служащий 
декодером файла изображения .png, или 
MemoryRaster, представляющий изображение 
в памяти, могущее быть в специфичном 
формате (не RGBA).&]
[s9;%RU-RU Raster предоставляет базовую информацию 
об изображении (GetSize и GetInfo, возвращающие 
Raster`::Info) и является источником сканлиний 
изображений. Сканлинии возвращаются 
как объекты Raster`::Line. Если возможно, 
классы, производные от Raster, должны 
минимизировать использование памяти. 
Например, PngRaster за раз получает только 
отдельную сканлинию, по возможности.&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Raster`::Line]]}}&]
[s3; &]
[s1;:Raster`:`:Line`:`:class: [@(0.0.255)3 class][3 _][*3 Raster`::Line]&]
[s2;%RU-RU Этот класс представляет единичную 
сканлинию в данном растре. По соображениям 
производительности, применяется 
[^topic`:`/`/Core`/srcdoc`/pick`_`_ru`-ru^ семантика трансфера 
pick]. Так как он может использоваться 
как в ситуациях, когда ссылочные данные 
храняться в Raster, так и ситуациях, когда 
им нужно кастомое хранилище, у конструкторов
 если параметр `'free`'. Сканлинию можно 
представить в формате Raster или как 
массив RGBA. Преобразование в массив 
RGBA `"ленивое`"(lazy), т.е. отложенное, `- 
не происходит до тех пор, пока не понадобится
.&]
[s2;%RU-RU &]
[s2;%RU-RU Заметьте, что Line полноценна только 
пока существует её исходный Raster.&]
[s2;%RU-RU &]
[s2;%RU-RU Для удобства этот класс также 
определён как тип RasterLine.&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Raster`::Line Список Публичных Методов]]}}&]
[s3; &]
[s5;:Raster`:`:Line`:`:GetRGBA`(`)const: [@(0.0.255) const]_[_^RGBA^ RGBA]_`*[* GetRGBA]()_
[@(0.0.255) const]&]
[s2;%RU-RU Возвращает указатель на массив 
с пикселями сканлинии. Преобразование 
формата Raster в буфер RGBA отложенное 
(lazy), не происходить ранее, чем эта 
функция вызывается в первый раз. Также, 
если формат Raster `= RGBA, то преобразования 
не производится и возвращается указатель 
на сырые данные.&]
[s3; &]
[s4; &]
[s5;:Raster`:`:Line`:`:GetRawData`(`)const: [@(0.0.255) const]_[_^byte^ byte]_`*[* GetRawDa
ta]()_[@(0.0.255) const]&]
[s2;%RU-RU Возвращает сканлинию в формате 
Raster.&]
[s3; &]
[s4; &]
[s5;:Raster`:`:Line`:`:operator const RGBA`*`(`)const: [@(0.0.255) operator]_[@(0.0.255) c
onst]_[_^RGBA^ RGBA]_`*()_[@(0.0.255) const]&]
[s5;:Raster`:`:Line`:`:operator`~`(`)const: [@(0.0.255) const]_[_^RGBA^ RGBA]_`*[* operator
`~]()_[@(0.0.255) const]&]
[s2;%RU-RU Возвращает GetRGBA().&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Raster`::Line Конструктор  detail]]}}&]
[s3; &]
[s5;:Raster`:`:Line`:`:Line`(const RGBA`*`,bool`): [* Line]([@(0.0.255) const]_[_^RGBA^ RGB
A]_`*[*@3 data], [@(0.0.255) bool]_[*@3 free])&]
[s2;%RU-RU Конструирует Line из данных RGBA. 
Если [%-*@3 free] `= true, то деструктор Line удаляет 
указатель на данные [%-*@3 data].&]
[s3;%RU-RU &]
[s4; &]
[s5;:Raster`:`:Line`:`:Line`(const byte`*`,Raster`*`,bool`): [* Line]([@(0.0.255) const]_
[_^byte^ byte]_`*[*@3 fmtdata], [_^Raster^ Raster]_`*[*@3 raster], [@(0.0.255) bool]_[*@3 fmt
free])&]
[s2;%RU-RU Конструирует Line из данных [%-*@3 fmtdata] 
в формате [%-*@3 raster]. Если [%-*@3 fmtfree `=] true, 
то деструктор Line удаляет указатель 
на данные [%-*@3 fmtdata].&]
[s3;%RU-RU &]
[s4; &]
[s5;:Raster`:`:Line`:`:Line`(pick`_ Raster`:`:Line`&`): [* Line]([@(0.128.128) pick`_]_[* L
ine][@(0.0.255) `&]_[*@3 b])&]
[s2;%RU-RU Пик`-конструктор.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Raster`:`:Line`:`:Line`(`): [* Line]()&]
[s2;%RU-RU Дефолтный конструктор. Дефолтно 
сконструированная Line может использоваться 
как цель пик`-трансфера из другой 
Line.&]
[s3; &]
[s4; &]
[s5;:Raster`:`:Line`:`:operator`=`(pick`_ Raster`:`:Line`&`): [@(0.0.255) void]_[* operat
or`=]([@(0.128.128) pick`_]_[_^Raster`:`:Line^ Line][@(0.0.255) `&]_[*@3 b])&]
[s2;%RU-RU Пик`-присваивание.&]
[s3;%RU-RU &]
[s1;@(0.0.255)3 &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Raster`::Info]]}}&]
[s3; &]
[s1;:Raster`:`:Info`:`:struct: [@(0.0.255)3 struct][3 _][*3 Raster`::Info]&]
[s2;%RU-RU Эта структура используется для 
предоставления информации о Raster. 
Для удобства, этот класс также объявлен 
как тип RasterInfo.&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Raster`::Line Member Variables]]}}&]
[s3; &]
[s5;:Raster`:`:Info`:`:bpp: [@(0.0.255) int]_[* bpp]&]
[s2;%RU-RU Число бит на пиксель. Дефолтное 
значение `= 24.&]
[s3; &]
[s4; &]
[s5;:Raster`:`:Info`:`:colors: [@(0.0.255) int]_[* colors]&]
[s2;%RU-RU Число цветов. Дефолтное значение 
`= 16777216.&]
[s3; &]
[s4; &]
[s5;:Raster`:`:Info`:`:dots: [_^Size^ Size]_[* dots]&]
[s2;%RU-RU Физический размер исходного изображения
, напр., для сканированных изображений, 
в 1/600 дюймов. Size(0, 0), если неизвестен 
(дефолтное значение).&]
[s3; &]
[s4; &]
[s5;:Raster`:`:Info`:`:hotspot: [_^Point^ Point]_[* hotspot]&]
[s2;%RU-RU Положение `"горячей точки`" (Hotspot). 
Если неизвестно или таковых нет, Point(0, 
0) (дефолтное значение).&]
[s3; &]
[s4; &]
[s5;:Raster`:`:Info`:`:kind: [@(0.0.255) int]_[* kind]&]
[s2;%RU-RU Вид изображения: [* IMAGE`_EMPTY], [* IMAGE`_ALPHA], 
[* IMAGE`_MASK], [* IMAGE`_OPAQUE]. Дефолтное значение 
`= [* IMAGE`_OPAQUE].&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:Raster`:`:Info`:`:orientation: [@(0.0.255) int]_[* orientation]&]
[s2;%RU-RU Ориентация изображения: FLIP`_NONE, 
FLIP`_MIRROR`_HORZ, FLIP`_ROTATE`_180, FLIP`_MIRROR`_VERT, FLIP`_TRANSPOSE, 
FLIP`_ROTATE`_CLOCKWISE, FLIP`_TRANSVERSE, FLIP`_ROTATE`_ANTICLOCKWISE. 
Это значение предназначено для поворота 
(flip) Image`'а в корректную ориентацию 
(обычно JPEG с цифровой камеры).&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Raster public methods]]}}&]
[s3; &]
[s5;:Raster`:`:SeekPage`(int`): [@(0.0.255) virtual] [@(0.0.255) void]_[* SeekPage]([@(0.0.255) i
nt]_[*@3 page])&]
[s2;%RU-RU Предоставляет Raster, способный 
обрабатывать источники, в которых 
более одного изображения (напр., анимированн
ые GIF`'ки). Устанавливает Raster в изображение 
номер [%-*@3 page], первое изо `= is 0.Дефолтная 
реализация пуста.&]
[s3; &]
[s4;%RU-RU &]
[s5;:Raster`:`:GetPageCount`(`): [@(0.0.255) virtual] [@(0.0.255) int]_[* GetPageCount]()&]
[s2;%RU-RU Возвращает число изображений 
в Raster. Дефолтная реализация возвращает 
1.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:Raster`:`:Create`(`): [@(0.0.255) virtual] [@(0.0.255) bool]_[* Create]()&]
[s2;%RU-RU Вызывается в начале обработки 
нового растра, напр., используется 
для чтения заголовочника файла и 
подготовки внутренних переменных 
к обработке. Значение возврата false 
указывает на неудачность.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:Raster`:`:GetSize`(`): [@(0.0.255) virtual] [_^Size^ Size]_[* GetSize]()_`=_[@3 0]&]
[s2;%RU-RU Возвращает размер Raster в пикселях.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:Raster`:`:GetInfo`(`): [@(0.0.255) virtual] [_^Raster`:`:Info^ Info]_[* GetInfo]()&]
[s2;%RU-RU Возвращает информацию о Raster.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:Raster`:`:GetLine`(int`): [@(0.0.255) virtual] [_^Raster`:`:Line^ Line]_[* GetLine]([@(0.0.255) i
nt]_[*@3 line])_`=_[@3 0]&]
[s2;%RU-RU Читает единичную сканлинию [%-*@3 line] 
из растра. По возможности, Raster должен 
быть оптимизирован на чтение сканлиний 
в восходящем порядке `- этого требует 
большинство обрабатывающих функций.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:Raster`:`:IsError`(`): [@(0.0.255) virtual] [@(0.0.255) bool]_[* IsError]()&]
[s2; Сигнализирует об ошибке во время 
обработки Raster. Например, может сигнализирова
ть о повреждении файла .png.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:Raster`:`:GetPaletteCount`(`): [@(0.0.255) virtual] [@(0.0.255) int]_[* GetPaletteCoun
t]()&]
[s2;%RU-RU Возвращает размер палитры для 
растра. Если палитры (palette) нет, возвращает 
0.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:Raster`:`:GetPalette`(`): [@(0.0.255) virtual] [@(0.0.255) const]_[_^RGBA^ RGBA]_`*[* Ge
tPalette]()&]
[s2;%RU-RU Возвращает текущую палитру, NULL, 
если её нет.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:Raster`:`:GetFormat`(`): [@(0.0.255) virtual] [@(0.0.255) const]_[_^RasterFormat^ Rast
erFormat]_`*[* GetFormat]()&]
[s2;%RU-RU Возвращает формат Raster, может возвращать 
NULL, если формат RGBA.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:Raster`:`:GetWidth`(`): [@(0.0.255) int]_[* GetWidth]()&]
[s2;%RU-RU То же, что и GetSize().cx.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:Raster`:`:GetHeight`(`): [@(0.0.255) int]_[* GetHeight]()&]
[s2;%RU-RU То же, что и GetSize().cy.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:Raster`:`:operator`[`]`(int`): [_^Raster`:`:Line^ Line]_[* operator`[`]]([@(0.0.255) i
nt]_[*@3 i])&]
[s2;%RU-RU То же, что и GetLine([%-*@3 i]).&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:Raster`:`:GetImage`(int`,int`,int`,int`,const Gate2`<int`,int`>`): [_^Image^ Image
]_[* GetImage]([@(0.0.255) int]_[*@3 x], [@(0.0.255) int]_[*@3 y], [@(0.0.255) int]_[*@3 cx], 
[@(0.0.255) int]_[*@3 cy], [@(0.0.255) const]_[_^Gate2^ Gate2]<[@(0.0.255) int], 
[@(0.0.255) int]>_[*@3 progress]_`=_[@(0.0.255) false])&]
[s5;:Raster`:`:GetImage`(const Gate2`<int`,int`>`): [_^Image^ Image]_[* GetImage]([@(0.0.255) c
onst]_[_^Gate2^ Gate2]<[@(0.0.255) int], [@(0.0.255) int]>_[*@3 progress]_`=_[@(0.0.255) fa
lse])&]
[s2;%RU-RU Преобразует область [%-*@3 x],[%-*@3 y],[%-*@3 cx],[%-*@3 cy], 
или весь растр, в Image. Параметр [%-*@3 progress].может 
использоваться для отслеживания 
операции (первый int `- текущий шаг, 
второй `- число необходимых шагов), 
а также для её отмены (если возвращает 
true; в этом случае возвращается пустое 
изображение). Дефолтное значение 
для этого параметра означает, что 
обратных сведений о прогрессе (feedback) 
не предоставляется.&]
[s3; &]
[s0; ]]