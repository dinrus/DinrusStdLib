topic "Класс DDARasterizer (Растризатор DDA)";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,2#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_}%RU-RU 
[ {{10000@(113.42.0) [s0;%- [*@2;3 Класс DDARasterizer]]}}&]
[s3;%- &]
[s1;:DDARasterizer`:`:class:%- [@(0.0.255)3 class][3 _][*3 DDARasterizer]&]
[s2; [*@(128.0.255) Простой несглаживающий (non`-antialiased) 
растризатор, способный чертить линии 
алгоритмом ][^http`:`/`/en`.wikipedia`.org`/wiki`/Bresenham`%27s`_line`_algorithm^ D
DA][*@(128.0.255)  и многоугольники с правилом 
чётное`-нечётное. Итог отображается 
чисто виртуальными методами, рисующими 
горизонтальные и вертикальные сегменты 
линий.]&]
[s3;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Список Публичных Методов]]}}&]
[s3;%- &]
[s5;:DDARasterizer`:`:PutHorz`(int`,int`,int`):%- [@(0.0.255) virtual] 
[@(0.0.255) void]_[* PutHorz]([@(0.0.255) int]_[*@3 x], [@(0.0.255) int]_[*@3 y], 
[@(0.0.255) int]_[*@3 cx])_`=_[@3 0]&]
[s2; Чисто виртуальный метод, от которого 
ожидается отрисовка горизонтальной 
линии по [%-*@3 x], [%-*@3 y] с длиной [%-*@3 cx].&]
[s3; &]
[s4; &]
[s5;:DDARasterizer`:`:PutVert`(int`,int`,int`):%- [@(0.0.255) virtual] 
[@(0.0.255) void]_[* PutVert]([@(0.0.255) int]_[*@3 x], [@(0.0.255) int]_[*@3 y], 
[@(0.0.255) int]_[*@3 cy])_`=_[@3 0]&]
[s2;%- [%RU-RU Чисто виртуальный метод, от которого 
ожидается отрисовка вертикальной 
линии по ][*@3 x][%RU-RU , ][*@3 y][%RU-RU  с длиной ][*@3 cx]&]
[s3; &]
[s4; &]
[s5;:DDARasterizer`:`:Move`(Point`):%- [_^DDARasterizer^ DDARasterizer][@(0.0.255) `&]_[* M
ove]([_^Point^ Point]_[*@3 p])&]
[s2; Перемещает начальную точку следующей 
линии в [%-*@3 p]. Эта точка также сохраняется 
как точка начала пути, и её потом можно 
использовать в методе Close.&]
[s3; &]
[s4; &]
[s5;:DDARasterizer`:`:Line`(Point`):%- [_^DDARasterizer^ DDARasterizer][@(0.0.255) `&]_[* L
ine]([_^Point^ Point]_[*@3 p])&]
[s2; Если растризатор в режиме черчения 
линии, то рисуется линия от начальной 
точки до [%-*@3 p]. [%-*@3 p] становится новой 
стартовой точкой. Конечная точка 
линии не чертится. На ширину линии 
может повлиять метод Width. Если растризатор 
в режими отрисовки многоугольника 
(запущен методом Polygon), то вместо этого 
добавляется линия в путь многоугольника.&]
[s3; &]
[s4; &]
[s5;:DDARasterizer`:`:Close`(`):%- [_^DDARasterizer^ DDARasterizer][@(0.0.255) `&]_[* Close
]()&]
[s2; Чертит линию от стартовой точки до 
точки начала пути, определённой Move.&]
[s3; &]
[s4; &]
[s5;:DDARasterizer`:`:Polygon`(`):%- [_^DDARasterizer^ DDARasterizer][@(0.0.255) `&]_[* Pol
ygon]()&]
[s2; Запускает многоугольный режим.&]
[s3; &]
[s4; &]
[s5;:DDARasterizer`:`:Fill`(`):%- [_^DDARasterizer^ DDARasterizer][@(0.0.255) `&]_[* Fill](
)&]
[s2; Завершает многоугольник и делает 
заливку.&]
[s3; &]
[s4; &]
[s5;:DDARasterizer`:`:Ellipse`(const Rect`&`):%- [_^DDARasterizer^ DDARasterizer][@(0.0.255) `&
]_[* Ellipse]([@(0.0.255) const]_[_^Rect^ Rect][@(0.0.255) `&]_[*@3 rect])&]
[s2; Отображает эллипс, как серию команд 
Move/Line.&]
[s3; &]
[s4; &]
[s5;:DDARasterizer`:`:Width`(int`):%- [_^DDARasterizer^ DDARasterizer][@(0.0.255) `&]_[* Wi
dth]([@(0.0.255) int]_[*@3 width])&]
[s2; Устанавливает толщину линии в [%-*@3 width] 
.&]
[s3; &]
[s4; &]
[s5;:DDARasterizer`:`:Cy`(int`):%- [@(0.0.255) void]_[* Cy]([@(0.0.255) int]_[*@3 cy])&]
[s2; Устанавливает общую высоту зоны 
отрисовки. Растризатор только эмитирует 
PutHorz/PutVert с y >`= 0 и y < [%-*@3 cy].&]
[s0; ]]