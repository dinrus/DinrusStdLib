topic "Класс Thread";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,0#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_}%RU-RU 
[ {{10000@(113.42.0) [s0; [*@7;4 Класс Thread]]}}&]
[s3;%- &]
[s1;:Thread`:`:class:%- [@(0.0.255) class]_[* Thread]_:_[@(0.0.255) private]_[*@3 NoCopy]&]
[s9; Инкапсуляция потока выполнения.&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0; [* Детали Конструктора]]}}&]
[s3;%- &]
[s5;:Thread`:`:Thread`(`):%- [* Thread]()&]
[s2; Дефолтный конструктор.&]
[s3; &]
[s4;%- &]
[s5;:Thread`:`:`~Thread`(`):%- [@(0.0.255) `~][* Thread]()&]
[s2; Деструктор. Выполняет открепление 
Detach `- поток продолжает выполняться.&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0; [* Список Публичных Методов]]}}&]
[s3;%- &]
[s5;:Upp`:`:Thread`:`:Run`(Upp`:`:Function`<void`(`)`>`,bool`):%- [@(0.0.255) bool]_[* Ru
n]([_^Upp`:`:Function^ Function]<[@(0.0.255) void]_()>_[*@3 cb], [@(0.0.255) bool]_[*@3 nos
hutdown]_`=_[@(0.0.255) false])&]
[s2; Стартует новый поток. Если [%-*@3 noshutdown] 
равно true, стартовавший поток ничего 
не знает о системе Shutdown `- в основном 
это означает, что эта система не влияет 
на счётчик потоков.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:Thread`:`:Start`(Upp`:`:Function`<void`(`)`>`,bool`):%- [@(0.0.255) static] 
[@(0.0.255) void]_[* Start]([_^Upp`:`:Function^ Function]<[@(0.0.255) void]_()>_[*@3 cb], 
[@(0.0.255) bool]_[*@3 noshutdown]_`=_[@(0.0.255) false])&]
[s2; Стартует поток и производит немедленный 
возврат (в этом случае не получится 
`"ждать`" финиша потока методом Wait). 
Если [%-*@3 noshutdown] равно true, стартовавший 
поток ничего не знает о системе Shutdown 
`- в основном это означает, что эта 
система не влияет на счётчик потоков.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:Thread`:`:StartNice`(Upp`:`:Function`<void`(`)`>`,bool`):%- [@(0.0.255) sta
tic] [@(0.0.255) void]_[* StartNice]([_^Upp`:`:Function^ Function]<[@(0.0.255) void]_()>_
[*@3 cb], [@(0.0.255) bool]_[*@3 noshutdown]_`=_[@(0.0.255) false])&]
[s2; То же, что и [%-* Start], но устанавливает 
приоритет в [* Nice].&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:Thread`:`:StartCritical`(Upp`:`:Function`<void`(`)`>`,bool`):%- [@(0.0.255) s
tatic] [@(0.0.255) void]_[* StartCritical]([_^Upp`:`:Function^ Function]<[@(0.0.255) void
]_()>_[*@3 cb], [@(0.0.255) bool]_[*@3 noshutdown]_`=_[@(0.0.255) false])&]
[s2; То же, что и [%-* Start], но устанавливает 
приоритет в [* Critical].&]
[s3; &]
[s4;%- &]
[s5;:Thread`:`:Detach`(`):%- [@(0.0.255) void]_[* Detach]()&]
[s2; Открепляет выполняемый поток от 
объекта Thread,`- то есть поток продолжает 
выполняться, но более не контролируется 
экземпляром Thread.&]
[s3;%- &]
[s4;%- &]
[s5;:Thread`:`:Wait`(`):%- [@(0.0.255) int]_[* Wait]()&]
[s2; Ждёт окончания стартовавшего потока. 
(`"join`").&]
[s3;%- &]
[s4;%- &]
[s5;:Thread`:`:IsOpen`(`)const:%- [@(0.0.255) bool]_[* IsOpen]()_[@(0.0.255) const]&]
[s2; Thread представляет существующий поток. 
Заметьте, что этот поток может быть 
уже завершённым и более не выполняющимся 
(вызов Wait в этом случае даёт немедленный 
возврат).&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:Thread`:`:GetId`(`)const:%- [_^Upp`:`:Thread`:`:Id^ Thread`::Id]_[* GetId]()_[@(0.0.255) c
onst]&]
[s2; Возвращает системно`-уникальный 
идентификатор потока.&]
[s3;%- &]
[s4;%- &]
[s5;:Thread`:`:GetHandle`(`)const:%- HANDLE_[* GetHandle]()_[@(0.0.255) const 
][*C `[WIN32`]]&]
[s5;:Thread`:`:GetHandle`(`)const:%- pthread`_t_[* GetHandle]()_[@(0.0.255) const 
][*C `[POSIX`]]&]
[s2; Возвращает специфичный для платформы 
хэндл потока.&]
[s3;%- &]
[s4;%- &]
[s5;:Thread`:`:Sleep`(int`):%- [@(0.0.255) static] [@(0.0.255) void]_[* Sleep]([@(0.0.255) in
t]_[*@3 ms])&]
[s2; Сон в течении указанного количества 
миллисекунд.&]
[s3;%- &]
[s4;%- &]
[s5;:Thread`:`:IsST`(`):%- [@(0.0.255) static] [@(0.0.255) bool]_[* IsST]()&]
[s2; Никаких дополнительных U`+`+ Thread не 
стартовало (пока выполняется только 
главный поток).&]
[s3;%- &]
[s4;%- &]
[s5;:Thread`:`:IsMain`(`):%- [@(0.0.255) static] [@(0.0.255) bool]_[* IsMain]()&]
[s2; Возвращает true, если текущий поток 
является главным.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:Thread`:`:IsUpp`(`):%- [@(0.0.255) static] [@(0.0.255) bool]_[* IsUpp]()&]
[s2; Вызываемый поток стартован из класса 
U`+`+ Thread (для главного потока возвращает 
false).&]
[s3;%- &]
[s4;%- &]
[s5;:Thread`:`:GetCount`(`):%- [@(0.0.255) static] [@(0.0.255) int]_[* GetCount]()&]
[s2; Число выполняемых потоков (стартованных 
через класс Thread).&]
[s3;%- &]
[s4;%- &]
[s5;:Thread`:`:ShutdownThreads`(`):%- [@(0.0.255) static] [@(0.0.255) void]_[* ShutdownThre
ads]()&]
[s2; Устанавливает флаг `"Shutdown`", ждёт окончания 
всех потоков, стартованных без noshutdown 
true, затем снова сбрасывает флаг. Подразумева
ется использование вместе с IsShutdownThreads 
в целях терминации длительных вторичных 
сервисных потоков. Главный поток 
вызывает ShutdownThreads, вторичные тестируют 
IsShutdownThreads и, если true, завершаются.&]
[s3;%- &]
[s4;%- &]
[s5;:Thread`:`:IsShutdownThreads`(`):%- [@(0.0.255) static] [@(0.0.255) bool]_[* IsShutdown
Threads]()&]
[s2; True, если ShutdownThreads активен. Предполагается 
их тестирование потоками, участвующими 
в системе shutdown.&]
[s3;%- &]
[s4;%- &]
[s5;:Thread`:`:AtExit:%- [@(0.0.255) static]_[@(0.0.255) void]_(`*[* AtExit]([@(0.0.255) void
]_(`*[*@3 exitfn])()))()&]
[s2; Позволяет установить функцию [%-*@3 exitfn], 
вызываемую при выходе потока. Возвращает 
указатель на уже установленную функцию 
или NULL, код`-клиент должен вызывать 
эту функцию (значение возврата не 
равно null)&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:Thread`:`:GetCurrentId`(`):%- [@(0.0.255) static] [_^Upp`:`:Thread`:`:Id^ Thr
ead`::Id]_[* GetCurrentId]()&]
[s2; Возвращает системно`-уникальный 
идентификатор вызываемого потока.&]
[s3;%- &]
[s4;%- &]
[s5;:Thread`:`:Priority`(int`):%- [@(0.0.255) bool]_[* Priority]([@(0.0.255) int]_[*@3 percen
t])&]
[s2; Устанавливает приоритет потока в 
[%-*@3 percent ][%- (от 0 до 200)]. В реальности, 
текущая реализация поддерживает 
только 5 уровней, 25%, 75%, 125%, 175% и более 
чем 175%; последние два уровня требуют 
привилегий root. Возвращает true, если 
установка приоритета прошла успешно.&]
[s4;%- &]
[s5;:Upp`:`:Thread`:`:Nice`(`):%- [_^Upp`:`:Thread^ Thread][@(0.0.255) `&]_[* Nice]()&]
[s2; Устанавливает приоритет, подходящий 
для длительно протекающих потоков.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:Thread`:`:Critical`(`):%- [_^Upp`:`:Thread^ Thread][@(0.0.255) `&]_[* Critical](
)&]
[s2; Устанавливает приоритет, подходящий 
для потоков с критической латентностью 
(наподрбии аудиогенераторов).&]
[s3;%- &]
[s0;%- ]]