topic "Класс Vector";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,0#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_}%RU-RU 
[ {{10000@(113.42.0) [s0; [*@7;4 Класс Vector]]}}&]
[s3; &]
[s1;:noref:%- [@(0.0.255)3 template][3 _<][@(0.0.255)3 class][3 _][*@4;3 T][@(0.0.255)3 >]&]
[s1;:Vector`:`:class:%- [@(0.0.255) class]_[* Vector]_:_[@(0.0.255) public]_[*@3 MoveableAndDe
epCopyOption][@(0.0.255) <]_[* Vector][@(0.0.255) <][*@4 T][@(0.0.255) >]_>&]
[s8; [*C@4 T]-|Тип элементов, сохраняемых в 
Vector`'е. Требуется, чтобы T был [*/^topic`:`/`/Core`/srcdoc`/Moveable`_ru`-ru^ д
вижимый][*/  ]и имел в наличии либо [*/^topic`:`/`/Core`/srcdoc`/pick`_`_ru`-ru^ к
онструктор глубокой копии], либо [*/^topic`:`/`/Core`/srcdoc`/pick`_`_ru`-ru^ п
ик`-конструктор], либо [*/ дефолтный 
конструктор].&]
[s9; Это самый эффективный `"флейвор`" 
базового контейнера случайного доступа. 
Его фичи (`"фишки`") происходят от того 
факта, что он реализован как простой 
вектор элементов в духе языка Си.&]
[s9; Неудобство Vector`'а состоит в общем 
требовании к элементам, находящимся 
в нём, `- они должны быть [*/^topic`:`/`/Core`/srcdoc`/Moveable`_ru`-ru^ д
вижимыми]. Другое неудобство в том, 
что многие операции повреждают ссылки 
(то есть ссылки и указатели  C`+`+)  на 
элементы.&]
[s9; Подобно любому другому контейнеру 
NTL, Vector является типом [*/^topic`:`/`/Core`/srcdoc`/Moveable`_ru`-ru^ д
вижимый][*/  ]с семантикой [*/^topic`:`/`/Core`/srcdoc`/pick`_`_ru`-ru^ п
ик и необязательная глубокая копия] 
. Вызывать методы `"пикнутого`" Vector`'а 
является логической ошибкой, за исключением
&]
[s0;%- &]
[s0;%- void_operator`=([@(0.128.128) pick`_]_[_^Vector^ Vector]`&_[@3 v])&]
[s0; void operator<<`=(const Vector`& [@3 v]) [/ (defined using DeepCopyOptionTemplate)]&]
[s0;%- void_Clear()&]
[s0;%- bool_IsPicked()_const&]
[s0; &]
[s0; Необязательная глубокая копия реализована 
через макрос DeepCopyOptionTemplate.&]
[s0; &]
[s0; Vector предоставляет доступ к внутреннему 
вектору элементов в духе Си (либо 
через Begin, либо даже посредством прясого 
каста (переброса в тип из типа)) и может 
использоваться в качестве буфера 
для Си`-подобных функций, хотя в таких 
случаях более удобно использовать 
класс [^topic`:`/`/Core`/src`/Buffer`_ru`-ru^ Buffer].&]
[s3;^topic`:`/`/Core`/src`/Buffer`$en`-us^ &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0; [* Детали Конструктора]]}}&]
[s3;%- &]
[s5;:Vector`:`:Vector`(`):%- [* Vector]()&]
[s2; Дефолтный конструктор. Конструирует 
пустой Vector.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:Vector`:`:Vector`(int`):%- [@(0.0.255) explicit]_[* Vector]([@(0.0.255) int]_[*@3 n
])&]
[s2; Создаёт Vector из [%-*@3 n] дефолтно сконструирован
ных элементов.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:Vector`:`:Vector`(int`,const T`&`):%- [@(0.0.255) explicit]_[* Vector]([@(0.0.255) i
nt]_[*@3 n], [@(0.0.255) const]_[*@4 T][@(0.0.255) `&]_[*@3 init])&]
[s2; Создаёт Vector из [%-*@3 n] eэлементов, копи`-сконстр
уированных как [%-*@3 init].&]
[s3; &]
[s4;%- &]
[s5;:Vector`:`:Vector`(pick`_ Vector`&`):%- [* Vector]([@(0.128.128) pick`_]_[* Vector][@(0.0.255) `&
]_[*@3 v])&]
[s2; Пик`-конструктор. Делает трансфер 
исходного Vector`'а за незначительное 
константное время, но при пикинге 
разрушает его.&]
[s7; v-|Исходный Vector.&]
[s3; &]
[s4;%- &]
[s5;:Vector`:`:Vector`(const Vector`&`,int`):%- [* Vector]([@(0.0.255) const]_[* Vector][@(0.0.255) `&
]_[*@3 v], [@(0.0.255) int])&]
[s2; Необязательный конструктор глубокой 
копии.&]
[s6; Требуется, чтобы у T был конструктор 
глубокой копии или необязательный 
конструктор глубокой копии.&]
[s2; [*C@3 v]-|Исходный Vector. [%-*@3 v].&]
[s3; &]
[s4;%- &]
[s5;:Vector`:`:`~Vector`(`):%- [@(0.0.255) `~][* Vector]()&]
[s2; Деструктор. Вызывает деструкторы 
всех элементов в Vector`'е.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:Vector`:`:Vector`(std`:`:initializer`_list`<T`>`):%- [* Vector]([_^http`:`/`/en`.cppreference`.com`/w`/cpp`/utility`/initializer`_list^ s
td`::initializer`_list]<[*@4 T]>_[*@3 init])&]
[s2; Инициализация C`+`+ 11.&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0; [* Список Публичных Членов]]}}&]
[s3;%- &]
[s5;:Vector`:`:Add`(`):%- [*@4 T][@(0.0.255) `&]_[* Add]()&]
[s2; Добавляет новый, дефолтно сконструированны
й, элемент в Vector.&]
[s6; Требуется, чтобы у T был дефолтный 
конструктор.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s7; [*/ Возвратное значение]-|Ссылка на вновь 
добавленный, дефолтно сконструированный 
элемент.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:Vector`:`:Create`(Args`.`.`.args`):%- [@(0.0.255) template]_<[@(0.0.255) clas
s...]_[*@4 Args]>_[*@4 T][@(0.0.255) `&]_[* Create]([*@4 Args][@(0.0.255) ...]_args)&]
[s2; Добавляет новый элемент в Vector, используя 
args как параметры конструктора.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Add`(const T`&`):%- [*@4 T][@(0.0.255) `&]_[* Add]([@(0.0.255) const]_[*@4 T][@(0.0.255) `&
]_[*@3 x])&]
[s2; Добавляет новый элемент с указанным 
значением в Vector.&]
[s6; Требуется, чтобы у T имелся конструктор 
глубокой копии.&]
[s6; Повреждает итераторы и сылки на Vector.&]
[s7; [*C@3 x]-|Значение, копируемое во вновь 
создаваемый элемент.&]
[s7; [*/ Возвратное значение]-|Ссылка на новый 
элемент в Vector`'е.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:Vector`:`:Add`(T`&`&`):%- [*@4 T][@(0.0.255) `&]_[* Add]([*@4 T][@(0.0.255) `&`&]_[*@3 x
])&]
[s2; Добавляет новый элемент в Vector и пикует 
значение его параметра. &]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:Vector`:`:Create`(Args`&`&`.`.`.args`):%- [@(0.0.255) template]_<[@(0.0.255) c
lass...]_[*@4 Args]>_[*@4 T][@(0.0.255) `&]_[* Create]([*@4 Args][@(0.0.255) `&`&...]_args)&]
[s2; Создаёт и добавляет новый элемент 
в Array. [%-*@3 args] передаются в конструктор.&]
[s3; &]
[s4;%- &]
[s5;:Vector`:`:AddN`(int`):%- [@(0.0.255) void]_[* AddN]([@(0.0.255) int]_[*@3 n])&]
[s2; Добавляет указанное число дефолтно 
сконструированных элементов в Vector.&]
[s6; Требуется, чтобы у T имелся конструктор 
глубокой копии.&]
[s6; Повреждает итераторы и сылки на Vector&]
[s7; [*C@3 n]-|Число добавляемых элементов&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:operator`[`]`(int`)const:%- [@(0.0.255) const]_[*@4 T][@(0.0.255) `&]_[* opera
tor`[`]]([@(0.0.255) int]_[*@3 i])_[@(0.0.255) const]&]
[s2; Возвращает ссылку на элемент по указанной 
позиции.&]
[s7; [*C@3 i]-|Позиция элемента.&]
[s7; [*/ Возвратное значение]-|Константаная 
ссылка на элемент.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:operator`[`]`(int`):%- [*@4 T][@(0.0.255) `&]_[* operator`[`]]([@(0.0.255) int
]_[*@3 i])&]
[s2; Возвращает ссылку на элемент по указанной 
позиции.&]
[s7; [*C@3 i]-|Позиция элемента.&]
[s7; [*/ Возвратное значение]-|Ссылка на элемент.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:Vector`:`:Get`(int`,const T`&`)const:%- [@(0.0.255) const]_[*@4 T][@(0.0.255) `&
]_[* Get]([@(0.0.255) int]_[*@3 i], [@(0.0.255) const]_[*@4 T][@(0.0.255) `&]_[*@3 def])_[@(0.0.255) c
onst]&]
[s5;:Upp`:`:Vector`:`:Get`(int`,T`&`):%- [*@4 T][@(0.0.255) `&]_[* Get]([@(0.0.255) int]_[*@3 i
], [*@4 T][@(0.0.255) `&]_[*@3 def])&]
[s2; Если [%-*@3 i] полноценный индекс (он >`= 
0 и < GetCount()), то возвращает ссылку на 
эдемент по [%-*@3 i], иначе возвращает 
[%-*@3 def].&]
[s3; &]
[s4;%- &]
[s5;:Vector`:`:GetCount`(`)const:%- [@(0.0.255) int]_[* GetCount]()_[@(0.0.255) const]&]
[s2; Возвращает число элементов в Vector`'е.&]
[s7; [*/ Возвратное значение]-|Действительно 
число элементов.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:IsEmpty`(`)const:%- [@(0.0.255) bool]_[* IsEmpty]()_[@(0.0.255) const]&]
[s2; Проверяет, пуст ли Vector. То же, что 
и GetCount() `=`= 0.&]
[s7; [*/ Возвратное значение]-|true, если Vector 
пустой, false иначе.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Trim`(int`):%- [@(0.0.255) void]_[* Trim]([@(0.0.255) int]_[*@3 n])&]
[s2; Снижает число элементов в Vector`'е до 
указанного. Требуемое число должно 
быть меньше или равно действительному 
числу элементов в нём. Ёмкость вектора, 
однако, не меняется.&]
[s6; Повреждает итераторы у Vector.&]
[s7; [*C@3 n]-|Требуемое число элементов.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:SetCount`(int`):%- [@(0.0.255) void]_[* SetCount]([@(0.0.255) int]_[*@3 n])&]
[s2; Меняет счёт элементов в Vector`'е до 
заданного значения. Если требуемое 
число элементов больше действительного, 
вновь добавляемые элементы конструируются 
дефолтно. Если у Vector`'а нужно увеличить 
ёмкость, новая ёмкость будет точно 
соответствовать требуемому числу 
элементов (в отличие от [* SetCountR]).&]
[s6; У T обязательно должен быть дефолтный 
конструктор.&]
[s6; Повреждает итераторы и ссылки у Vector.&]
[s7; [*C@3 n]-|Требуемое число элементов.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:SetCount`(int`,const T`&`):%- [@(0.0.255) void]_[* SetCount]([@(0.0.255) int
]_[*@3 n], [@(0.0.255) const]_[*@4 T][@(0.0.255) `&]_[*@3 init])&]
[s2; Меняет счёт элементов в Vector`'е до 
заданного значения. Если требуемое 
число элементов больше действительного, 
вновь добавляемые элементы инициализируютс
я в заданное значение с помощью копи`-констру
ктора. Если у Vector`'а нужно увеличить 
ёмкость, новая ёмкость будет точно 
соответствовать требуемому числу 
элементов (в отличие от [* SetCountR]).&]
[s6; У T обязательно должен быть копи`-конструкто
р.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s7; [*C@3 n]-|Требуемое число элементов.&]
[s7; [*C@3 init]-|Значение для инициализации 
вновь добавляемых элементов.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:SetCountR`(int`):%- [@(0.0.255) void]_[* SetCountR]([@(0.0.255) int]_[*@3 n])&]
[s2; Меняет счёт элементов в Vector`'е до 
заданного значения. Если требуемое 
число элементов больше действительного, 
вновь добавляемые элементы конструируются 
дефолтно.  Если у Vector`'а нужно увеличить 
ёмкость, новая ёмкость будет больше 
требуемого числа элементов (в отличие 
от [* SetCount]), что позволит добавлять 
другие элементы, более не увеличивая 
ёмкость.&]
[s6; У T должен иметься дефолтный конструктор.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s7; [*C@3 n]-|Требуемое число элементов.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:SetCountR`(int`,const T`&`):%- [@(0.0.255) void]_[* SetCountR]([@(0.0.255) i
nt]_[*@3 n], [@(0.0.255) const]_[*@4 T][@(0.0.255) `&]_[*@3 init])&]
[s2; Изменяет число элементов в Vector`'е 
до указанного значения. Если требуемое 
число элементов больше действительного 
числа, вновь добавляемые элементы 
инициализируются в указанное значени 
с помощью копи`-конструктора. Если 
Vector`'у требуется увеличить ёмкость, 
новая ёмкость будет больше требуемого 
числа элементов (в отличие от [* SetCount]), 
что позволит добавлять другие элементы, 
более не увеличивая ёмкость.&]
[s6; У T должен быть конструктор глубокой 
копии.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s7; [*C@3 n]-|Требуемое число элементов.&]
[s7; [*C@3 init]-|Значение для инициализации 
вновь добавляемых элементов.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Clear`(`):%- [@(0.0.255) void]_[* Clear]()&]
[s2; Удаляет все элементы из Vector`'а. Ёмкость 
также уменьшается до нуля.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:At`(int`):%- [*@4 T][@(0.0.255) `&]_[* At]([@(0.0.255) int]_[*@3 i])&]
[s2; Если указанная позиция ниже числа 
элементов в Vector`'е ([* i < GetCount()]), возвращает 
ссылку на элемент по этой позиции. 
Иначе увеличивает число элементов 
в Vector`'е до [* i `+ 1]. Вновь добавленные 
элементы конструируются дефолтно. 
Если Vector`'у нужно добавить ёмкость, 
новая ёмкость будет больше требуемого 
числа элементов, что позволить добавлять 
новые элементы без её дальнейшего 
увеличения.&]
[s6; У T требуется дефолтный конструктор.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s7; [*C@3 i]-|Позиция требуемого элемента.&]
[s7; [*/ Возвратное значение]-|Ссылка на требуемый 
элемент.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:At`(int`,const T`&`):%- [*@4 T][@(0.0.255) `&]_[* At]([@(0.0.255) int]_[*@3 i], 
[@(0.0.255) const]_[*@4 T][@(0.0.255) `&]_[*@3 x])&]
[s2; Если указанная позиция ниже числа 
элементов в Vector`'е (i < GetCount()), возвращает 
ссылку на элемент по этой позиции. 
Иначе увеличивает число элементов 
в Vector`'е до i `+ 1. Вновь добавленные 
элементы копи`-конструируются из 
x. Если Vector`'у нужно добавить ёмкость, 
новая ёмкость будет больше требуемого 
числа элементов, что позволить добавлять 
новые элементы без её дальнейшего 
увеличения.&]
[s6; У T требуется конструктор глубокой 
копии.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s7; [*C@3 i]-|Позиция требуемого элемента.&]
[s7; [*C@3 x]-|Значение для инициализации вновь 
добавляемых элементов.&]
[s7; [*/ Возвратное значение]-|Ссылка на требуемый 
элемент.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Shrink`(`):%- [@(0.0.255) void]_[* Shrink]()&]
[s2; Минимизирует потребление памяти 
Vector`'ом, уменьшая ёмкость до числа 
элементов.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Reserve`(int`):%- [@(0.0.255) void]_[* Reserve]([@(0.0.255) int]_[*@3 n])&]
[s2; Резервирует ёмкость. Если требуемая 
ёмкость больше текущей, тогда она 
увеличивается до требуемого значения.&]
[s7; [*C@3 xtra]-|Требуемая ёмкость.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:GetAlloc`(`)const:%- [@(0.0.255) int]_[* GetAlloc]()_[@(0.0.255) const]&]
[s2; Возвращает текущую ёмкость Vector`'а.&]
[s7; [*/ Возвратное значение]-|Ёмкость Vector`'а.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Set`(int`,const T`&`,int`):%- [@(0.0.255) void]_[* Set]([@(0.0.255) int]_[*@3 i
], [@(0.0.255) const]_[*@4 T][@(0.0.255) `&]_[*@3 x], [@(0.0.255) int]_[*@3 count])&]
[s2; Устанавливает требуемое число элементов, 
начиная с позиции [* i] в указанное значение. 
Если требуемое число элементов превышает 
существующее в Vector`'е, то элементы 
добавляются в него.&]
[s6; У T требуется конструктор глубокой 
копии.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s7; [*C@3 i]-|Стартовая позиция.&]
[s7; [*C@3 x]-|Значение.&]
[s7; [*C@3 count]-|Число элементов.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Set`(int`,const T`&`):%- [*@4 T][@(0.0.255) `&]_[* Set]([@(0.0.255) int]_[*@3 i],
 [@(0.0.255) const]_[*@4 T][@(0.0.255) `&]_[*@3 x])&]
[s5;:Upp`:`:Vector`:`:Set`(int`,T`&`&`):%- [*@4 T][@(0.0.255) `&]_[* Set]([@(0.0.255) int]_[*@3 i
], [*@4 T][@(0.0.255) `&`&]_[*@3 x])&]
[s2; Устанавливает элемент по [%-*@3 i] в [%-*@3 x] 
(при необходимости добавляет дефолтно 
сконструированные элементы) и возвращает 
ссылку на него.&]
[s3; &]
[s4;%- &]
[s5;:Vector`:`:Remove`(int`,int`):%- [@(0.0.255) void]_[* Remove]([@(0.0.255) int]_[*@3 i], 
[@(0.0.255) int]_[*@3 count]_`=_[@3 1])&]
[s2; Удаляет требуемое число элементов.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s7; [*C@3 i]-|Позиция.&]
[s7; [*C@3 count]-|Число удаляемых элементов.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Remove`(const int`*`,int`):%- [@(0.0.255) void]_[* Remove]([@(0.0.255) const
]_[@(0.0.255) int]_`*[*@3 sorted`_list], [@(0.0.255) int]_[*@3 n])&]
[s2; Удаляет несколько элементов из Vector`'а. 
Время операции почти не зависит от 
числа элементов.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s7; [*C@3 sorted`_list]-|Указатель на массив позиций 
для удаления. Должен быть отсортирован 
по возрастанию.&]
[s7; [*C@3 n]-|Число удаляемых элементов.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Remove`(const Vector`<int`>`&`):%- [@(0.0.255) void]_[* Remove]([@(0.0.255) c
onst]_[_^Vector^ Vector][@(0.0.255) <int>`&]_[*@3 sorted`_list])&]
[s2; Удаляет несколько элементов из Vector`'а. 
То же, что и [* Remove(sorted`_list, sorted`_list.GetCount())].&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s7; [*C@3 sorted`_list]-|Сортированный Vector позиций 
для удаления.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:Vector`:`:RemoveIf`(Condition`):%- [@(0.0.255) template]_<[@(0.0.255) class]_
[*@4 Condition]>_[@(0.0.255) void]_[* RemoveIf]([*@4 Condition]_[*@3 c])&]
[s2; Удаляет все элементы, удовлетворяющие 
предикат [%-*@3 c]. [%-*@3 c] `- это объект`-функция 
(обычно лямбда), у которого один параметр 
типа int, представляющий индекс элемента, 
и возвращающий true, когда элемент по 
этому индексу подлежит удалению.&]
[s3; &]
[s4;%- &]
[s5;:Vector`:`:InsertN`(int`,int`):%- [@(0.0.255) void]_[* InsertN]([@(0.0.255) int]_[*@3 i],
 [@(0.0.255) int]_[*@3 count]_`=_[@3 1])&]
[s2; Вставляет указанное число дефолтно 
сконструированных элементов в указанной 
позиции.&]
[s6; У T требуется дефолтный конструктор.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s7; [*C@3 i]-|Позиция.&]
[s7; [*C@3 count]-|Число вставляемых элементов.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Insert`(int`):%- [*@4 T][@(0.0.255) `&]_[* Insert]([@(0.0.255) int]_[*@3 i])&]
[s2; Вставляет один дефолтно сконструированный 
элемент в указанной позиции.&]
[s7; [*1 У T требуется дефолтный конструктор.]&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s7; [*C@3 i]-|Позиция.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Insert`(int`,const T`&`,int`):%- [@(0.0.255) void]_[* Insert]([@(0.0.255) in
t]_[*@3 i], [@(0.0.255) const]_[*@4 T][@(0.0.255) `&]_[*@3 x], [@(0.0.255) int]_[*@3 count])&]
[s2; Вставляет указанное число элементов, 
устанавливая их в указанное значение.&]
[s6;~~~.992; У T требуется конструктор глубокой 
копии.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s7; [*C@3 i]-|Позиция.&]
[s7; [*C@3 x]-|Значение вставляемых элементов.&]
[s7; [*C@3 count]-|Число вставляемых элементов.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Insert`(int`,const T`&`):%- [*@4 T][@(0.0.255) `&]_[* Insert]([@(0.0.255) int]_
[*@3 i], [@(0.0.255) const]_[*@4 T][@(0.0.255) `&]_[*@3 x])&]
[s2; Вставляет элемент в позиции [%-*@3 i], 
устанавливая его значение в [%-*@3 x], 
и возвращает ссылку на него.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:Vector`:`:Insert`(int`,T`&`&`):%- [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 T
]>_[*@4 T][@(0.0.255) `&]_[* Insert]([@(0.0.255) int]_[*@3 q], [*@4 T][@(0.0.255) `&`&]_[*@3 x])&]
[s2; Вставляет элемент по [%-*@3 i], пикуя контент 
[%-*@3 x], и возвращает ссылку на этот новый 
элемент.&]
[s3; &]
[s4;%- &]
[s5;:Vector`:`:Insert`(int`,const Vector`&`):%- [@(0.0.255) void]_[* Insert]([@(0.0.255) in
t]_[*@3 i], [@(0.0.255) const]_[_^Vector^ Vector][@(0.0.255) `&]_[*@3 x])&]
[s2; Вставляет все элементы из другого 
Vector`'а.&]
[s6;~~~.992; У T требуется конструктор глубокой 
копии.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s7; [*C@3 i]-|Позиция.&]
[s7; [*C@3 x]-|Исходный Vector.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Insert`(int`,const Vector`&`,int`,int`):%- [@(0.0.255) void]_[* Insert]([@(0.0.255) i
nt]_[*@3 i], [@(0.0.255) const]_[_^Vector^ Vector][@(0.0.255) `&]_[*@3 x], 
[@(0.0.255) int]_[*@3 offset], [@(0.0.255) int]_[*@3 count])&]
[s2; Вставляет диапазон элементов из 
другого Vector`'а.&]
[s6;~~~.992; У T требуется конструктор глубокой 
копии.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s7; [*C@3 i]-|Позиция вставки.&]
[s7; [*C@3 x]-|Исходный Vector.&]
[s7; [*C@3 offset]-|Позиция первого вставляемого 
элемента в исходном Vector`'е.&]
[s7; [*C@3 count]-|Число вставляемых элементов.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:Vector`:`:Insert`(int`,Upp`:`:Vector`&`&`):%- [@(0.0.255) void]_[* Insert]([@(0.0.255) i
nt]_[*@3 i], [_^Upp`:`:Vector^ Vector][@(0.0.255) `&`&]_[*@3 x])&]
[s2; Вставляет исходный Vector в указанной 
позиции, используя семантику пик`-трансфера.
 Работает быстрее вставки с глубокой 
копией, не использует конструктор 
глубокой копии для T, но разрушает 
исходный Vector.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:Vector`:`:Insert`(int`,std`:`:initializer`_list`<T`>`):%- [@(0.0.255) void]_
[* Insert]([@(0.0.255) int]_[*@3 i], [_^std`:`:initializer`_list^ std`::initializer`_list]<
[*@4 T]>_[*@3 init])&]
[s2; Вставляет список инициализации в 
стиле C`+`+11.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:Vector`:`:Append`(std`:`:initializer`_list`<T`>`):%- [@(0.0.255) void]_[* App
end](std`::initializer`_list<[*@4 T]>_[*@3 init])&]
[s2; Приставляет список инициализации 
в стиле C`+`+11.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:InsertSplit`(int`,Vector`<T`>`&`,int`):%- [@(0.0.255) void]_[* InsertSplit
]([@(0.0.255) int]_[*@3 i], [_^Vector^ Vector]<[*@4 T]>`&_[*@3 v], [@(0.0.255) int]_[*@3 from])
&]
[s2; Вставляет часть исходного вектора 
[%-*@3 v], начиная с элемента [%-*@3 from] и до 
конца, в позиции [%-*@3 i], и обрезает (trims) 
[%-*@3 v] по [%-*@3 from], эффективно разбивая 
[%-*@3 v] на две части.&]
[s3; &]
[s4;%- &]
[s5;:Vector`:`:Append`(const Vector`&`):%- [@(0.0.255) void]_[* Append]([@(0.0.255) const]_
[_^Vector^ Vector][@(0.0.255) `&]_[*@3 x])&]
[s2; Приставляет все элементы из исходного 
Vector`'а.&]
[s6;~~~.992; У T требуется конструктор глубокой 
копии.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s7; [*C@3 x]-|Исходный Vector.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Append`(const Vector`&`,int`,int`):%- [@(0.0.255) void]_[* Append]([@(0.0.255) c
onst]_[_^Vector^ Vector][@(0.0.255) `&]_[*@3 x], [@(0.0.255) int]_[*@3 o], 
[@(0.0.255) int]_[*@3 c])&]
[s2; Приставляет диапазон элементов из 
исходного Vector`'а.&]
[s6;~~~.992; У T требуется конструктор глубокой 
копии.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s7; [*C@3 x]-|Исходный Vector.&]
[s7; [*C@3 o]-|Позиция первого вставляемого 
элемента в исходном Vector`'е.&]
[s7; [*C@3 c]-|Число вставляемых элементов.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:Vector`:`:Append`(Upp`:`:Vector`&`&`):%- [@(0.0.255) void]_[* Append]([_^Upp`:`:Vector^ V
ector][@(0.0.255) `&`&]_[*@3 x])&]
[s2; Приставляет исходный Vector, используя 
семантику пик`-трансфера. Работает 
быстрее вставки с глубокой копией, 
не использует конструктор глубокой 
копии для T, но разрушает исходный 
Vector.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Swap`(int`,int`):%- [@(0.0.255) void]_[* Swap]([@(0.0.255) int]_[*@3 i1], 
[@(0.0.255) int]_[*@3 i2])&]
[s2; Меняет местами элементы по [%-*@3 i1] и 
[%-*@3 i2].&]
[s3; &]
[s4;%- &]
[s5;:Vector`:`:Drop`(int`):%- [@(0.0.255) void]_[* Drop]([@(0.0.255) int]_[*@3 n]_`=_[@3 1])&]
[s2; Роняет указанное число элементов 
в  Vector`'е (то же, что и Trim(GetCount() `- n)).&]
[s7; [*C@3 n]-|Число элементов.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Top`(`):%- [*@4 T][@(0.0.255) `&]_[* Top]()&]
[s2; Возвращает ссылку на последний элемент 
в Vector`'е.&]
[s7; [*/ Возвратное значение]-|Ссылка на последний 
элемент в Vector`'е.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Top`(`)const:%- [@(0.0.255) const]_[*@4 T][@(0.0.255) `&]_[* Top]()_[@(0.0.255) c
onst]&]
[s2; Возвращает константную ссылку на 
последний элемент в Vector`'е.&]
[s7; [*/ Возвратное значение]-|Ссылка на последний 
элемент в Vector`'е.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Pop`(`):%- [*@4 T]_[* Pop]()&]
[s2; Роняет последний элемент в Vector`'е 
и возвращает его значение.&]
[s6; У T требуется конструктор глубокой 
копии.&]
[s7; [*/ Возвратное значение]-|Значение уроненного 
элемента.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:operator T`*`(`):%- [@(0.0.255) operator]_[*@4 T][@(0.0.255) `*]()&]
[s2; Возвращает неконстантный указатель 
на элементы.&]
[s7; [*/ Возвратное значение]-|Указатель 
на элементы.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:operator const T`*`(`)const:%- [@(0.0.255) operator]_[@(0.0.255) const]_[*@4 T
][@(0.0.255) `*]()_[@(0.0.255) const]&]
[s2; Возвращает константный указатель 
на элементы.&]
[s7; [*/ Возвратное значение]-|Указатель 
на элементы.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:operator`<`<`(const T`&`):%- [_^Vector^ Vector][@(0.0.255) `&]_[* operator<<
]([@(0.0.255) const]_[*@4 T][@(0.0.255) `&]_[*@3 x])&]
[s2; Оператор, эквивалент [* void Add(const T`&x)]. 
Возвратом ссылки на Vector позволяет 
добавить больше элементов в одно 
выражение, таким образом, напр., позволяя 
строить временный Vector как часть выражения, 
типа Foo((Vector<int>() << 1 << 2 << 4)).&]
[s6; У T требуется конструктор глубокой 
копии.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:Vector`:`:operator`<`<`(T`&`&`):%- [_^Upp`:`:Vector^ Vector][@(0.0.255) `&]_[* o
perator<<]([*@4 T][@(0.0.255) `&`&]_[*@3 x])&]
[s2; Оператор, эквивалент [* void Add(TT`&x)]. Возвратом 
ссылки на Vector позволяет добавить 
больше элементов в одно выражение, 
таким образом, напр., позволяя строить 
временный Vector как часть выражения.&]
[s6; У T требуется конструктор глубокой 
копии.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s3; &]
[s4;%- &]
[s5;:Vector`:`:ToString`(`)const:%- [_^String^ String]_[* ToString]()_[@(0.0.255) const]&]
[s2; Преобразует контейнер в String, главным 
образов, в отладочных целях.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:operator`=`=`(const Vector`<T`>`&`)const:%- [@(0.0.255) bool]_[* operator`=
`=]([@(0.0.255) const]_[_^Vector^ Vector]<[*@4 T]>`&_[*@3 b])_[@(0.0.255) const]&]
[s5;:Vector`:`:operator`!`=`(const Vector`<T`>`&`)const:%- [@(0.0.255) bool]_[* operator!
`=]([@(0.0.255) const]_[_^Vector^ Vector]<[*@4 T]>`&_[*@3 b])_[@(0.0.255) const]&]
[s2; Сравнивает два контейнера на (не)равенство, 
используя T`::operator`=`=.&]
[s3; &]
[s4;%- &]
[s5;:Vector`:`:Compare`(const Vector`<T`>`&`)const:%- [@(0.0.255) int]_[* Compare]([@(0.0.255) c
onst]_[_^Vector^ Vector]<[*@4 T]>`&_[*@3 b])_[@(0.0.255) const]&]
[s5;:Vector`:`:operator`<`=`(const Vector`<T`>`&`)const:%- [@(0.0.255) bool]_[* operator<
`=]([@(0.0.255) const]_[_^Vector^ Vector]<[*@4 T]>`&_[*@3 b])_[@(0.0.255) const]&]
[s5;:Vector`:`:operator`>`=`(const Vector`<T`>`&`)const:%- [@(0.0.255) bool]_[* operator>
`=]([@(0.0.255) const]_[_^Vector^ Vector]<[*@4 T]>`&_[*@3 b])_[@(0.0.255) const]&]
[s5;:Vector`:`:operator`<`(const Vector`<T`>`&`)const:%- [@(0.0.255) bool]_[* operator<](
[@(0.0.255) const]_[_^Vector^ Vector]<[*@4 T]>`&_[*@3 b])_[@(0.0.255) const]&]
[s5;:Vector`:`:operator`>`(const Vector`<T`>`&`)const:%- [@(0.0.255) bool]_[* operator>](
[@(0.0.255) const]_[_^Vector^ Vector]<[*@4 T]>`&_[*@3 b])_[@(0.0.255) const]&]
[s2; Лексикографически сравнивает два 
контейнера, используя SgnCompare для элементов.&]
[s3; &]
[s4;%- &]
[s5;:Vector`:`:operator`|`(pick`_ T`&`):%- [_^Vector^ Vector][@(0.0.255) `&]_[* operator`|](
[@(0.128.128) pick`_]_[*@4 T][@(0.0.255) `&]_[*@3 x])&]
[s2; Оператор, замена [* void AddPick(pick`_ T`&x)]. 
Возвратом ссылки на Vector позволяет 
добавить больше элементов в одно 
выражение, таким образом, напр., позволяя 
строить временный Vector как часть выражения.&]
[s6; У T требуется пик`-конструктор.&]
[s6; Повреждает итераторы и ссылки на 
Vector.&]
[s7; [*C@3 x]-|Исходный экземпляр T, который 
будет пикирован.&]
[s7; [*/ Возвратное значение]-|Ссылка на Vector 
(`*this).&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Serialize`(Stream`&`):%- [@(0.0.255) void]_[* Serialize]([_^Stream^ Stream][@(0.0.255) `&
]_[*@3 s])&]
[s2; Сериализует контент Vector`'а в/из потока 
Stream. Работает только, если NTL iиспользуется 
как часть of UPP.&]
[s6; Требует у T наличия оператора сериализации.&]
[s7; [*C@3 s]-|Целевой/исходный поток.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:operator`=`(pick`_ Vector`&`):%- [@(0.0.255) void]_[* operator`=]([@(0.128.128) p
ick`_]_[_^Vector^ Vector][@(0.0.255) `&]_[*@3 v])&]
[s2; Пик`-оператор. Выполняет трансфер 
исходного Vector`'а за краткое константное 
время, но разрушает его при пикинге.&]
[s7; [*C@3 v]-|Исходный Vector.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:IsPicked`(`)const:%- [@(0.0.255) bool]_[* IsPicked]()_[@(0.0.255) const]&]
[s2; Возвращает [* true], еслиVector в `"пикнутом`" 
состоянии.&]
[s7; [*/ Возвратное значение]-|[* true], если Vector 
в `"пикнутом`" состоянии, [* false] иначе.&]
[s3; &]
[s4; &]
[s5;%- friend_T`&_operator<<`=[@(64) (T`&_][@3 dest][@(64) , ][@(0.0.255) const][@(64) _T`&_][@3 s
rc][@(64) )]&]
[s2; Оператор опциональной глубокой копии 
(ОГК). Определён с помощью шаблона 
DeepCopyOptionTemplate.&]
[s6; У T требуется оператор глубокой копии.или 
оператор ОГК.&]
[s7; [*C@3 v]-|Исходный Vector.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:ValueType`:`:typedef:%- [@(0.0.255) typedef]_T_[* ValueType]&]
[s2; Определение типа T для использования 
в шаблонных алгоритмах.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Iterator`:`:typedef:%- [@(0.0.255) typedef]_T_`*[* Iterator]&]
[s2; Тип итератора. Итератор гарантированно 
будет типа T`*.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:ConstIterator`:`:typedef:%- [@(0.0.255) typedef]_[@(0.0.255) const]_T_`*[* C
onstIterator]&]
[s2; Тип константного итератора. Итератор 
гарантированно будет типа const T`*.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Begin`(`)const:%- [_^Vector`:`:ConstIterator^ ConstIterator]_[* Begin]()_[@(0.0.255) c
onst]&]
[s2; Возвращает константный итератор 
к первому элементу в Vector`'е.&]
[s7; [*/ Возвратное значение]-|Итератор.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:End`(`)const:%- [_^Vector`:`:ConstIterator^ ConstIterator]_[* End]()_[@(0.0.255) c
onst]&]
[s2; Возвращает константный итератор 
в позицию, сразу после последнего 
элемента, в Vector`'е.&]
[s7; [*/ Возвратное значение]-|Итератор.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:GetIter`(int`)const:%- [_^Vector`:`:ConstIterator^ ConstIterator]_[* GetIt
er]([@(0.0.255) int]_[*@3 i])_[@(0.0.255) const]&]
[s2; Возвращает константный итератор 
к элементу в указанной позиции. То 
же, что и [* Begin() `+ i]. Benefit of this methods is that 
in debug mode [* pos] is range checked.&]
[s7; [*C@3 i]-|Требуемая позиция.&]
[s7; [*/ Возвратное значение]-|Итератор.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:Begin`(`):%- [_^Vector`:`:Iterator^ Iterator]_[* Begin]()&]
[s2; Возвращает неконстантный итератор 
к первому элементу в Vector`'е.&]
[s7; [*/ Возвратное значение]-|Итератор.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:End`(`):%- [_^Vector`:`:Iterator^ Iterator]_[* End]()&]
[s2; Возвращает неконстантный итератор 
в позицию, сразу после последнего 
элемента, в Vector`'е.&]
[s7; [*/ Возвратное значение]-|Итератор.&]
[s3;%- &]
[s4;%- &]
[s5;:Vector`:`:GetIter`(int`):%- [_^Vector`:`:Iterator^ Iterator]_[* GetIter]([@(0.0.255) i
nt]_[*@3 i])&]
[s2; Возвращает неконстантный итератор 
к элементу в указанной позиции. То 
же, что и [* Begin() `+ pos]. Benefit of this methods is 
that in debug mode [* pos] is range checked.&]
[s7; [*C@3 i]-|Требуемая позиция.&]
[s7; [*/ Возвратное значение]-|Итератор.&]
[s3;%- &]
[s4;%- &]
[s5;:`:`:Vector`:`:Swap`(`:`:Vector`&`,`:`:Vector`&`):%- [@(0.0.255) friend]_[@(0.0.255) v
oid]_[* Swap]([_^`:`:Vector^ Vector][@(0.0.255) `&]_[*@3 a], [_^`:`:Vector^ Vector][@(0.0.255) `&
]_[*@3 b])&]
[s2; Специализация генерного [* Swap] для 
Vector`'а. Обменивает Vector`'ы простой константной
 операцией.&]
[s7; [*C@3 a]-|Первый обмениваемый Vector.&]
[s7; [*C@3 b]-|Второй обмениваемый Vector.&]
[s3; &]
[s0; ]]