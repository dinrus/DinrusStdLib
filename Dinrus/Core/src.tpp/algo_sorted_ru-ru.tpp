topic "Шаблонные Алгоритмы для Отсортированных Наборов";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,2#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_}%RU-RU 
[ {{10000@(113.42.0) [s0; [*@7;4 Шаблонные Алгоритмы для Отсортированных
 Наборов]]}}&]
[s5;@(0.0.255)%- &]
[s5;:AppendSorted`(C`&`,const C`&`,const L`&`):%- [@(0.0.255) template]_<[@(0.0.255) clas
s]_[*@4 C], [@(0.0.255) class]_[*@4 L][@(0.0.255) >]_[*@4 C][@(0.0.255) `&]_[* AppendSorted]([*@4 C
][@(0.0.255) `&]_[*@3 dest], [@(0.0.255) const]_[*@4 C][@(0.0.255) `&]_[*@3 src], 
[@(0.0.255) const]_[*@4 L][@(0.0.255) `&]_[*@3 less])&]
[s2; `"Маржирует`" исходный контейнер NTL 
в контейнер`-приёмник. Оба контейнера 
должны быть отсортированы в восходящем 
порядке. После операции контейнер`-приёмник 
сотрируется в восходящем порядке 
и содержит значения из обеих контейнеров. 
Значения`-дубликаты сохраняются. 
Предикат упорядочивания определяется 
[* less].&]
[s7; [*C@4 C]-|Тип контейнера.&]
[s7; [*C@3 dest]-|Контейнер`-приёмник.&]
[s7; [*C@3 src]-|Контейнер`-источник.&]
[s7; [*C@3 less]-|Предикат упорядочивания.&]
[s7; [*/ Возвратное значение]-|Контейнер`-приёмник.[C t
emplate<class ][*C@4 C][C >]&]
[s3;%- &]
[s4;%- &]
[s5;:AppendSorted`(C`&`,const C`&`):%- [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 C][@(0.0.255) >
]_[*@4 C][@(0.0.255) `&]_[* AppendSorted]([*@4 C][@(0.0.255) `&]_[*@3 dest], 
[@(0.0.255) const]_[*@4 C][@(0.0.255) `&]_[*@3 src])&]
[s2;~~~.992; `"Маржирует`" исходный NTL`-контейнер 
в контейнер`-приёмник. Оба контейнера 
должны быть отсортированы в восходящем 
порядке. После операции контейнер`-приёмник 
сотрируется в восходящем порядке 
и содержит значения из обеих контейнеров. 
Значения`-дубликаты сохраняются. 
Предикат упорядочивания определяется 
[*/ operator<].&]
[s7; [*C@4 C]-|Тип контейнера.&]
[s7; [*C@3 dest]-|Контейнер`-приёмник.&]
[s7; [*C@3 src]-|Контейнер`-источник.&]
[s7; [*/ Возвратное значение]-|Контейнер`-приёмник.[C t
emplate<class ][*C@4 C][C >]&]
[s3;%- &]
[s4;%- &]
[s5;:UnionSorted`(C`&`,const C`&`,const L`&`):%- [@(0.0.255) template]_<[@(0.0.255) class
]_[*@4 C], [@(0.0.255) class]_[*@4 L][@(0.0.255) >]_[*@4 C][@(0.0.255) `&]_[* UnionSorted]([*@4 C
][@(0.0.255) `&]_[*@3 dest], [@(0.0.255) const]_[*@4 C][@(0.0.255) `&]_[*@3 src], 
[@(0.0.255) const]_[*@4 L][@(0.0.255) `&]_[*@3 less])&]
[s2; `"Маржирует`" исходный NTL`-контейнер 
в контейнер`-приёмник. Оба контейнера 
должны быть отсортированы в восходящем 
порядке, а значения уникальными. После 
операции контейнер`-приёмник сотрируется 
в восходящем порядке и содержит уникальные 
значения из обеих контейнеров. Упорядочиван
ие определяется [* less].&]
[s7; [*C@4 C]-|Тип контейнера.&]
[s7; [*C@3 dest]-|Контейнер`-приёмник.&]
[s7; [*C@3 src]-|Контейнер`-источник.&]
[s7; [*C@3 less]-|Предикат упорядочивания.&]
[s7; [*/ Возвратное значение]-|Контейнер`-приёмник.&]
[s3;%- &]
[s4;%- &]
[s5;:UnionSorted`(C`&`,const C`&`):%- [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 C][@(0.0.255) >
]_[*@4 C][@(0.0.255) `&]_[* UnionSorted]([*@4 C][@(0.0.255) `&]_[*@3 dest], 
[@(0.0.255) const]_[*@4 C][@(0.0.255) `&]_[*@3 src])&]
[s2; `"Маржирует`" исходный NTL`-контейнер 
в контейнер`-приёмник. Оба контейнера 
должны быть отсортированы в восходящем 
порядке, а значения уникальными. После 
операции контейнер`-приёмник сотрируется 
в восходящем порядке и содержит уникальные 
значения из обеих контейнеров. Упорядочиван
ие определяется [*/ operator<].&]
[s7; [*C@4 C]-|Тип контейнера.&]
[s7; [*C@3 dest]-|Контейнер`-приёмник.&]
[s7; [*C@3 src]-|Контейнер`-источник.&]
[s7; [*/ Возвратное значение]-|Контейнер`-приёмник.&]
[s3;%- &]
[s4;%- &]
[s5;:RemoveSorted`(C`&`,const C`&`,const L`&`):%- [@(0.0.255) template]_<[@(0.0.255) clas
s]_[*@4 C], [@(0.0.255) class]_[*@4 L][@(0.0.255) >]_[*@4 C][@(0.0.255) `&]_[* RemoveSorted]([*@4 C
][@(0.0.255) `&]_[*@3 from], [@(0.0.255) const]_[*@4 C][@(0.0.255) `&]_[*@3 what], 
[@(0.0.255) const]_[*@4 L][@(0.0.255) `&]_[*@3 less])&]
[s2; Удаляет элементы исходного контейнера 
из контейнера`-приёмника. Оба контейнера 
должны быть отсортированы в восходящем 
порядке, а значения `- уникальными. 
Упорядочивание определяется [* less].&]
[s7; [*C@4 C]-|Тип контейнера.&]
[s7; [*C@3 from]-|Контейнер`-приёмник.&]
[s7; [*C@3 what]-|Контейнер`-источник.&]
[s7; [*C@3 less]-|Предикат упорядочивания.&]
[s2; [*/ Возвратное значение           ]Контейнер`-приём
ник.&]
[s2; &]
[s4;%- &]
[s5;:RemoveSorted`(C`&`,const C`&`):%- [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 C][@(0.0.255) >
]_[*@4 C][@(0.0.255) `&]_[* RemoveSorted]([*@4 C][@(0.0.255) `&]_[*@3 from], 
[@(0.0.255) const]_[*@4 C][@(0.0.255) `&]_[*@3 what])&]
[s2; Удаляет элементы исходного контейнера 
из контейнера`-приёмника. Оба контейнера 
должны быть отсортированы в восходящем 
порядке, а значения `- уникальными. 
Упорядочивание определяется [*/ operator<].&]
[s7; [*C@4 C]-|Тип контейнера.&]
[s7; [*C@3 from]-|Контейнер`-приёмник.&]
[s7; [*C@3 what]-|Контейнер`-источник.&]
[s7; [*/ Возвратное значение]-|Контейнер`-приёмник.&]
[s3;%- &]
[s4;%- &]
[s5;:IntersectSorted`(D`&`,const S`&`,const L`&`):%- [@(0.0.255) template]_<[@(0.0.255) c
lass]_[*@4 D], [@(0.0.255) class]_[*@4 S], [@(0.0.255) class]_[*@4 L][@(0.0.255) >]_[*@4 D][@(0.0.255) `&
]_[* IntersectSorted]([*@4 D][@(0.0.255) `&]_[*@3 dest], [@(0.0.255) const]_[*@4 S][@(0.0.255) `&
]_[*@3 src], [@(0.0.255) const]_[*@4 L][@(0.0.255) `&]_[*@3 less])&]
[s2; Удаляет элементы из контейнера`-приёмника, 
которых нет в исходном контейнере. 
Оба контейнера должны быть отсортированы 
в восходящем порядке, а значения `- 
уникальными. Упорядочивание определяется 
[* less].&]
[s7; [*C@4 D]-|Тип контейнера`-приёмника.&]
[s7; [*C@4 S]-|Тип контейнера`-источника.&]
[s7; [*C@3 dest]-|Контейнер`-приёмник.&]
[s7; [*C@3 src]-|Контейнер`-источник.&]
[s7; [*C@3 less]-|Предикат упорядочивания.&]
[s3;%- &]
[s4;%- &]
[s5;:IntersectSorted`(D`&`,const S`&`):%- [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 D],
 [@(0.0.255) class]_[*@4 S][@(0.0.255) >]_[*@4 D][@(0.0.255) `&]_[* IntersectSorted]([*@4 D][@(0.0.255) `&
]_[*@3 dest], [@(0.0.255) const]_[*@4 S][@(0.0.255) `&]_[*@3 src])&]
[s2; Удаляет элементы из контейнера`-приёмника, 
которых нет в исходном контейнере. 
Оба контейнера должны быть отсортированы 
в восходящем порядке, а значения `- 
уникальными. Упорядочивание определяется 
[*/ оператором <].&]
[s7; [*C@4 D]-|Тип контейнера`-приёмника.&]
[s7; [*C@4 S]-|Тип контейнера`-источника.&]
[s7; [*C@3 dest]-|Контейнер`-приёмник.&]
[s7; [*C@3 src]-|Контейнер`-источник.&]
[s7; [*/ Возвратное значение]-|Контейнер`-приёмник.&]
[s0; ]]