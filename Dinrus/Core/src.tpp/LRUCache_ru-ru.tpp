topic "Класс LRUCache";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,2#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_} 
[ {{10000@(113.42.0) [s0;%RU-RU [*@7;4 Класс LRUCache]]}}&]
[s1;@(0.0.255)3 &]
[s1;:noref: [@(0.0.255)3 template][3 _<][@(0.0.255)3 class][3 _][*@4;3 T][3 , 
][@(0.0.255)3 class][3 _][*@4;3 K][3 _`=_String>]&]
[s1;:LRUCache`:`:class: [@(0.0.255) class]_[* LRUCache]&]
[s2;%RU-RU Этот класс упрощает реализацию 
типа кэша LRU (least recently used). Кэш отслеживает 
размер содержимых в нём данных и предоставля
ет метод Shrink, уменьшающий этот размер 
до требуемого значения, первыми удаляя 
давно использованные элементы. LRUCache 
также предоставляет два счётчика 
размера, GetFoundSize и GetNewSize, которые могут 
использоваться для дальнейшего совершенств
ования кэша.&]
[s2;%RU-RU GetFoundSize в основном сообщает, сколько 
данных использовано повторно со времени 
последнего сброса счётчика. GetNewSize 
сообщает, сколько данных нужно добавилось 
с последнего сброса. GetSize() `- GetFoundSize() 
`- GetNewSize() даёт количество данных, которое 
не использовалось за этот период 
времени.&]
[s3; &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Подкласс Maker]]}}&]
[s3; &]
[s5; [@(0.0.255) struct]_[* Maker]&]
[s2;%RU-RU Эта структура предоставляет виртуальный
 базовый класс для определённого 
LRUCache, чтобы создавать требуемые данные, 
если в кэше они недоступны. Код`-клиент 
производится от Maker, добавляя необходимые 
вводные параметры; Maker далее предоставляет 
ключ для клиентского набора параметров 
и Make, чтобы создать данные на основе 
параметров.&]
[s3; &]
[s4; &]
[s5;:LRUCache`:`:Maker`:`:Key`(`)const: [@(0.0.255) virtual] [*@4 K]_[* Key]()_[@(0.0.255) co
nst]_`=_[@3 0]&]
[s2;%RU-RU Возвращает ключ на основе параметров.&]
[s3; &]
[s4; &]
[s5;:LRUCache`:`:Maker`:`:Make`(T`&`)const: [@(0.0.255) virtual] [@(0.0.255) int]_[* Make](
[*@4 T][@(0.0.255) `&]_[*@3 object])_[@(0.0.255) const]_`=_[@3 0]&]
[s2;%RU-RU Создаёт данные на основе параметров, 
возвращает размер созданных данных 
в байтах.&]
[s3;%RU-RU &]
[s4; &]
[s5;:LRUCache`:`:Maker`:`:`~Maker`(`): [@(0.0.255) `~][* Maker]()&]
[s2;%RU-RU Виртуальный деструктор.&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Список Публичных Методов]]}}&]
[s3; &]
[s5;:LRUCache`:`:GetSize`(`)const: [@(0.0.255) int]_[* GetSize]()_[@(0.0.255) const]&]
[s2;%RU-RU Возвращает общее число данных 
в кэше (как сумму чисел, возвращённых 
Maker`::Make). Заметьте, что LRUCache также добавляет 
и оценивает своё внутреннее потребление 
памяти поэлементно.&]
[s3;%RU-RU &]
[s4; &]
[s5;:LRUCache`:`:GetCount`(`)const: [@(0.0.255) int]_[* GetCount]()_[@(0.0.255) const]&]
[s2;%RU-RU Возвращает число элементов данных 
в кэше.&]
[s3; &]
[s4; &]
[s5;:LRUCache`:`:AdjustSize`(P`): [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 P]>_[@(0.0.255) v
oid]_[* AdjustSize]([*@4 P]_[*@3 getsize])&]
[s2;%RU-RU Перевычисляет общий размер данных 
в кэше, используя функционал [%-*@3 getsize] 
(у которого должен быть единственный 
параметр const [%-*@4 T][%-@(0.0.255) `&]) для получения 
размера индивидуальных элементов 
данных. Когда [%-*@3 getsize] возвращает отрицательн
ое значение, применяется старый, уже 
известный, размер элементов, иначе 
он переписывается новым значением.&]
[s3;%RU-RU &]
[s4; &]
[s5;:LRUCache`:`:GetLRU`(`): [*@4 T][@(0.0.255) `&]_[* GetLRU]()&]
[s2;%RU-RU Возвращает ссылку на самый давно 
используемый элемент данных в кэше 
(кандидат на удаление).&]
[s3; &]
[s4; &]
[s5;:Upp`:`:LRUCache`:`:GetLRUKey`(`): [@(0.0.255) const]_[*@4 K][@(0.0.255) `&]_[* GetLRUKey
]()&]
[s2;%RU-RU Возвращает ключ самого давно 
использованного элемента данных 
в кэше (кандидата на удаление).&]
[s3; &]
[s4; &]
[s5;:LRUCache`:`:DropLRU`(`): [@(0.0.255) void]_[* DropLRU]()&]
[s2;%RU-RU Удаляет самый давно использованный 
элемент из кэша.&]
[s3; &]
[s4; &]
[s5;:LRUCache`:`:Shrink`(int`,int`): [@(0.0.255) void]_[* Shrink]([@(0.0.255) int]_[*@3 maxsi
ze], [@(0.0.255) int]_[*@3 maxcount]_`=_[@3 30000])&]
[s2;%RU-RU Уменьшает кэш, чтобы в нём было 
не более [%-*@3 maxsize] данных и [%-*@3 maxcount] 
элементов, первыми удаляются наиболее 
давно использованные.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:LRUCache`:`:ShrinkCount`(int`): [@(0.0.255) void]_[* ShrinkCount]([@(0.0.255) i
nt]_[*@3 maxcount]_`=_[@3 30000])&]
[s2;%RU-RU Уменьшает кэш до [%-*@3 maxcount], не принимая 
во внимание размера данных.&]
[s3;%RU-RU &]
[s4; &]
[s5;:LRUCache`:`:Remove`(P`): [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 P]>_[@(0.0.255) i
nt]_[* Remove]([*@4 P]_[*@3 predicate])&]
[s2;%RU-RU Удаляет элементы данных из кэша, 
для которых [%-*@3 predicate] (у которого должен 
быть единственный параметр const [%-*@4 T][%-@(0.0.255) `&]) 
возвращает true. Возвращает число удалённых 
элементов.&]
[s3;%RU-RU &]
[s4; &]
[s5;:LRUCache`:`:RemoveOne`(P`): [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 P]>_[@(0.0.255) b
ool]_[* RemoveOne]([*@4 P]_[*@3 predicate])&]
[s2;%RU-RU Удаляет первый элемент данных 
из кэша, для которого [%-*@3 predicate] у которого 
должен быть единственный параметр 
const [%-*@4 T][%-@(0.0.255) `&]) возвращает true, сканируя 
кэш от недавно используемых до давно 
использованных элементов. Возвращает 
true, если элемент был найден и удалён.&]
[s3;%RU-RU &]
[s4; &]
[s5;:LRUCache`:`:Get`(const LRUCache`:`:Maker`&`): [*@4 T][@(0.0.255) `&]_[* Get]([@(0.0.255) c
onst]_[_^LRUCache`:`:Maker^ Maker][@(0.0.255) `&]_[*@3 m])&]
[s2;%RU-RU Получает данные из кэша или создаёт 
их, если нужно, [%-*@3 m].&]
[s3;%RU-RU &]
[s4; &]
[s5;:LRUCache`:`:Clear`(`): [@(0.0.255) void]_[* Clear]()&]
[s2;%RU-RU Очищает все данные в кэше.&]
[s3; &]
[s4; &]
[s5;:LRUCache`:`:ClearCounters`(`): [@(0.0.255) void]_[* ClearCounters]()&]
[s2;%RU-RU Очищает значения обеих счётчиков 
размера.&]
[s3; &]
[s4; &]
[s5;:LRUCache`:`:GetFoundSize`(`)const: [@(0.0.255) int]_[* GetFoundSize]()_[@(0.0.255) con
st]&]
[s2;%RU-RU Возвращает размер данных в кэше, 
которые повторно использовались 
с момента последнего вызова ClearCounters 
(или конструктора, если такого вызова 
не было).&]
[s3; &]
[s4; &]
[s5;:LRUCache`:`:GetNewSize`(`)const: [@(0.0.255) int]_[* GetNewSize]()_[@(0.0.255) const]&]
[s2;%RU-RU Возвращает размер данных, которые 
были созданы с последнего вызова 
ClearCounters (или конструктора, если такого 
вызова не было).&]
[s3; &]
[s0;%RU-RU ]]