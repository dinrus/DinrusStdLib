topic "Семантика трансфера";
[l288;i704;a17;O9;~~~.992;2 $$1,0#10431211400427159095818037425705:param]
[a83;*R6 $$2,5#31310162474203024125188417583966:caption]
[b83;*2 $$3,5#07864147445237544204411237157677:title]
[b167;a42;C2 $$4,6#40027414424643823182269349404212:item]
[b42;a42;2 $$5,5#45413000475342174754091244180557:text]
[l288;a17;2 $$6,6#27521748481378242620020725143825:desc]
[l321;t246;C@5;1 $$7,7#20902679421464641399138805415013:code]
[b2503;2 $$8,0#65142375456100023862071332075487:separator]
[*@(0.0.255)2 $$9,0#83433469410354161042741608181528:base]
[t4167;C2 $$10,0#37138531426314131251341829483380:class]
[l288;a17;*1 $$11,11#70004532496200323422659154056402:requirement]
[i417;b42;a42;O9;~~~.416;2 $$12,12#10566046415157235020018451313112:tparam]
[b167;C2 $$13,13#92430459443460461911108080531343:item1]
[i288;a42;O9;C2 $$14,14#77422149456609303542238260500223:item2]
[*@2$(0.128.128)2 $$15,15#34511555403152284025741354420178:NewsDate]
[l321;*C$7;2 $$16,16#03451589433145915344929335295360:result]
[l321;b83;a83;*C$7;2 $$17,17#07531550463529505371228428965313:result`-line]
[l160;t4167;*C+117 $$18,5#88603949442205825958800053222425:package`-title]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_}%RU-RU 
[s2; [@3 Семантика трансфера]&]
[s3; Явный pick/clone&]
[s5; Контейнерам U`+`+ требуется режим трансфера 
(глубокая копия или перемещение) , 
чтобы быть явно определёнными при 
трансфере контента контейнера (исключение 
составляет временное значение, которое 
может пик`-присваиваться без явного 
пика). У этого решения есть преимущество, 
что не используется замысловатая 
семантика глубокого копирования, 
в то время как в реальности перемещение 
необходимо в большинстве случаев.&]
[s7; Vector<int> a, b;&]
[s7; a `= pick(b); // перемещает контент b в a, 
b зачищается&]
[s7; b `= clone(a); // a и b теперь содержат одинаковые 
данные&]
[s5; &]
[s3; Композиция&]
[s5; Когда у класса есть члены с пик`-семантикой, 
это избавляет от массы `- имеющей наплоность 
к порождению ошибок `-  работы, когда 
компилятор способен генерировать 
для этого класса pick constructor/operator`= . 
C`+`+11 вполне способен на это, но его 
нужно явно активировать дефолтными 
членами:&]
[s7; Foo(Foo`&`&) `= default;&]
[s7; Foo`& operator`=(Foo`&`&) `= default;&]
[s5; Тем временем, C`+`+03 это нужно и он это 
не распознаёт. Чтобы сделать жизнь 
легче, мы определям макрос rval`_default, 
который упрощает и умягчает эти различия&]
[s7; rval`_default(Foo)&]
[s3; Опциональный deep copy `- clone, униформный 
доступ к to deep copy&]
[s5; Чтобы поддерживать клонирование, 
в классе нужно определить особый 
конструктор в форме&]
[s7; T(const T`&, int)&]
[s5; и он должен происходить от класса 
DeepCopyOption<T>, предоставляющего поддержку 
статического/динамического конструирования
 экземпляров.&]
[s3; Изменение дефолтной семантики&]
[s5; Если по какой`-то причине требуется 
версия [/ опционного] типа глубокой 
копии с [/ дефолтной] глубокой копией, 
можно легко создать её с помощью шаблона 
[* WithDeepCopy]&]
[s7; IntArray a `= MakeArray(100);&]
[s7; WithDeepCopy<IntArray> b(a); // b теперь имеет семантику 
глубокой копии&]
[s7; a`[3`] `= 10; //legal&]
[s7; b `= a; // deep copy&]
[s7; a `= pick(b); // pick&]
[s7; b`[4`] `= 1; // illegal&]
[s0; ]]