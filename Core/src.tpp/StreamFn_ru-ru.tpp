topic "Поточные утилиты";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,0#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_} 
[ {{10000@(113.42.0) [s0;%RU-RU [*@2;4 Поточные утилиты]]}}&]
[s0;%RU-RU &]
[ {{10000t/25b/25@1 [s0; [* Список Функций]]}}&]
[s3; &]
[s5;:LoadStream`(Stream`&`): [_^String^ String]_[* LoadStream]([_^Stream^ Stream][@(0.0.255) `&
]_[*@3 in])&]
[s2;%RU-RU Читает поток, начиная с текущей 
позиции, до достижения конца, и возвращает 
данные в String.&]
[s7;%RU-RU [%-*C@3 in]-|Поток.&]
[s7;%RU-RU [*/ Возвратное значение]-|Контент 
потока.&]
[s3; &]
[s4; &]
[s5;:SaveStream`(Stream`&`,const String`&`): [@(0.0.255) bool]_[* SaveStream]([_^Stream^ St
ream][@(0.0.255) `&]_[*@3 out], [@(0.0.255) const]_[_^String^ String][@(0.0.255) `&]_[*@3 dat
a])&]
[s2;%RU-RU Записывает данные в поток.&]
[s7;%RU-RU [%-*C@3 out]-|Выводной поток.&]
[s7;%RU-RU [%-*C@3 data]-|Записываемые данные.&]
[s7;%RU-RU [*/ Возвратное значение]-|True, если 
все данные удачно записаны в поток.&]
[s3; &]
[s4; &]
[s5;:CopyStream`(Stream`&`,Stream`&`,int64`): [_^int64^ int64]_[* CopyStream]([_^Stream^ St
ream][@(0.0.255) `&]_[*@3 dest], [_^Stream^ Stream][@(0.0.255) `&]_[*@3 src], 
[_^int64^ int64]_[*@3 count] `= INT64`_MAX)&]
[s2;%RU-RU Копирует максимум [%-*@3 count] байтов 
из потока`-источника в поток`-приёмник. 
Возвращает действительное число 
скопированных байтов. При дефолтном 
значении [%-*@3 count] копирует все данные 
из [%-*@3 src] до EOF (КФ, конца файла).&]
[s3; &]
[s4; &]
[s5;:Cout`(`): [_^Stream^ Stream][@(0.0.255) `&]_[* Cout]()&]
[s2;%RU-RU Возвращает особый выводной поток, 
представляющий вывод консоли. Данные, 
записанные в этот поток, отображаются 
символьно в консоли.&]
[s3; &]
[s4; &]
[s5;:Cerr`(`): [_^Stream^ Stream][@(0.0.255) `&]_[* Cerr]()&]
[s2;%RU-RU Возвращает особый выводной поток, 
представляющий вывод информации 
об ошибках из консоли. Данные, записанные 
в этот поток, отображаются символьно 
в консоли.&]
[s3; &]
[s4; &]
[s5;:ReadStdIn`(`): [_^String^ String]_[* ReadStdIn]()&]
[s2;%RU-RU Читает одну строчку вводных данных 
из консоли.&]
[s7;%RU-RU [*/ Возвратное значение]-|Консольный 
ввод.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:ReadSecret`(`): [_^Upp`:`:String^ String]_[* ReadSecret]()&]
[s2;%RU-RU Считывает одну строку вводных 
данных из консоли, не повторяя ее 
(без `"эхо`"). Эта функция используется 
для чтения паролей, секретных фраз, 
и проч. из консоли.&]
[s7;%RU-RU [*/ Возвратное значение]-|Консольный 
ввод.&]
[s3; &]
[s4; &]
[s5;:NilStream`(`): [_^Stream^ Stream][@(0.0.255) `&]_[* NilStream]()&]
[s2;%RU-RU Возвращает особый поток, который 
находится всегда в состоянии IsEof и 
просто сбрасывает все данные, записанные 
в него.&]
[s7;%RU-RU [*/ Возвратное значение]-|Поток`"чёрная 
дыра`".&]
[s3; &]
[s4; &]
[s5;:LoadFile`(const char`*`): [_^String^ String]_[* LoadFile]([@(0.0.255) const]_[@(0.0.255) c
har]_`*[*@3 filename])&]
[s2;%RU-RU Загружает контент указанного 
файла.&]
[s7;%RU-RU [%-*C@3 filename]-|Имя файла.&]
[s7;%RU-RU [*/ Возвратное значение]-|Контент 
файла.&]
[s3; &]
[s4; &]
[s5;:SaveFile`(const char`*`,const String`&`): [@(0.0.255) bool]_[* SaveFile]([@(0.0.255) c
onst]_[@(0.0.255) char]_`*[*@3 filename], [@(0.0.255) const]_[_^String^ String][@(0.0.255) `&
]_[*@3 data])&]
[s2;%RU-RU Сохраняет данные в файл (переписывает 
существующий).&]
[s7;%RU-RU [%-*C@3 filename]-|Имя файла.&]
[s7;%RU-RU [%-*C@3 data]-|Записываемые данные.&]
[s7;%RU-RU [*/ Возвратное значение]-|true, если 
файл записан успешно.&]
[s3; &]
[s4; &]
[s5;:operator`%`(Stream`&`,T`&`): [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 T][@(0.0.255) >
]_[_^Stream^ Stream][@(0.0.255) `&]_[* operator%]([_^Stream^ Stream][@(0.0.255) `&]_[*@3 s], 
[*@4 T][@(0.0.255) `&]_[*@3 x])&]
[s2;%RU-RU Оператор сериализации. Просто 
вызывает x.Serialize(s);&]
[s7;%RU-RU [*C@4 T]-|Тип сериализуемой переменной.&]
[s7;%RU-RU [%-*C@3 s]-|Поток.&]
[s7;%RU-RU [%-*C@3 x]-|Сериализуемая переменная.&]
[s7;%RU-RU [*/ Возвратное значение]-|s для сцепки.&]
[s3; &]
[s4; &]
[s5;:operator`<`<`(Stream`&`,const char`*`): [_^Stream^ Stream][@(0.0.255) `&]_[* operator<
<]([_^Stream^ Stream][@(0.0.255) `&]_[*@3 s], [@(0.0.255) const]_[@(0.0.255) char]_`*[*@3 x])
&]
[s2;%RU-RU Перегрузка оператора вставки 
в поток. Оператор вставки использует 
форматированный поточный вывод (Putf).&]
[s7;%RU-RU [%-*C@3 s]-|Поток вывода.&]
[s7;%RU-RU [%-*C@3 x]-|Записываемые данные `- все 
символы записываются в поток.&]
[s7;%RU-RU [*/ Возвратное значение]-|s для сцепки.&]
[s3; &]
[s4; &]
[s5;:operator`<`<`(Stream`&`,char`*`): [_^Stream^ Stream][@(0.0.255) `&]_[* operator<<]([_^Stream^ S
tream][@(0.0.255) `&]_[*@3 s], [@(0.0.255) char]_`*[*@3 x])&]
[s2;%RU-RU Перегрузка оператора вставки 
в поток. Оператор вставки использует 
форматированный поточный вывод (Putf).&]
[s7;%RU-RU [%-*C@3 s]-|Поток вывода.&]
[s7;%RU-RU [%-*C@3 x]-|Записываемые данные `- все 
символы записываются в поток.&]
[s7;%RU-RU [*/ Возвратное значение]-|s для сцепки.&]
[s3; &]
[s4; &]
[s5;:operator`<`<`(Stream`&`,const String`&`): [_^Stream^ Stream][@(0.0.255) `&]_[* operato
r<<]([_^Stream^ Stream][@(0.0.255) `&]_[*@3 s], [@(0.0.255) const]_[_^String^ String]_`&[*@3 x
])&]
[s2;%RU-RU Перегрузка оператора вставки 
в поток. Оператор вставки использует 
форматированный поточный вывод (Putf).&]
[s7;%RU-RU [%-*C@3 s]-|Поток вывода.&]
[s7;%RU-RU [%-*C@3 x]-|Записываемые данные `- все 
символы записываются в поток.&]
[s7;%RU-RU [*/ Возвратное значение]-|s для сцепки.&]
[s3; &]
[s4; &]
[s5;:operator`<`<`(Stream`&`,char`): [_^Stream^ Stream][@(0.0.255) `&]_[* operator<<]([_^Stream^ S
tream][@(0.0.255) `&]_[*@3 s], [@(0.0.255) char]_[*@3 x])&]
[s2;%RU-RU Перегрузка оператора вставки 
в поток. Оператор вставки использует 
форматированный поточный вывод (Putf).&]
[s7;%RU-RU [%-*C@3 s]-|Поток вывода.&]
[s7;%RU-RU [%-*C@3 x]-|Записываемые данные `- все 
символы записываются в поток.&]
[s7;%RU-RU [*/ Возвратное значение]-|s для сцепки.&]
[s3; &]
[s4; &]
[s5;:operator`<`<`(Stream`&`,const void`*`): [_^Stream^ Stream][@(0.0.255) `&]_[* operator<
<]([_^Stream^ Stream][@(0.0.255) `&]_[*@3 s], [@(0.0.255) const]_[@(0.0.255) void]_`*[*@3 x])
&]
[s2;%RU-RU Перегрузка оператора вставки 
в поток. Оператор вставки использует 
форматированный поточный вывод (Putf).&]
[s7;%RU-RU [%-*C@3 s]-|Поток вывода.&]
[s7;%RU-RU [%-*C@3 x]-|Записываемые данные `- все 
символы записываются в поток.&]
[s7;%RU-RU [*/ Возвратное значение]-|s для сцепки.&]
[s3; &]
[s4; &]
[s5;:operator`<`<`(Stream`&`,void`*`): [_^Stream^ Stream][@(0.0.255) `&]_[* operator<<]([_^Stream^ S
tream][@(0.0.255) `&]_[*@3 s], [@(0.0.255) void]_`*[*@3 x])&]
[s2;%RU-RU Перегрузка оператора вставки 
в поток. Оператор вставки использует 
форматированный поточный вывод (Putf).&]
[s7;%RU-RU [%-*C@3 s]-|Поток вывода.&]
[s7;%RU-RU [%-*C@3 x]-|Записываемые данные `- все 
символы записываются в поток.&]
[s7;%RU-RU [*/ Возвратное значение]-|s для сцепки.&]
[s3; &]
[s4; &]
[s5;:operator`<`<`(Stream`&`,const T`&`): [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 T][@(0.0.255) >
]_[_^Stream^ Stream][@(0.0.255) `&]_[* operator<<]([_^Stream^ Stream][@(0.0.255) `&]_[*@3 s],
 [@(0.0.255) const]_[*@4 T][@(0.0.255) `&]_[*@3 x])&]
[s2;%RU-RU Глобальный оператор вставки в 
поток. Вызывает AsString для x и сохраняет 
итог в поток. Глобальная версия AsString 
в свою очередь вызывает метод ToString 
у x.&]
[s7;%RU-RU [*C@4 T]-|Тип записываемых в поток данных.&]
[s7;%RU-RU [%-*C@3 s]-|Поток вывода.&]
[s7;%RU-RU [%-*C@3 x]-|Записываемые данные.&]
[s7;%RU-RU [*/ Возвратное значение]-|s для сцепки.&]
[s3;%RU-RU &]
[s0;%RU-RU ]]