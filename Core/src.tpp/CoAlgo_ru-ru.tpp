topic "Параллельные алгоритмы";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,2#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_} 
[ {{10000@(113.42.0) [s0;%RU-RU [*@7;4 Параллельные алгоритмы]]}}&]
[s3; &]
[s5;:Upp`:`:CoPartition`(Iter`,Iter`,const Lambda`&`,int`,int`): [@(0.0.255) template]_
<[@(0.0.255) class]_[*@4 Iter], [@(0.0.255) class]_[*@4 Lambda]>_[@(0.0.255) void]_[* CoParti
tion]([*@4 Iter]_[*@3 begin], [*@4 Iter]_[*@3 end], [@(0.0.255) const]_[*@4 Lambda][@(0.0.255) `&
]_[*@3 lambda], [@(0.0.255) int]_[*@3 min`_chunk]_`=_CO`_PARTITION`_MIN, 
[@(0.0.255) int]_[*@3 max`_chunk]_`=_CO`_PARTITION`_MAX)&]
[s5;:Upp`:`:CoPartition`(Range`&`&`,const Lambda`&`): [@(0.0.255) template]_<[@(0.0.255) c
lass]_[*@4 Range], [@(0.0.255) class]_[*@4 Lambda]>_[@(0.0.255) void]_[* CoPartition]([*@4 Ra
nge][@(0.0.255) `&`&]_[*@3 r], [@(0.0.255) const]_[*@4 Lambda][@(0.0.255) `&]_[*@3 lambda])&]
[s2;%RU-RU Делит диапазон Range (по возможность 
с определением пары [%-*@3 begin] / [%-*@3 end]) 
на несколько поддиапазонов, основываясь 
на числе ядер ЦПБ (CPU cores), и вызывает 
над ними параллельно [%-*@3 lambda]. [%-*@3 begin] 
/ [%-*@3 end] вариант передаёт новую пару 
begin / end как параметры [%-*@3 lambda]; Range вариант 
передаёт SubRange. Параллельная обработка 
реализована посредством CoWork, то есть 
CoWork`::FinLock доступен в [%-*@3 lambda]. Если вводный 
диапазон имеет менее [%-*@3 min`_chunk] элементов, 
то операция выполняется в потоке 
callers (вызывающих). [%-*@3 max`_chunk] ограничивает 
размер поддиапазона, передаваемого 
в [%-*@3 lambda].&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:CoSum`(const Range`&`,const Upp`:`:ValueTypeOf`<Range`>`&`): [@(0.0.255) te
mplate]_<[@(0.0.255) class]_[*@4 Range]>_[_^Upp`:`:ValueTypeOf^ ValueTypeOf]<[*@4 Range]>
_[* CoSum]([@(0.0.255) const]_[*@4 Range][@(0.0.255) `&]_[*@3 r], [@(0.0.255) const]_[_^Upp`:`:ValueTypeOf^ V
alueTypeOf]<[*@4 Range]>`&_[*@3 zero])&]
[s2; [%RU-RU Возвращает сумму всех элементов 
в диапазоне ][*@3 r][%RU-RU , причём ][*@3 zero][%RU-RU  
представляет исходное нулевое значение. 
У ][*@4 T]_должно иметься определение 
operator`+`=. Выполняясь параллельно, operator`+`= 
должен иметь возможность повторного 
входа (т.е. быть reentrant).&]
[s3; &]
[s4; &]
[s5;:Upp`:`:CoSum`(const T`&`): [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 T]>_[_^Upp`:`:ValueTypeOf^ V
alueTypeOf]<[*@4 T]>_[* CoSum]([@(0.0.255) const]_[*@4 T][@(0.0.255) `&]_[*@3 c])&]
[s2;%RU-RU То же, что и CoSum(c, 0).&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:CoCount`(const Range`&`,const V`&`): [@(0.0.255) template]_<[@(0.0.255) class
]_[*@4 Range], [@(0.0.255) class]_[*@4 V]>_[@(0.0.255) int]_[* CoCount]([@(0.0.255) const]_[*@4 R
ange][@(0.0.255) `&]_[*@3 r], [@(0.0.255) const]_[*@4 V][@(0.0.255) `&]_[*@3 val])&]
[s2;%RU-RU Отсчитывает число элементов в 
Range [%-*@3 r,] которое равно [%-*@3 val]. Выполняется 
параллельно.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:CoCountIf`(const Range`&`,const Predicate`&`): [@(0.0.255) template]_<[@(0.0.255) c
lass]_[*@4 Range], [@(0.0.255) class]_[*@4 Predicate]>_[@(0.0.255) int]_[* CoCountIf]([@(0.0.255) c
onst]_[*@4 Range][@(0.0.255) `&]_[*@3 r], [@(0.0.255) const]_[*@4 Predicate][@(0.0.255) `&]_[*@3 p
])&]
[s2; [%RU-RU Отсчитывает число элементов в 
Range ][*@3 r][%RU-RU , которое удовлетворяет 
условию ][*@3 p][%RU-RU . Выполняется параллельно], 
[*@3 p ]должен быть реэнтрантным.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:CoFindBest`(const Range`&`,const Better`&`): [@(0.0.255) template]_<[@(0.0.255) c
lass]_[*@4 Range], [@(0.0.255) class]_[*@4 Better]>_[@(0.0.255) int]_[* CoFindBest]([@(0.0.255) c
onst]_[*@4 Range][@(0.0.255) `&]_[*@3 r], [@(0.0.255) const]_[*@4 Better][@(0.0.255) `&]_[*@3 b
etter])&]
[s2; [%RU-RU Находит наиболее подходящий элемент 
в диапазоне ][*@3 r][%RU-RU , как это задано 
посредством ][*@3 pred][%RU-RU . Например, если 
][*@3 pred][%RU-RU  является std`::less, находит минимум. 
Если ][*@3 r][%RU-RU  пустой, возвращает `-1. 
Выполняется параллельно], [*@3 better] должен 
быть реэнтрантным.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:CoFindMin`(const Range`&`): [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 Rang
e]>_[@(0.0.255) int]_[* CoFindMin]([@(0.0.255) const]_[*@4 Range][@(0.0.255) `&]_[*@3 r])&]
[s2; [%RU-RU Возвращает индекс минимального 
элемента в ][*@3 r][%RU-RU , использует std`::less 
для сравнения элементов. Если ][*@3 r][%RU-RU  
пустой, возвращает `-1. Выполняется 
параллельно], [%RU-RU std`::less] должен быть 
реэнтрантным.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:CoMin`(const Range`&`): [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 Range]>_
[@(0.0.255) const]_[_^Upp`:`:ValueTypeOf^ ValueTypeOf]<[*@4 Range]>`&_[* CoMin]([@(0.0.255) c
onst]_[*@4 Range][@(0.0.255) `&]_[*@3 r])&]
[s2; [%RU-RU Возвращает ][%RU-RU/ значение][%RU-RU  минимальног
о элемента в ][*@3 r][%RU-RU , использует std`::less 
для сравнения элементов. Если ][*@3 r][%RU-RU  
пустой, поведение неопределено (ASSERT 
при отладке неуспешен). Выполняется 
параллельно], [%RU-RU std`::less] должен быть 
реэнтрантным.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:CoMin`(const Range`&`,const Upp`:`:ValueTypeOf`<Range`>`&`): [@(0.0.255) te
mplate]_<[@(0.0.255) class]_[*@4 Range]>_[@(0.0.255) const]_[_^Upp`:`:ValueTypeOf^ ValueT
ypeOf]<[*@4 Range]>`&_[* CoMin]([@(0.0.255) const]_[*@4 Range][@(0.0.255) `&]_[*@3 r], 
[@(0.0.255) const]_[_^Upp`:`:ValueTypeOf^ ValueTypeOf]<[*@4 Range]>`&_[*@3 def])&]
[s2; [%RU-RU Возвращает ][%RU-RU/ значение][%RU-RU  минимальног
о элемента в ][*@3 r][%RU-RU , использует std`::less 
для сравнения элементов. Если ][*@3 r][%RU-RU  
пустой, возвращает ][*@3 def][%RU-RU . Выполняется 
параллельно], [%RU-RU std`::less] должен быть 
реэнтрантным.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:CoFindMax`(const Range`&`): [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 Rang
e]>_[@(0.0.255) int]_[* CoFindMax]([@(0.0.255) const]_[*@4 Range][@(0.0.255) `&]_[*@3 r])&]
[s2; [%RU-RU Возвращает ][%RU-RU/ значение][%RU-RU  максимально
го элемента в ][*@3 r][%RU-RU , использует std`::greater 
для сравнения элементов. Если ][*@3 r][%RU-RU  
пустой, возвращает `-1. Выполняется 
параллельно], [%RU-RU std`::greater] должен быть 
реэнтрантным.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:CoMax`(const Range`&`): [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 Range]>_
[@(0.0.255) const]_[_^Upp`:`:ValueTypeOf^ ValueTypeOf]<[*@4 Range]>`&_[* CoMax]([@(0.0.255) c
onst]_[*@4 Range][@(0.0.255) `&]_[*@3 r])&]
[s2; [%RU-RU Возвращает  ][%RU-RU/ значение][%RU-RU  
максимального элемента в ][*@3 r][%RU-RU , 
использует std`::greater для сравнения элементов. 
Если ][*@3 r][%RU-RU  пустой, поведение неопределено 
(ASSERT fails in debug). Выполняется параллельно], 
[%RU-RU std`::greater] должен быть реэнтрантным.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:CoMax`(const Range`&`,const Upp`:`:ValueTypeOf`<Range`>`&`): [@(0.0.255) te
mplate]_<[@(0.0.255) class]_[*@4 Range]>_[@(0.0.255) const]_[_^Upp`:`:ValueTypeOf^ ValueT
ypeOf]<[*@4 Range]>`&_[* CoMax]([@(0.0.255) const]_[*@4 Range][@(0.0.255) `&]_[*@3 r], 
[@(0.0.255) const]_[_^Upp`:`:ValueTypeOf^ ValueTypeOf]<[*@4 Range]>`&_[*@3 def])&]
[s2; [%RU-RU Возвращает ][%RU-RU/ значение][%RU-RU  максимально
го элемента в ][*@3 r][%RU-RU , использует std`::less 
для сравнения элементов. Если ][*@3 r][%RU-RU  
пустой, возвращает ][*@3 def][%RU-RU . Выполняется 
параллельно], [%RU-RU std`::less ]должен быть 
реэнтрантным.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:CoFindMatch`(const Range`&`,const Match`&`,int`): [@(0.0.255) template]_<[@(0.0.255) c
lass]_[*@4 Range], [@(0.0.255) class]_[*@4 Match]>_[@(0.0.255) int]_[* CoFindMatch]([@(0.0.255) c
onst]_[*@4 Range][@(0.0.255) `&]_[*@3 r], [@(0.0.255) const]_[*@4 Match][@(0.0.255) `&]_[*@3 eq
], [@(0.0.255) int]_[*@3 from]_`=_[@3 0])&]
[s2; [%RU-RU Возвращает индекс первого элемента, 
для которого предикат ][*@3 match][%RU-RU  верен. 
Если не найден, возвращает `-1. Поиск 
начинается с индекса ][*@3 from][%RU-RU . Выполняется 
параллельно], [*@3 eq] должен быть реэнтрантным.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:CoFindIndex`(const Range`&`,const V`&`,int`): [@(0.0.255) template]_<[@(0.0.255) c
lass]_[*@4 Range], [@(0.0.255) class]_[*@4 V]>_[@(0.0.255) int]_[* CoFindIndex]([@(0.0.255) c
onst]_[*@4 Range][@(0.0.255) `&]_[*@3 r], [@(0.0.255) const]_[*@4 V][@(0.0.255) `&]_[*@3 value],
 [@(0.0.255) int]_[*@3 from]_`=_[@3 0])&]
[s2; [%RU-RU Возвращает индекс первого элемента, 
равного ][*@3 value][%RU-RU .Если не найден, возвращает 
`-1. Поиск начинается с индекса ][*@3 from][%RU-RU . 
Выполняется параллельно], operator`=`= 
должен быть реэнтрантным.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:CoIsEqualRange`(const Range1`&`,const Range2`&`): [@(0.0.255) template]_<[@(0.0.255) c
lass]_[*@4 Range1], [@(0.0.255) class]_[*@4 Range2]>_[@(0.0.255) int]_[* CoIsEqualRange]([@(0.0.255) c
onst]_[*@4 Range1][@(0.0.255) `&]_[*@3 r1], [@(0.0.255) const]_[*@4 Range2][@(0.0.255) `&]_[*@3 r
2])&]
[s2; [%RU-RU Возвращает true, если ][*@3 a][%RU-RU  и ][*@3 b][%RU-RU  
равны. operator`=`= используется для сравнения 
элементов. Диапазоны считаются равными, 
если в них одинаковое число элементов 
и для каждого элемента по индексу 
][%RU-RU/ i: ][*@3 a][%RU-RU `[i`] `=`= ][*@3 b][%RU-RU `[i`]. Выполняется 
параллельно], operator`=`= должен быть реэнтрантны
м.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:CoFindAll`(const Range`&`,Predicate`,int`): [@(0.0.255) template]_<[@(0.0.255) c
lass]_[*@4 Range], [@(0.0.255) class]_[*@4 Predicate]>_[_^Upp`:`:Vector^ Vector]<[@(0.0.255) i
nt]>_[* CoFindAll]([@(0.0.255) const]_[*@4 Range][@(0.0.255) `&]_[*@3 r], 
[*@4 Predicate]_[*@3 match], [@(0.0.255) int]_[*@3 from]_`=_[@3 0])&]
[s2; [%RU-RU Возвращает Vector индексов ][%RU-RU/ ВСЕХ][%RU-RU  
элементов, для которых ][*@3 match][%RU-RU  верен. 
Возвращённый Vector сортируется в восходящем 
порядке. Поиск начинается с индекса 
][*@3 from][%RU-RU . Выполняется параллельно], 
[*@3 match ]должен быть реэнтрантным.&]
[s3;%RU-RU ]]