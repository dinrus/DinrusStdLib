topic "Класс Bits";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,2#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_} 
[ {{10000@(113.42.0) [s0;%RU-RU [*@7;4 Класс Bits]]}}&]
[s0;%RU-RU &]
[s1;:Bits`:`:class: [@(0.0.255)3 class][3 _][*3 Bits][3 _:_][@(0.0.255)3 private][3 _][*@3;3 Moveabl
e][3 <][*3 Bits][3 >_]&]
[s2;%RU-RU Bits `- это простой класс`-контейнер, 
представляющий `"неограниченный`" 
массив из булевых значений, реализованный 
с использованием двоичных массивов, 
упаковкой размещённого пространства 
памяти по 8 бит на байт (плюс некоторый 
аллокационный резерв). Это движимый 
тип (moveable) с семантикой pick`-трансфера.&]
[s3; &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Список Публичных Методов]]}}&]
[s3; &]
[s5;:Bits`:`:Clear`(`): [@(0.0.255) void]_[* Clear]()&]
[s2;%RU-RU Устанавливает все булы в неверно 
(false).&]
[s3; &]
[s4; &]
[s5;:Bits`:`:Set`(int`,bool`): [@(0.0.255) void]_[* Set]([@(0.0.255) int]_[*@3 i], 
[@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true])&]
[s2;%RU-RU Устанавливает бит в [%-*@3 b] .&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:Bits`:`:Get`(int`)const: [@(0.0.255) bool]_[* Get]([@(0.0.255) int]_[*@3 i])_[@(0.0.255) c
onst]&]
[s5;:Bits`:`:operator`[`]`(int`)const: [@(0.0.255) bool]_[* operator`[`]]([@(0.0.255) int]_
[*@3 i])_[@(0.0.255) const]&]
[s2;%RU-RU Возвращает булево значение [%-*@3 i].&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:Bits`:`:Set`(int`,Upp`:`:dword`,int`): [@(0.0.255) void]_[* Set]([@(0.0.255) in
t]_[*@3 i], [_^Upp`:`:dword^ dword]_[*@3 bits], [@(0.0.255) int]_[*@3 count])&]
[s2;%RU-RU Устанавливает число бит [%-*@3 count] 
[%-*@3 bits] ([%-*@3 bits ]LSB первый), начиная с [%-*@3 i].&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:Bits`:`:Get`(int`,int`): [_^Upp`:`:dword^ dword]_[* Get]([@(0.0.255) int]_[*@3 i],
 [@(0.0.255) int]_[*@3 count])&]
[s2;%RU-RU Возвращает набор из [%-*@3 count ] битов 
(самое большее 32), начиная с [%-*@3 i], как 
двоичное число. Первый бит возвращается 
как LSB (менее значимый бит, т.е. МЗБ)&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:Bits`:`:Set64`(int`,Upp`:`:uint64`,int`): [@(0.0.255) void]_[* Set64]([@(0.0.255) i
nt]_[*@3 i], [_^Upp`:`:uint64^ uint64]_[*@3 bits], [@(0.0.255) int]_[*@3 count])&]
[s2;%RU-RU Устанавливает счёт бит [%-*@3 count] 
[%-*@3 bits] ([%-*@3 bits ]LSB первый), начиная с [%-*@3 i].&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:Bits`:`:Get64`(int`,int`): [_^Upp`:`:uint64^ uint64]_[* Get64]([@(0.0.255) int]_
[*@3 i], [@(0.0.255) int]_[*@3 count])&]
[s2;%RU-RU Возвращает набор из [%-*@3 count ]битов 
(самое большее 64), начиная с [%-*@3 i], как 
двоичное число. Первый бит возвращается 
как LSB (менее значимый бит, т.е. МЗБ).&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:Bits`:`:SetN`(int`,bool`,int`): [@(0.0.255) void]_[* SetN]([@(0.0.255) int]_[*@3 i
], [@(0.0.255) bool]_[*@3 b], [@(0.0.255) int]_[*@3 count])&]
[s2;%RU-RU Устанавливает [%-*@3 count] битов, начиная 
от [%-*@3 i], в [%-*@3 b].&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:Bits`:`:SetN`(int`,int`): [@(0.0.255) void]_[* SetN]([@(0.0.255) int]_[*@3 i], 
[@(0.0.255) int]_[*@3 count])&]
[s2;%RU-RU Устанавливает [%-*@3 count] битов, начиная 
от [%-*@3 i], в true.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:Bits`:`:Reserve`(int`): [@(0.0.255) void]_[* Reserve]([@(0.0.255) int]_[*@3 nbits
])&]
[s2;%RU-RU Преаллоцирует внутреннее хранилище 
для [%-*@3 nbits] битов, во избежание дальнейшей 
реаллокации во время Set (пока используются 
только nbits).&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:Bits`:`:Shrink`(`): [@(0.0.255) void]_[* Shrink]()&]
[s2;%RU-RU Пытается уменьшить внутреннее 
хранилище.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Bits`:`:CreateRaw`(int`): [_^Upp`:`:dword^ dword]_`*[* CreateRaw]([@(0.0.255) i
nt]_[*@3 n`_dwords])&]
[s2;%RU-RU Создаёт новое внутреннее хранилище 
для [%-*@3 n`_dwords] dword`'ов (sizeof(dword) `* [%-*@3 n`_dwords] 
битов) и возвращает указатель на него. 
Bits исчисляются от LSB, клиентский код 
должен отвечать за эндианность (endiannes).&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:Bits`:`:Raw`(int`&`)const: [@(0.0.255) const]_[_^Upp`:`:dword^ dword]_`*[* Raw](
[@(0.0.255) int`&]_[*@3 n`_dwords])_[@(0.0.255) const]&]
[s5;:Upp`:`:Bits`:`:Raw`(int`&`): [_^Upp`:`:dword^ dword]_`*[* Raw]([@(0.0.255) int`&]_[*@3 n
`_dwords])&]
[s2;%RU-RU Возвращает указатель на внутреннее 
хранилище и его размер. Bits исчисляются 
от LSB, клиентский код должен отвечать 
за эндианность (endiannes).&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:Bits`:`:Serialize`(Upp`:`:Stream`&`): [@(0.0.255) void]_[* Serialize]([_^Upp`:`:Stream^ S
tream][@(0.0.255) `&]_[*@3 s])&]
[s2;%RU-RU Сериализует Bits. Serialize разрешает 
вероятную проблему с эндианностью.&]
[s3;%RU-RU &]
[s0;%RU-RU ]]