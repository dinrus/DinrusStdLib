topic "Класс XmlParser";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,2#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_} 
[ {{10000@(113.42.0) [s0;%RU-RU [*@7;4 Класс XmlParser]]}}&]
[s3; &]
[s1;:XmlParser`:`:class: [@(0.0.255)3 class][3 _][*3 XmlParser]&]
[s9;%RU-RU Этот класс содержит `'лексический`' 
парсер XML. Он предназначен для реализации 
кастомных парсеров XML.&]
[s3; &]
[s0;i448;a25;kKO9;@(0.0.255) &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Список Публичных Методов]]}}&]
[s3; &]
[s5;:XmlParser`:`:SkipWhites`(`): [@(0.0.255) void]_[* SkipWhites]()&]
[s2;%RU-RU Пропускает любые пробелы в вводном 
XML.&]
[s3; &]
[s4; &]
[s5;:XmlParser`:`:RegisterEntity`(const String`&`,const String`&`): [@(0.0.255) void]_[* R
egisterEntity]([@(0.0.255) const]_[_^String^ String][@(0.0.255) `&]_[*@3 id], 
[@(0.0.255) const]_[_^String^ String][@(0.0.255) `&]_[*@3 text])&]
[s2;%RU-RU Регистрирует новую сущность XML 
[%-*@3 id] со значением [%-*@3 text].&]
[s3;%RU-RU &]
[s4; &]
[s5;:XmlParser`:`:IsEof`(`): [@(0.0.255) bool]_[* IsEof]()&]
[s2;%RU-RU Возвращает true, если парсер достиг 
края текста.&]
[s3; &]
[s4; &]
[s5;:XmlParser`:`:GetPtr`(`)const: [@(0.0.255) const]_[@(0.0.255) char]_`*[* GetPtr]()_[@(0.0.255) c
onst]&]
[s2;%RU-RU Возвращает указатель на позицию 
в тексте, достигнутую парсером.&]
[s3; &]
[s4; &]
[s5;:XmlParser`:`:IsTag`(`): [@(0.0.255) bool]_[* IsTag]()&]
[s2;%RU-RU Возвращает true, если парсер находится 
на старт`-тэге XML.&]
[s3; &]
[s4; &]
[s5;:XmlParser`:`:PeekTag`(`): [_^String^ String]_[* PeekTag]()&]
[s2;%RU-RU Возвращает идентификатор следующего 
тэга, но не перемещает позиции. Если 
парсер находится не на старт`-тэге, 
выводится XmlError.&]
[s3; &]
[s4; &]
[s5;:XmlParser`:`:ReadTag`(`): [_^String^ String]_[* ReadTag]()&]
[s2;%RU-RU Возвращает идентификатор старт`-тэга 
XML  и перемещает позицию. Если парсер 
находится не на старт`-тэге, выводится 
XmlError.&]
[s3; &]
[s4; &]
[s5;:XmlParser`:`:Tag`(const String`&`): [@(0.0.255) bool]_[* Tag]([@(0.0.255) const]_[_^String^ S
tring][@(0.0.255) `&]_[*@3 tag])&]
[s5;:XmlParser`:`:Tag`(const char`*`): [@(0.0.255) bool]_[* Tag]([@(0.0.255) const]_[@(0.0.255) c
har]_`*[*@3 tag])&]
[s2;%RU-RU Если парсер находится на старт`-тэге 
XML [%-*@3 tag], перемещает позицию и возвращает 
true, иначе возвращает false.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:PassTag`(const String`&`): [@(0.0.255) void]_[* PassTag]([@(0.0.255) cons
t]_[_^String^ String][@(0.0.255) `&]_[*@3 tag])&]
[s5;:XmlParser`:`:PassTag`(const char`*`): [@(0.0.255) void]_[* PassTag]([@(0.0.255) const]_
[@(0.0.255) char]_`*[*@3 tag])&]
[s2;%RU-RU Если парсер находится на старт`-тэге 
XML [%-*@3 tag], пеермещает позицию, иначе 
выводит исключение XmlError.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:IsEnd`(`): [@(0.0.255) bool]_[* IsEnd]()&]
[s2;%RU-RU Возвращает true, если парсер находится 
на соответствующем конечном тэге. 
При наличии непарных тэгов вызывается 
XmlError, если парсер не в расслабленном 
режиме relaxed.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:End`(`): [@(0.0.255) bool]_[* End]()&]
[s2; Возвращает true, если [%RU-RU парсер находится 
на соответствующем конечном тэге, 
и продвигает позицию. При наличии 
непарных тэгов вызывается XmlError, если 
парсер не в расслабленном режиме, 
при наличии непарных тэгов выводит] 
XmlError.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:PassEnd`(`): [@(0.0.255) void]_[* PassEnd]()&]
[s2;%RU-RU Если парсер находится на соответствующе
м конечном тэге, продвигает позицию, 
иначе выводит XmlError.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:TagE`(const char`*`): [@(0.0.255) bool]_[* TagE]([@(0.0.255) const]_[@(0.0.255) c
har]_`*[*@3 tag])&]
[s2;%RU-RU Вызывает Tag([%-*@3 tag]) `- если получает 
от него true, тотчас вызывает PassTag. Другими 
словами, сверяет элемент с пустым 
контентом.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:PassTagE`(const char`*`): [@(0.0.255) void]_[* PassTagE]([@(0.0.255) cons
t]_[@(0.0.255) char]_`*[*@3 tag])&]
[s2;%RU-RU Вызывает PassTag([%-*@3 tag]), а затем PassEnd(). 
Другими словами, требует продвижения 
над элементом с пустым контентом.&]
[s3;%RU-RU &]
[s4; &]
[s5;:XmlParser`:`:TagElseSkip`(const char`*`): [@(0.0.255) bool]_[* TagElseSkip]([@(0.0.255) c
onst]_[@(0.0.255) char]_`*[*@3 tag])&]
[s2;%RU-RU Если вызов Tag([%-*@3 tag]).удачен, возвращает 
true. Иначе вызывает Skip и возвращает 
false. Это сокращение сравнительно распростран
ённого конструкта: [*C if(Tag(][%-*C@3 tag][*C )) `{ 
... `} else Skip()][* ;]&]
[s3;%RU-RU &]
[s4; &]
[s5;:XmlParser`:`:LoopTag`(const char`*`): [@(0.0.255) bool]_[* LoopTag]([@(0.0.255) const]_
[@(0.0.255) char]_`*[*@3 tag])&]
[s2;%RU-RU Если вызов End возвращает true, возвращает 
false. Если вызов Tag([%-*@3 tag]) возвращает 
true, возвращает true. Иначе вызывает 
Skip и повторяется. Приминяется когда 
нужен только один тип субтэга текущего 
уровня, напр.: [*C while(LoopTag(`"foo`")) `{ ... `}] 
эквивалент общего конструкта:  [*C while(!End()) 
if(Tag(][%-*C@3 tag][*C )) `{ ... `} else Skip();]&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:GetAttrCount`(`)const: [@(0.0.255) int]_[* GetAttrCount]()_[@(0.0.255) co
nst]&]
[s2;%RU-RU Возвращает число итрибутов у 
последнего старт`-тэга.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:GetAttr`(int`)const: [_^String^ String]_[* GetAttr]([@(0.0.255) int]_[*@3 i
])_[@(0.0.255) const]&]
[s2;%RU-RU Возвращает имя атрибута [%-*@3 i ]последнего 
старт`-тэга.&]
[s3;%RU-RU &]
[s4; &]
[s5;:XmlParser`:`:IsAttr`(const char`*`)const: [@(0.0.255) bool]_[* IsAttr]([@(0.0.255) con
st]_[@(0.0.255) char]_`*[*@3 id])_[@(0.0.255) const]&]
[s2;%RU-RU Возвращает true, если [%-*@3 id] `- атрибут 
последнего старт`-тэга.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:operator`[`]`(int`)const: [_^String^ String]_[* operator`[`]]([@(0.0.255) i
nt]_[*@3 i])_[@(0.0.255) const]&]
[s2;%RU-RU Возвращает значение атрибута 
[%-*@3 i ]последнего старт`-тэга.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:operator`[`]`(const char`*`)const: [_^String^ String]_[* operator`[`]](
[@(0.0.255) const]_[@(0.0.255) char]_`*[*@3 id])_[@(0.0.255) const]&]
[s2;%RU-RU Возвращает значение атримута 
с именем [%-*@3 id] последнего старт`-тэга. 
Если такого атрибута не существует, 
возвращает пустую String (Null).&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:Int`(const char`*`,int`)const: [@(0.0.255) int]_[* Int]([@(0.0.255) const
]_[@(0.0.255) char]_`*[*@3 id], [@(0.0.255) int]_[*@3 def]_`=_Null)_[@(0.0.255) const]&]
[s2;%RU-RU Возвращает значение атрибута, 
преобразованное в целое число,с именем 
[%-*@3 id] последнего старт`-тэга. Если 
такого атрибута не существует или 
текст атрибута нельзя преобразовать 
в целое число, возвращает [%-*@3 def].&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:Double`(const char`*`,double`)const: [@(0.0.255) double]_[* Double]([@(0.0.255) c
onst]_[@(0.0.255) char]_`*[*@3 id], [@(0.0.255) double]_[*@3 def]_`=_Null)_[@(0.0.255) cons
t]&]
[s2;%RU-RU Возвращает значение атрибута, 
преобразованное в число с плавающей 
запятой, с именем [%-*@3 id] последнего 
старт`-тэга. Если такого атрибута 
не существует или текст атрибута 
нельзя преобразовать, возвращает 
[%-*@3 def].&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:IsText`(`): [@(0.0.255) bool]_[* IsText]()&]
[s2;%RU-RU Возвращает true, если парсер находится 
на текстовом контенте элемента.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:ReadText`(`): [_^String^ String]_[* ReadText]()&]
[s2;%RU-RU Считывает единичный текстовый 
контент. Если в контексте имеются 
элементы, парсер останавливается 
на них. Напр., если парсер находится 
у `"just a <b>test</b> foo`", этот метод вернёт 
`"just a `". Если текста нет, вернет пустой 
String.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:ReadTextE`(`): [_^String^ String]_[* ReadTextE]()&]
[s2;%RU-RU Считывает весь текстовый контент 
до конечного тэга. Если в контексте 
есть элементы, парсер пропускает 
их. Напр., если он находится у `"just a 
<b>test</b> foo`", то будет возвращено `"just 
a foo`". Если текста нет, вернёт пустой 
String.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:IsDecl`(`): [@(0.0.255) bool]_[* IsDecl]()&]
[s2;%RU-RU Возвращает true, если парсер находится 
у декларации XML.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:ReadDecl`(`): [_^String^ String]_[* ReadDecl]()&]
[s2;%RU-RU Считывает декларацию XML `- выводит 
XmlError, если парсер не у декларации.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:IsPI`(`): [@(0.0.255) bool]_[* IsPI]()&]
[s2;%RU-RU Возвращает true, если парсер находится 
у информации об обработке XML.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:ReadPI`(`): [_^String^ String]_[* ReadPI]()&]
[s2;%RU-RU Считывает обработку XML `-выводит 
XmlError, если парсер не возле неё.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:IsComment`(`): [@(0.0.255) bool]_[* IsComment]()&]
[s2;%RU-RU Возвращает true, если парсер находится 
у комментария XML.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:ReadComment`(`): [_^String^ String]_[* ReadComment]()&]
[s2;%RU-RU Читает комментарий XML `- выбрасывает 
XmlError, если парсер не у комментария.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:Skip`(`): [@(0.0.255) void]_[* Skip]()&]
[s2;%RU-RU Пропускает текущий символ. Если 
символ является старт`-тэгом, пропускает 
все , пока не появится соответствующий 
конечный тэг.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:SkipEnd`(`): [@(0.0.255) void]_[* SkipEnd]()&]
[s2;%RU-RU Пропускает всё, что после конечного 
тэга, соответствующего последнему 
старт`-тэгу парсера.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:PickAttrs`(`)pick`_: [_^VectorMap^ VectorMap]<[_^String^ String], 
[_^String^ String]>_[* PickAttrs]()_[@(0.128.128) pick`_]&]
[s2;%RU-RU Пикует все атрибуты последнего 
пройденного старт`-тэга. После этого 
вызова нельзя вызывать никаких методов, 
относящихся к атрибутам (включая 
этот), пока не будет обрабатываться 
очередной старт`-тэг.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:GetLine`(`)const: [@(0.0.255) int]_[* GetLine]()_[@(0.0.255) const]&]
[s2;%RU-RU Возвращает текущую строку вводного 
текста.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:GetColumn`(`)const: [@(0.0.255) int]_[* GetColumn]()_[@(0.0.255) const]&]
[s2;%RU-RU Возвращает текущую колонку вводного 
текста.&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:XmlParser`:`:Relaxed`(bool`): [@(0.0.255) void]_[* Relaxed]([@(0.0.255) bool]_[*@3 b])&]
[s2;%RU-RU Активирует расслабленный режим. 
В нём XmlParser игнорирует несовпадения 
стартовых и конечных тэгов. Неизвестные 
сущности заменяются символом `'`&`'. 
Этот режим вводится для работы с повреждённы
ми файлами XML.&]
[s3;%RU-RU &]
[s4; &]
[s5;:XmlParser`:`:Raw`(bool`): [@(0.0.255) void]_[* Raw]([@(0.0.255) bool]_[*@3 b])&]
[s2;%RU-RU Активирует сырой режим. В нём 
вся логика, относящаяся к стартовым 
и конечным тэгам, полностью подавляется. 
Этот режим введён для работы с HTML.&]
[s0; &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Детали Конструктора]]}}&]
[s3;%RU-RU &]
[s5;:XmlParser`:`:XmlParser`(const char`*`): [* XmlParser]([@(0.0.255) const]_[@(0.0.255) c
har]_`*[*@3 s])&]
[s2;%RU-RU Создаёт парсер для вводного текста 
xml [%-*@3 s]. Указываемый текст должен быть 
полноценным в течении всего процесса 
парсинга (XmlParser не делает копии текста).&]
[s3; &]
[s4; &]
[s5;:XmlParser`:`:XmlParser`(Stream`&`): [* XmlParser]([_^Stream^ Stream][@(0.0.255) `&]_[*@3 i
n])&]
[s2;%RU-RU Создаёт парсер для вводного потока 
[%-*@3 in].&]
[s3;%RU-RU &]
[s0; ]]