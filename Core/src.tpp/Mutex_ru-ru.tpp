topic "Класс Mutex";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,0#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_} 
[ {{10000@(113.42.0) [s0;%RU-RU [*@7;4 Класс Mutex (Стопор)]]}}&]
[s3; &]
[s1;:Mutex`:`:class: [@(0.0.255)3 class][3 _][*3 Mutex][3 _:_][@(0.0.255)3 private][3 _][*@3;3 NoCop
y]&]
[s9;%RU-RU Этот хорошо известный примитив 
синхронизации обычно используется 
для сериализации доступа к разделяемым 
данным или другим совместным ресурсам. 
Только единственный поток может выполнять 
код между вызовами Enter и Leave. Если любой 
другой поток пытается Enter (войти в) 
защищённую секцию, в то время как 
в ней работает другой, он блокируется, 
до тех пор, пока выполняющий поток 
не укажет на то, что он покинул эту 
секцию, вызвав Leave. Mutex реэнтрантен, 
т.е. в него можно входить повторно 
(один и тот же поток может Enter этот 
Mutex неоднократно).&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Список Публичных Методов]]}}&]
[s3; &]
[s5;:Mutex`:`:Enter`(`): [@(0.0.255) void]_[* Enter]()&]
[s2;%RU-RU Войти в защищённый регион кода. 
В этот регион может войти только один 
поток, другие потоки блокируются 
до того, как будет вызван Leave.&]
[s3; &]
[s4; &]
[s5;:Mutex`:`:TryEnter`(`): [@(0.0.255) bool]_[* TryEnter]()&]
[s2;%RU-RU Пытается войти в защищённый регион 
кода. Если им владеет другой поток, 
возвращает [*/ false], иначе получает владение 
стопором Mutex и возвращает [*/ true]. Никогда 
не блокируется.&]
[s3; &]
[s4; &]
[s5;:Mutex`:`:Leave`(`): [@(0.0.255) void]_[* Leave]()&]
[s2;%RU-RU Покидает защищённый регион кода. 
Только то же поток,, что вызвал Enter, 
может вызывать Leave.&]
[s0; &]
[ {{10000@(113.42.0) [s0;%RU-RU [*@7;4 Класс StaticMutex]]}}&]
[s3; &]
[s1;:StaticMutex`:`:class: [@(0.0.255)3 class][3 _][*3 StaticMutex]&]
[s9;%RU-RU Вариант Mutex, который может использоватьс
я как статическая или глобальная 
переменная, без необходимости в инициализац
ии `- у него нет конструктора и первая 
инициализация выполняется корректно, 
когда вызывается любой из методов. 
Этим убираются проблемы с порядком 
инициализации или с многопоточной 
инициализацией.&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Список Публичных Методов]]}}&]
[s3; &]
[s5;:StaticMutex`:`:Get`(`): [_^Mutex^ Mutex][@(0.0.255) `&]_[* Get]()&]
[s5;:StaticMutex`:`:operator Mutex`&`(`): [* operator_Mutex`&]()&]
[s2;%RU-RU Возвращает инициализированный 
экземпляр Mutex.&]
[s3; &]
[s4; &]
[s5;:StaticMutex`:`:TryEnter`(`): [@(0.0.255) bool]_[* TryEnter]()&]
[s5;:StaticMutex`:`:Enter`(`): [@(0.0.255) void]_[* Enter]()&]
[s5;:StaticMutex`:`:Leave`(`): [@(0.0.255) void]_[* Leave]()&]
[s2;%RU-RU Вызывает соответствующие методы 
экземпляра Mutex.&]
[s0; &]
[ {{10000t/25b/25@(113.42.0) [s0; [*@7;4 Класс Mutex`::Lock]]}}&]
[s3; &]
[s1;:Mutex`:`:Lock`:`:class: [@(0.0.255)3 class][3 _][*3 Mutex`::Lock]&]
[s9;%RU-RU Этот гнездовой класс автоматизирует 
вызовы Mutex`::Enter / Mutex`::Leave для блока кода, 
используя правила конструктора/деструктора
 C`+`+. Посредством [* operator StaticMutex`::Mutex], 
его также можно использовать с StaticMutex.&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Детали Конструктора / Деструктора]]}}&]
[s3; &]
[s5;:Mutex`:`:Lock`:`:Lock`(Mutex`&`): [* Lock]([_^Mutex^ Mutex][@(0.0.255) `&]_[*@3 s])&]
[s2;%RU-RU Выполняет [%-*@3 s].Enter().&]
[s3;%RU-RU &]
[s4; &]
[s5;:Mutex`:`:Lock`:`:`~Lock`(`): [@(0.0.255) `~][* Lock]()&]
[s2; [%RU-RU Выполняет ][*@3 s].Leave(), где [*@3 s] `- параметр 
конструктора.&]
[s3; &]
[s0; ]]