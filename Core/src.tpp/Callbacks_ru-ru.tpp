topic "Обратные вызовы";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,2#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_}%RU-RU 
[ {{10000@(113.42.0) [s0; [*@7;4 Обратные вызовы]]}}&]
[s9; [*/^topic`:`/`/Core`/src`/Function`_en`-us^ Обратные вызовы 
(Callbacks) теперь деприкированы. Вместо 
них  Function/Event/Gate!]&]
[s9; Обратные вызовы можно определить 
как весьма генерализованную форму 
указателей на функцию.Каждый Callback 
представляет своего рода действие 
(обычно, вызывая определённую функцию 
или метод объекта) , которое можно 
вызвать в любое время.&]
[s9; Если вы неплохо ладите с использованием 
C`+`+11, можно также присвоить лямбду 
C`+`+ Callback`'у с помощью оператора << (смотрите 
ниже).&]
[s9; Имеется несколько базовых (основных) 
типов обратных вызовов, зависящих 
от числа передаваемых параметров 
и возвратного значения. В целях `"укорочения`"
 описания обратных вызовов (обрвызов), 
все эти типы описываются в едином 
`"параметрированном`" описании, с [*/@(128.0.255) подс
веткой параметров].&]
[s9; В целом, обрвызы на данный момент 
определены для функций, имеющих до 
5 параметров цели (функция, метод, 
другой обрвыз).&]
[s0; &]
[s0; Типы обрвызов:&]
[s3; &]
[ {{1514:5185:1933:1368h1;t/17b/17@(204) [s0;=%- [*/@(128.0.255) Тип обрвыза]]
:: [s0;=%- [*/@(128.0.255) Параметры]]
:: [s0;=%- [*/@(128.0.255) Аргументы]]
:: [s0;=%- [*/@(128.0.255) Тип возврата]]
::@2 [s0;:Callback`:`:class:%- [*C+75 Callback]]
:: [s0;%- [*/C@(0.0.255)+75 отсутствуют]]
:: [s0;%- [*/C@(0.0.255)+75 отсутствуют]]
:: [s0;%- [*/C+75 void]]
:: [s0;:Callback1`:`:class:%- [*C+75 Callback1]]
:: [s0;%- [*/C+75 класс P1]]
:: [s0;%- [*/C+75 P1]]
:: [s0;%- [*/C+75 void]]
:: [s0;:Callback2`:`:class: [*C+75 Callback2]]
:: [s0; [%-*/C+75 класс ][*/C+75 P1, ][%-*/C+75 класс ][*/C+75 P2]]
:: [s0; [*/C+75 P1, P2]]
:: [s0; [*/C+75 void]]
:: [s0;:Callback3`:`:class: [*C+75 Callback3]]
:: [s0; [%-*/C+75 класс ][*/C+75 P1, ][%-*/C+75 класс ][*/C+75 P2, 
][%-*/C+75 класс ][*/C+75 P3]]
:: [s0; [*/C+75 P1, P2, P3]]
:: [s0; [*/C+75 void]]
:: [s0;:Callback4`:`:class: [*C+75 Callback4]]
:: [s0; [%-*/C+75 класс ][*/C+75 P1, ][%-*/C+75 класс ][*/C+75 P2, 
][%-*/C+75 класс ][*/C+75 P3, ][%-*/C+75 класс ][*/C+75 P4]]
:: [s0; [*/C+75 P1, P2, P3, P4]]
:: [s0; [*/C+75 void]]
:: [s0;:Callback5`:`:class: [*C+75 Callback5]]
:: [s0; [%-*/C+75 класс ][*/C+75 P1, ... , ][%-*/C+75 класс ][*/C+75 P5]]
:: [s0; [*/C+75 P1, ... , P5]]
:: [s0; [*/C+75 void]]
:: [s0;:Gate`:`:class: [*C+75 Gate]]
:: [s0;%- [*/C@(0.0.255)+75 отсутствуют]]
:: [s0;%- [*/C@(0.0.255)+75 отсутствуют]]
:: [s0; [*/C+75 bool]]
:: [s0;:Gate1`:`:class: [*C+75 Gate1]]
:: [s0; [%-*/C+75 класс ][*/C+75 P1]]
:: [s0; [*/C+75 P1]]
:: [s0; [*/C+75 bool]]
:: [s0;:Gate2`:`:class: [*C+75 Gate2]]
:: [s0; [%-*/C+75 класс ][*/C+75 P1, ][%-*/C+75 класс ][*/C+75 P2]]
:: [s0; [*/C+75 P1, P2]]
:: [s0; [*/C+75 bool]]
:: [s0;:Gate3`:`:class: [*C+75 Gate3]]
:: [s0; [%-*/C+75 класс ][*/C+75 P1, ][%-*/C+75 класс ][*/C+75 P2, 
][%-*/C+75 класс ][*/C+75 P3]]
:: [s0; [*/C+75 P1, P2, P3]]
:: [s0; [*/C+75 bool]]
:: [s0;:Gate4`:`:class: [*C+75 Gate4]]
:: [s0; [%-*/C+75 класс ][*/C+75 P1, ][%-*/C+75 класс ][*/C+75 P2, 
][%-*/C+75 класс ][*/C+75 P3, ][%-*/C+75 класс ][*/C+75 P4]]
:: [s0; [*/C+75 P1, P2, P3, P4]]
:: [s0; [*/C+75 bool]]
:: [s0;:Gate5`:`:class: [*C+75 Gate5]]
:: [s0; [%-*/C+75 класс ][*/C+75 P1, ... , ][%-*/C+75 класс ][*/C+75 P5]]
:: [s0; [*/C+75 P1, ... , P5]]
:: [s0; [*/C+75 bool]]}}&]
[s0; &]
[s0; `[ template_<[*/@(128.0.255) параметры]> `]&]
[s0; [%- class_][*/@(128.0.255) CallbackType]&]
[s2; &]
[s2; Тип обрвыза. Обрвызы `- это перемещаемые 
(moveable) типы, с быстрой глубокой копией 
(достигаемой использованием подсчёта 
ссылок).&]
[s2; &]
[s0; &]
[s0;%- explicit_[%RU-RU*/@(128.0.255) CallbackType]([%RU-RU*/@(128.0.255) CallbackType]Ac
tion<[%RU-RU*/@(128.0.255) аргументы>]_`*[*@3 newaction])&]
[s2; Конструирует обрвыз, основанный 
на новом действии.&]
[s7; [%-*C@3 newaction]-|Действие. Должно быть создано 
оператором [* new]. Обрвыз перенимает 
правообладание.&]
[s3; &]
[s0; &]
[s0;:Callback1`:`:Callback1`(`):%- [%RU-RU*/@(128.0.255) CallbackType]()&]
[s2; Создаёт пустой обрвыз.&]
[s3; &]
[s4; &]
[s0;:Callback1`:`:Callback1`(const Callback1`&`):%- [%RU-RU*/@(128.0.255) CallbackType](
const_[%RU-RU*/@(128.0.255) CallbackType]`&_[*@3 c])&]
[s2; Копи`-конструктор. &]
[s7; [%-*C@3 c]-|Исходный обрвыз.&]
[s3; &]
[s4; &]
[s0;:`:`:Callback1`:`:`~Callback1`(`):%- `~[%RU-RU*/@(128.0.255) CallbackType]()&]
[s2; Деструктор.&]
[s3; &]
[s4; &]
[s0;:`:`:Callback1`:`:Clear`(`):%- void_[* Clear]()&]
[s2; Опустошает обрвыз.&]
[s3; &]
[s4; &]
[s0;:`:`:Gate`:`:ClearTrue`(`):%- void_[* ClearTrue]()&]
[s6; Только в обрвызах Gate.&]
[s2; Очищает Gate. После вызова этого метода 
этот Gate не выполняет никаких действий, 
.но возвращает true.&]
[s3; &]
[s4; &]
[s0;:`:`:Gate`:`:ClearFalse`(`):%- void_[* ClearFalse]()&]
[s6; Только в обрвызах Gate.&]
[s2; Очищает Gate. После вызова этого метода 
этот Gate не выполяет никаких действий, 
.но возвращаетs false. Это то же, что и 
Clear.&]
[s3; &]
[s4; &]
[s0;:`:`:Callback1`:`:operator bool`(`)const:%- [* operator_bool]()_const&]
[s7; [*/ Возвратное значение]-|Верно, если 
обрвыз полноценен (в силе). Вызов полноценног
о обрвыза `- это вызов действия.&]
[s3; &]
[s4; &]
[s0;:`:`:Callback1`:`:Execute`(P1`)const:%- [*/@(128.0.255) return`_type]_[* Execute]([%RU-RU*/@(128.0.255) а
ргументы])_const&]
[s2; Выполняет обрвыз с данным набором 
аргументов.&]
[s3; &]
[s4; &]
[s0;:`:`:Callback1`:`:operator`(`)`(P1`)const:%- [%RU-RU*/@(128.0.255) return`_type]_[* o
perator()]([%RU-RU*/@(128.0.255) аргументы])_const&]
[s2; То же, что и метод Execute.&]
[s3; &]
[s0; &]
[s0;:Callback1Action`:`:struct:%- `[ template_<[*/@(128.0.255) параметры]> 
`]&]
[s0;%- struct_[*/@(128.0.255) CallbackType][* Action]&]
[s2; Это абстрактный класс`-основа для 
реализации действий обратных вызовов. 
Обрвыз содержит указатель, включённый 
в счётчик ссылок, чтобы создать экземпляр 
класса, производного от этого класса 
(this).&]
[s3; &]
[s0; &]
[s0;:Callback1Action`:`:Callback1Action`(`):%- [*/@(128.0.255) CallbackType][* Action]()&]
[s2; Конструктор. Присваивает значение 
1 счётчику ссылок.&]
[s3; &]
[s4; &]
[s0;:Callback1Action`:`:`~Callback1Action`(`):%- `~[*/@(128.0.255) CallbackType][* Action
]()&]
[s2; Виртуальный деструктор.&]
[s3; &]
[s4; &]
[s0;:Callback1Action`:`:Execute`(P1`):%- virtual [%RU-RU*/@(128.0.255) return`_type]_[* E
xecute]([%RU-RU*/@(128.0.255) аргументы])_`=_[@3 0]&]
[s2; Выполняет данное действие с заданным 
набором аргументов.&]
[s3; &]
[s4; &]
[s0;:Callback1Action`:`:IsValid`(`)const:%- virtual bool_[* IsValid]()_const&]
[s7; [*/ Возвратное значение]-|верно, если 
этот Action полноценен. Дефолтная реализация 
возвращает true.&]
[s3; &]
[s4; &]
[s0;:Callback1Action`:`:count:%- Atomic_[* count]&]
[s2; Переменная`-член, используемая как 
счётчик ссылок.&]
[s0;%- &]
[ {{10000@(113.42.0) [s0; [*@7;4 Общие функции Callback/Gate]]}}&]
[s3; &]
[s0;:`:`:callback`(OBJECT`*`,void`(METHOD`:`:`*`)`(P1 p1`)`): template_<class 
[*@4 OBJECT], class [*@4 METHOD][*@(128.0.255) ,][*@4  ][*/@(128.0.255) параметры]>
&]
[s0;%- [*/@(128.0.255) CallbackType]<[%RU-RU*/@(128.0.255) аргументы]> 
[* callback]([*@4 OBJECT]_`*[*@3 object], void_([*@4 METHOD]`::`*[*@3 method])([%RU-RU*/@(128.0.255) а
ргументы]))&]
[s2; Создаёт обрвыз, который вызывает 
указанный метод указанного объекта.&]
[s7; [%-*C@3 object]-|Указатель на объект.&]
[s7; [%-*C@3 method]-|Указатель на метод.&]
[s7; [*/ Возвратное значение]-|Созданный 
обрвыз.&]
[s3; &]
[s4; &]
[s0;:`:`:callback`(OBJECT`*`,void`(METHOD`:`:`*`)`(P1 p1`)`): template_<class 
[*@4 OBJECT], class [*@4 METHOD][*@(128.0.255) ,][*@4  ][*/@(128.0.255) параметры]>
&]
[s0;%- [*/@(128.0.255) CallbackType]<[%RU-RU*/@(128.0.255) аргументы]> 
[* callback](const [*@4 OBJECT]_`*[*@3 object], void_([*@4 METHOD]`::`*[*@3 method])([%RU-RU*/@(128.0.255) а
ргументы]) const)&]
[s2; Константный вариант обрвыза. Созданный 
объект Callback вызывает константный 
метод объекта.&]
[s7; [%-*C@3 oobject]-|Указатель на объект.&]
[s7; [%-*C@3 method]-|Указатель на константный 
вызываемый метод.&]
[s7; [*/ Возвратное значение]-|Созданный 
обрвыз.&]
[s3; &]
[s4; &]
[s0;:`:`:pteback`(OBJECT`*`,void`(METHOD`:`:`*`)`(P1 p1`)`): `[ template_<[*/@(128.0.255) п
араметры]> `]&]
[s0;%- [*/@(128.0.255) CallbackType][%RU-RU <][%RU-RU*/@(128.0.255) аргументы][%RU-RU >
 ][* pteback]([*@4 OBJECT]_`*[*@3 object], void_([*@4 METHOD]`::`*[*@3 method])([%RU-RU*/@(128.0.255) а
ргументы]))&]
[s2; Создаёт объект Callback, который подобен 
тому, что создаётся обрвызом, но который 
может безопасно вызываться даже после 
деструкции [@3 object`'а] (приводит к отсутствию 
операций).&]
[s7; [%-*C@3 object]-|Указатель на объект. Должен 
быть потомком класса [^topic`:`/`/Core`/src`/PtePtr`_ru`-ru`#Pte`:`:class^ P
te].&]
[s7; [%-*C@3 method]-|Указатель на метод.&]
[s7; [*/ Возвратное значение]-|Созданный 
обрвыз.&]
[s3; &]
[s4; &]
[s0;:`:`:callback`(void`(`*`)`(P1 p1`)`): `[ template_<[*/@(128.0.255) параметр
ы]> `]&]
[s0;%- [*/@(128.0.255) CallbackType][%RU-RU <][%RU-RU*/@(128.0.255) аргументы][%RU-RU >
 ][* callback](void_(`*[*@3 fn])([%RU-RU*/@(128.0.255) аргументы]))&]
[s2; Создаёт объектa Callback, вызывающий 
нечленскую функцию.&]
[s7; [%-*C@3 fn]-|Указатель на функцию.&]
[s7; [*/ Возвратное значение]-|Созданный 
обрвыз.&]
[s3; &]
[s4; &]
[s0;:Proxy`(Callback1`<P1`>`&`): `[ template_<[*/@(128.0.255) параметры]> 
`]&]
[s0;%- [*/@(128.0.255) CallbackType][%RU-RU <][%RU-RU*/@(128.0.255) аргументы][%RU-RU >
] [* Proxy]([*/@(128.0.255) CallbackType][%RU-RU <][%RU-RU*/@(128.0.255) аргумент
ы][%RU-RU >]`&_[*@3 cb])&]
[s2; Создаёт объект Callback, который вызывает 
другой объект Callback. Используется 
для `"рутинга`" обрвызов (callback routing) 
(Например, когда какой`-то родительский 
Ctrl намерен `"рерутить`" (to reroute) некоторые 
из своих обрвызов`-`"отпрысков`" посредством 
этого интерфейса). Заметьте, что эта 
функция сохраняет ссылку на целевой 
обрвыз в созданном обрвызе: сохранение 
обрвызов, которые используются как 
цели Proxy, в Vector flavor`'е контейнеров `- 
нехорошая идея!.&]
[s7; [%-*C@3 cb]-|Целевой обрвыз.&]
[s7; [*/ Возвратное значение]-|Созданный 
обрвыз.&]
[s3; &]
[s4; &]
[s0;:callback`(Callback1`<P1`>`,Callback1`<P1`>`): `[ template_<[*/@(128.0.255) пара
метры]> `]&]
[s0;%- [%RU-RU*/@(128.0.255) CallbackType][%RU-RU <][%RU-RU*/@(128.0.255) аргументы
][%RU-RU > ][* callback]([%RU-RU*/@(128.0.255) CallbackType][%RU-RU <][%RU-RU*/@(128.0.255) а
ргументы][%RU-RU > ]_[*@3 cb1], [%RU-RU*/@(128.0.255) CallbackType][%RU-RU <][%RU-RU*/@(128.0.255) а
ргументы][%RU-RU > ]_[*@3 cb2])&]
[s2; Создаёт объект Callback, вызывающий два 
других обрвыза. Заметьте, что эта 
функция сохраняет ссылку на целевые 
обрвызы в созданном обрвызе: сохранение 
обрвызов, которые используются здесь 
как цели, в Vector flavor`'е контейнеров 
`- нехорошая идея!. Для обрвызов Gate, 
в результате этой операции возвращается 
булево значение от [*@3 cb2].&]
[s7; [%-*C@3 cb1]-|Первый целевой обрвыз.&]
[s7; [%-*C@3 cb2]-|Второй целевой обрвыз.&]
[s7; [*/ Возвратное значение]-|Созданный 
обрвыз.&]
[s3; &]
[s4; &]
[s0;:operator`<`<`(Callback1`<P1`>`&`,Callback1`<P1`>`): `[ template_<[*/@(128.0.255) п
араметры]> `]&]
[s0;%- [%RU-RU*/@(128.0.255) CallbackType][%RU-RU <][%RU-RU*/@(128.0.255) аргументы
][%RU-RU >]`&_[* operator<<]([%RU-RU*/@(128.0.255) CallbackType][%RU-RU <][%RU-RU*/@(128.0.255) а
ргументы][%RU-RU > ]`&_[*@3 a], [%RU-RU*/@(128.0.255) CallbackType][%RU-RU <][%RU-RU*/@(128.0.255) а
ргументы][%RU-RU >]_[*@3 b])&]
[s2; Вариант`-оператор предыдущей функции. 
Позволяет делать сцепку, тем самым 
имитируя вставку обрвыза.&]
[s7; [%-*C@3 a]-|Первый обрвыз. Его значение 
заменяется обрвызом, вызывающим как 
первый, так и второй обрвыз.&]
[s7; [%-*C@3 b]-|Второй обрвыз.&]
[s7; [*/ Возвратное значение]-|Ссылка на первый 
обрвыз.&]
[s3; &]
[s4;%- &]
[s0;:operator`<`<`(Callback1`<P1`>`&`,Callback1`<P1`>`): `[ template_<[*/@(128.0.255) п
араметры]> `]&]
[s0;%- [%RU-RU*/@(128.0.255) CallbackType][%RU-RU <][%RU-RU*/@(128.0.255) аргументы
][%RU-RU >]`&_[* operator<<]([%RU-RU*/@(128.0.255) CallbackType][%RU-RU <][%RU-RU*/@(128.0.255) а
ргументы][%RU-RU > ]`&_[*@3 a], [%RU-RU*/@(128.0.255) C`+`+11Lambda]_[*@3 b])&]
[s2; Вариант `"маржирования`" обрвызов, 
который может использоваться для 
лямбд C`+`+11.&]
[s3; &]
[s0; &]
[ {{10000@(113.42.0) [s0; [*@7;4 Сохранение аргументов в обрвызе]]}}&]
[s0; &]
[s0; Есть возможность сохранять некоторые 
аргументы, которые передаются цели 
(функции или методу) в качестве параметров, 
при создании. Если одновременно передаются 
другие параметры в вызов обрвыза, 
этот переданный вызов представляет 
аргументы в начале, а определённые 
при создании обрвыза заполняют остаточную 
часть аргументов.&]
[s0; &]
[s0; Опять же, всё это определено для (до) 
5 целевых параметров:&]
[s0; &]
[s0;:`:`:callback1`(Object`*`,void`(M`:`:`*`)`(P`)`,T`):%- template_<class_[*@4 Object],
 class_[*@4 M], class_[*@4 P1], ..., class_[*@4 T1], ...>&]
[s0;:`:`:callback1`(Object`*`,void`(M`:`:`*`)`(P`)`,T`):%- [%RU-RU*/@(128.0.255) Callba
ckType][%RU-RU <][%RU-RU*/@(128.0.255) аргументы][%RU-RU >]_[* callback1]([*@4 Obj
ect]_`*[*@3 object], void_([*@4 M]`::`*[*@3 method])([*@4 P1], ...), [*@4 T1]_[*@3 arg1], 
...)&]
[s3;%- &]
[s0;:`:`:callback1`(const Object`*`,void`(M`:`:`*`)`(P`)const`,T`):%- template_<class
_[*@4 Object], class_[*@4 M], class_[*@4 P1], ..., class_[*@4 T1], ...>&]
[s0;:`:`:callback1`(const Object`*`,void`(M`:`:`*`)`(P`)const`,T`):%- [%RU-RU*/@(128.0.255) C
allbackType][%RU-RU <][%RU-RU*/@(128.0.255) аргументы][%RU-RU >]_[* callback1]([*@4 O
bject]_`*[*@3 object], void_([*@4 M]`::`*[*@3 method])([*@4 P1], ...) 
const, [*@4 T1]_[*@3 arg1], ...)&]
[s3;%- &]
[s0;:`:`:pteback1`(Object`*`,void`(M`:`:`*`)`(P`)`,T`):%- template_<class_[*@4 Object],
 class_[*@4 M], class_[*@4 P1], ..., class_[*@4 T1], ...>&]
[s0;:`:`:pteback1`(Object`*`,void`(M`:`:`*`)`(P`)`,T`):%- [%RU-RU*/@(128.0.255) Callbac
kType][%RU-RU <][%RU-RU*/@(128.0.255) аргументы][%RU-RU >]_[* pteback1]([*@4 Objec
t]_`*[*@3 object], void_([*@4 M]`::`*[*@3 method])([*@4 P1], ...), [*@4 T1]_[*@3 arg1], 
...)&]
[s3;%- &]
[s0;:`:`:pteback1`(Object`*`,void`(M`:`:`*`)`(P`)const`,T`):%- template_<class_[*@4 Obj
ect], class_[*@4 M], class_[*@4 P1], ..., class_[*@4 T1], ...>&]
[s0;:`:`:pteback1`(Object`*`,void`(M`:`:`*`)`(P`)const`,T`):%- [%RU-RU*/@(128.0.255) Ca
llbackType][%RU-RU <][%RU-RU*/@(128.0.255) аргументы][%RU-RU >]_[* pteback1]([*@4 O
bject]_`*[*@3 object], void_([*@4 M]`::`*[*@3 method])([*@4 P1], ...) 
const, [*@4 T1]_[*@3 arg1], ...)&]
[s3;%- &]
[s0;:`:`:callback1`(void`(`*`)`(P`)`,T`):%- template_<class_[*@4 P1], 
..., class_[*@4 T1], ...>&]
[s0;:`:`:callback1`(void`(`*`)`(P`)`,T`):%- [%RU-RU*/@(128.0.255) CallbackType][%RU-RU <][%RU-RU*/@(128.0.255) а
ргументы][%RU-RU >]_[* callback1](void_(`*[*@3 fn])([*@4 P1], 
...), [*@4 T1]_[*@3 arg], ...)&]
[s0;%- &]
[s2; [%-*@4 P1] ([%-*@4 P2, P3 ][%- ...]) `- аргументы, передаваемые 
при вызове метода, [%-*@4 T1] ([%-*@4 T2, T3 ][%- ...]) 
`- параметры, сохраняемые в объекте 
Callback.&]
[s3; &]
[s0; &]
[s0;%- &]
[ {{10000@(113.42.0) [s0; [*@7;4 Макросы Callback`'а]]}}&]
[s9; Макросы обратного вызова понижают 
многословность обрвызов методов 
экземпляра. Ими ожидается, что объявлена 
константа CLASSNAME  (через # typedef), которая 
определяет тип текущего класса, и 
возвращают обрвызы метода, привязанного 
к указателю [*@(0.0.255) this].&]
[s3; &]
[s0; &]
[s0;:`:`:THISBACK`(x`):%- [* THISBACK]([*@3 x])&]
[s2; Разворачивается в callback(this, `&CLASSNAME`::[@3 m]).&]
[s7; [%-*C@3 m]-|Имя метода.&]
[s3; &]
[s4; &]
[s0;:`:`:THISBACK1`(x`, arg`):%- [* THISBACK1]([*@3 x], [*@3 arg])&]
[s2; Разворачивается в callback1(this, `&CLASSNAME`::[@3 m], 
[@3 arg]).&]
[s7; [%-*C@3 m]-|Имя метода.&]
[s7; [%-*C@3 arg]-|Дополнительный параметр.&]
[s3; &]
[s4; &]
[s0;:`:`:THISBACK2`(m`, a`, b`):%- [* THISBACK2]([*@3 m], [*@3 a], [*@3 b])&]
[s2; Разворачивается в callback2(this, `&CLASSNAME`::[@3 m], 
[@3 a],[@3  b]).&]
[s7; [%-*C@3 m]-|Имя метода.&]
[s7; [%-*C@3 a]-|Первый дополнительный параметр.&]
[s7; [%-*C@3 b]-|Второй дополнительный параметр.&]
[s3; &]
[s4; &]
[s0;:`:`:PTEBACK`(x`):%- [* PTEBACK]([*@3 x])&]
[s2; Разворачивается в pteback(this, `&CLASSNAME`::[@3 m]).&]
[s7; [%-*C@3 m]-|Имя метода.&]
[s3; &]
[s4; &]
[s0;:`:`:PTEBACK1`(x`, arg`):%- [* PTEBACK1]([*@3 x], [*@3 arg])&]
[s2; Разворачивается в pteback1(this, `&CLASSNAME`::[@3 m], 
[@3 arg]).&]
[s7; [%-*C@3 m]-|Имя метода.&]
[s7; [%-*C@3 arg]-|Дополнительный параметр.&]
[s3; &]
[s4; &]
[s0;:`:`:PTEBACK2`(m`, a`, b`):%- [* PTEBACK2]([*@3 m], [*@3 a], [*@3 b])&]
[s2; Разворачивается в pteback2(this, `&CLASSNAME`::[@3 m], 
[@3 a],[@3  b]).&]
[s7; [%-*C@3 m]-|Имя метода.&]
[s7; [%-*C@3 a]-|Первый дополнительный параметр.&]
[s7; [%-*C@3 b]-|Второй дополнительный параметр.&]
[s3; &]
[s0; &]
[s0;%- &]
[s0;%- &]
[ {{10000@(113.42.0) [s0; [*@7;4 Класс EventArgTarget]]}}&]
[s3;%- &]
[s1;:noref:%- [@(0.0.255)3 template][3 _<][@(0.0.255)3 class][3 _][*@4;3 T][3 >]&]
[s1;:EventArgTarget`:`:class:%- [@(0.0.255) class]_[* CallbackArgTarget]&]
[s9; Этот вспомогательный класс полезен 
в тех ситуациях, когда некоторое возвратное 
значение определено набором обратных 
вызовов. Например, всплывающее меню, 
которое предоставляет возможность 
выбора одного символа, `- в этом случае 
можно использовать CallbackArgTarget, вместо 
спепциального метода, чтобы получить 
результат пользовательского выбора.&]
[s8; [%-*@4 T]-|Тип выводимого значения. Должен 
быть в состоянии принимать значение 
Null.&]
[s3; &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Список Публичных Членов]]}}&]
[s3; &]
[s5;:EventArgTarget`:`:EventArgTarget`(`):%- [* CallbackArgTarget]()&]
[s2; Присваивает Null выводимому значению.&]
[s3; &]
[s4; &]
[s5;:EventArgTarget`:`:operator const T`&`(`)const:%- [* operator_const_T`&]()_[@(0.0.255) c
onst]&]
[s7; [*/ Возвратное значение]-|Результат. 
Если не было вызвано CallbackArgTarget, возвращает 
Null.&]
[s3; &]
[s4;%- &]
[s5;:EventArgTarget`:`:IsNullInstance`(`)const:%- [@(0.0.255) bool]_[* IsNullInstance]()_
[@(0.0.255) const]&]
[s7; [*/ Возвратное значение]-|True, если выводимое 
значение не Null.&]
[s3; &]
[s4;%- &]
[s5;:EventArgTarget`:`:operator`[`]`(const T`&`):%- [_^Callback^ Callback]_[* operator`[`]
]([@(0.0.255) const]_[*@4 T][@(0.0.255) `&]_[*@3 value])&]
[s2; Возвращает Callback, который при вызове 
присваивает значение [@3 value] выводимому 
значению.&]
[s7; [%-*C@3 value]-|Знаечение.&]
[s7; [*/ Возвратное значение]-|Callback. (Обратный 
вызов).&]
[s3; &]
[s0; ]]