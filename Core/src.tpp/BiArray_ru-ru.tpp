topic "Класс BiArray";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,0#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_}%RU-RU 
[ {{10000@(113.42.0) [s0; [*@7;4 Класс BiArray]]}}&]
[s3; &]
[s1;:noref:%- [@(0.0.255)3 template][3 _<][@(0.0.255)3 class][3 _][*@4;3 T][@(0.0.255)3 >]&]
[s1;:BiArray`:`:class:%- [@(0.0.255) class]_[* BiArray]_:_[@(0.0.255) private]_[*@3 MoveableAn
dDeepCopyOption][@(0.0.255) <]_[* BiArray][@(0.0.255) <][*@4 T][@(0.0.255) >]_>_&]
[s8; [@4 T]-|Тип или класс`-основа элементов, 
сохраняемых в BiArray`'е. Общие требования 
к T отсутствуют.&]
[s9; Универсальная форма двунаправленного 
контейнера случайного доступа. Его 
черты происходят от того факта, что, 
как правило, он реализуется с применением 
непрямого (скрытого) контейнера с 
указателями на T, такого как, например, 
BiVector<T`*>. Тем не менее, он поддерживает 
общие концепты, такие как владение 
содержимыми элементами, доступ по 
ссылке (а не по указателю) к элементам, 
и проч.&]
[s9; Он предоставляет практически все 
операции над BiVector `'ом, с той же семантикой, 
и почти любой BiVector можно прямо заменить 
на BiArray. С другой стороны, им предоставляются
 некоторые специальные операции, 
невозможные для BiVector `'а, и, что самое 
важное, он никогда не повреждает ссылки 
(то есть ссылки и указатели C`+`+) на 
элементы (однако, к сожалению, им часто 
повреждаются обходчики).&]
[s9; BiArray также может использоваться для 
сохранения полиморфных элементов: 
сохранённые элементы могут производиться 
от T. Чтобы сохранять такие элементы, 
нужно передать указатель на элемент, 
предварительно созданный на куче. 
Как прежде, BiArray принимает `"во владение`" 
такие элементы (т.е. имеет возможность, 
например, удалять их в любое время). 
Можно также использовать этот метод 
для создания BiArray `'я элементов, у которого 
нет ни pick, ни КГК (конструктора глубокой 
копии).&]
[s9; Есть также операции, повзоляющие 
откреплять элемент от BiArray`'я, удалять 
его, но не руша  Эта операция возвращает 
указатель на такой элемент, и BiArray`"сдаёт`" 
`"права собственности`".&]
[s9; Недостаток BiArray `'я в сравнении с BiVector 
`'ом в производительности (performance): 
 большинство операций значительно 
медленнее, чем с BiVector `'ами (по фактору 
до 8(`-ми раз), что зависит от скорости 
системных методов  malloc/free). &]
[s9; Что касается памяти, для элементов 
с небольшим размером, потребление 
памяти BiArray `'ем значительно выше, 
чем у BiVector `'а. По мере роста элементов 
в размере, BiArray начинает становиться 
эффективнее BiVector `'а.&]
[s9; Итераторы к BiArray удовлетворяют всем 
требованиям стандартной библиотеки 
C`+`+ для обходчиков (итераторов) случайного 
доступа (random access), плюс то, что они 
позволяют делать присваивание (assignment) 
(и конструкцию копии) , и ещё `- тестировать 
на указатель 0 (то есть NULL).&]
[s9; Как любой иной NTL`-контейнер, BiArray 
является [*/^topic`:`/`/Core`/srcdoc`/Moveable`_ru`-ru^ moveable][*/  
(`"движимым`") ]типом с `"семантикой 
трансфера`" ( transfer semantics), именуемой 
`" [*/^topic`:`/`/Core`/srcdoc`/pick`_`_ru`-ru^ pick и опциональная 
глубокая копия (ОГК)] `".&]
[s9; Вызов методов `"пикнутого`" BiArray`'я 
является логической ошибкой, за исключением
&]
[s9; &]
[s0; [C+75 void ][*C+75 operator`=][C+75 (pick`_ BiArray`& ][*C@3+75 v][C+75 )]&]
[s0; [C+75 void ][*C+75 operator<<`=][C+75 (const BiArray`& ][*C@3+75 v][C+75 )][+75  
][/+75 (определено посредством DeepCopyOptionTemplate)]&]
[s0; [C+75 void ][*C+75 Clear][C+75 ()]&]
[s0; [C+75 bool ][*C+75 IsPicked][C+75 () const]&]
[s0;C+75 &]
[s9; Опциональная глубокая копия реализована 
через макрос DeepCopyOptionTemplate.&]
[s3;%- &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Детали Конструктора]]}}&]
[s3;%- &]
[s5;:BiArray`:`:BiArray`(`):%- [* BiArray]()&]
[s2; Дефолтный конструктор. Конструирует 
пустой BiArray.&]
[s3; &]
[s4; &]
[s0;:`:`:BiArray`:`:BiArray`(const`:`:BiArray`&`,int`): [* BiArray](const 
[* BiArray]`& [*@3 v], int)&]
[s2; Лпциональный конструктор глубокой 
копии (КГК).&]
[s6; Требуется, чтобы у T был конструктор 
глубокой копии (КГК) или опциональный 
КГК (ОКГК), если в массиве находятся 
только объекты типа T.&]
[s6; Требуется полиморфная глубокая копия 
(ПГК), если в Array также находятся объекты, 
производного то Т, типа.&]
[s7; [*C@3 v]-|Исходный Array.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:BiArray`(pick`_ BiArray`&`):%- [* BiArray]([@(0.128.128) pick`_]_[* BiArray
][@(0.0.255) `&]_[*@3 src])&]
[s2; Pick`-конструктор. `"Трансферит`" исходный 
BiArray за малое константное время, но 
рушит его при пикинге. &]
[s7; [*@3 v]-|Исходный BiArray.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:BiArray`:`:BiArray`(std`:`:initializer`_list`<T`>`):%- [* BiArray]([_^http`:`/`/en`.cppreference`.com`/w`/cpp`/utility`/initializer`_list^ s
td`::initializer`_list]<[*@4 T]>_[*@3 init])&]
[s2; C`+`+ 11 инициализация.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:`~BiArray`(`):%- [@(0.0.255) `~][* BiArray]()&]
[s2; Деструктор. Вызывает деструктор 
каждого элемента в этом BiArray`'е.&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0; [* Список Публичных Членов]]}}&]
[s3;%- &]
[s5;:BiArray`:`:AddHead`(`):%- [*@4 T][@(0.0.255) `&]_[* AddHead]()&]
[s2; Добавляет новый дефолтно сконструированный
 элемент в голову этого BiArray`'я. Новый 
элемент находится в позиции 0.&]
[s6; Требуется, чтобы у T был дефолтный 
конструктор.&]
[s6; Повреждает итераторы к BiArray.&]
[s7; [*/ Возвратное значение]-|Ссылка на вновь 
добавленный, дефолтно построенный 
элемент.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:AddTail`(`):%- [*@4 T][@(0.0.255) `&]_[* AddTail]()&]
[s2; Добавляет новый, дефолтно построенный, 
элемент в хвост BiArray`'я. Новый элемент 
будет находиться в позиции GetCount() 
`- 1.&]
[s6; Требуется, чтобы у T был дефолтный 
конструктор.&]
[s6; Повреждает итераторы к BiArray.&]
[s7; [*/ Возвратное значение]-|Ссылка на вновь 
добавленный, дефолтно построенный 
элемент.&]
[s0;3 &]
[s4;%- &]
[s5;:BiArray`:`:AddHead`(const T`&`):%- [@(0.0.255) void]_[* AddHead]([@(0.0.255) const]_[*@4 T
][@(0.0.255) `&]_[*@3 x])&]
[s2; Добавляет новый элемент с указанным 
значением в голову BiArray`'я. Новый элемент 
находится в позиции 0.&]
[s6; Требуется, чтобы у T был КГК.&]
[s6; Повреждает итераторы к BiArray.&]
[s7; [*C@3 x]-|Значение, копируемое во вновь 
созданный элемент.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:AddTail`(const T`&`):%- [@(0.0.255) void]_[* AddTail]([@(0.0.255) const]_[*@4 T
][@(0.0.255) `&]_[*@3 x])&]
[s2; Добавляет новый элемент с указанным 
значением в хвост BiArray`'я.  Новый элемент 
будет находиться в позиции GetCount() 
`- 1.&]
[s6; Требуется, чтобы у T был дефолтный 
конструктор.&]
[s6; Повреждает итераторы к BiArray.&]
[s7; [*C@3 x]-|Значение, копируемое во вновь 
созданный элемент..&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:BiArray`:`:AddHeadPick`(T`&`&`):%- [@(0.0.255) void]_[* AddHeadPick]([*@4 T][@(0.0.255) `&
`&]_[*@3 x])&]
[s2; Добавляет новый элемент в голове 
BiArray`'я и `"пикует`" значение параметра. 
Новый элемент находится в позиции 
0.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:BiArray`:`:AddTailPick`(T`&`&`):%- [@(0.0.255) void]_[* AddTailPick]([*@4 T][@(0.0.255) `&
`&]_[*@3 x])&]
[s2; Добавляет новый элемент в хвост BiArray`'я 
и `"пикует`" значение параметра. Новый 
элемент будет находиться в позиции 
GetCount() `- 1.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:AddHead`(T`*`):%- [*@4 T][@(0.0.255) `&]_[* AddHead]([*@4 T]_`*[*@3 newt])&]
[s2; Добавляет новый элемент в голове 
BiArray`'я. Элемент определяется указателем 
на объект. BiArray принимает правообладание 
объектом. Этот вариант позволяет 
использовать BiArray как полиморфный 
контейнер, так как тип добавленного 
элемента также может быть производным 
от T. Никакого конструктора не применяется. 
Новый элемент будет находиться в 
позиции 0.&]
[s6; Повреждает итераторы к BiArray.&]
[s7; [*C@3 newt]-|Добавляемый объект.&]
[s7; [*/ Возвратное значение]-|Ссылка на объект 
`= [* `*newt].&]
[s0;3 &]
[s4;%- &]
[s5;:BiArray`:`:AddTail`(T`*`):%- [*@4 T][@(0.0.255) `&]_[* AddTail]([*@4 T]_`*[*@3 newt])&]
[s2; Добавляет новый элемент в хвосте 
BiArray`'я. Элемент определяется указателем 
на объект. BiArray принимает правообладание 
объектом. Этот вариант позволяет 
использовать BiArray как полиморфный 
контейнер, так как тип добавленного 
элемента также может быть производным 
от T. Никакого конструктора не применяется. 
Новый элемент будет находиться в 
позиции GetCount() `- 1.&]
[s6; Повреждает итераторы к BiArray.&]
[s7; [*C@3 newt]-|Добавляемый объект.&]
[s7; [*/ Возвратное значение]-|Ссылка на объект 
`- [* `*newt].&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:BiArray`:`:CreateHead`(`):%- [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 TT]>
_[*@4 TT][@(0.0.255) `&]_[* CreateHead]()&]
[s2; Создаёт новый элемент типа [%-*@4 TT] в 
голове.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:BiArray`:`:CreateTail`(`):%- [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 TT]>
_[*@4 TT][@(0.0.255) `&]_[* CreateTail]()&]
[s2; Создаёт новый элемент типа [%-*@4 TT] в 
хвосте.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:BiArray`:`:AddHead`(Upp`:`:One`<T`>`&`&`):%- [*@4 T][@(0.0.255) `&]_[* AddHead](
[_^Upp`:`:One^ One]<[*@4 T]>`&`&_[*@3 one])&]
[s2; Создаёт новый элемент в голове, перемещает 
контент [%-*@3 one] в него. [%-*@3 one] должен 
содержать значение, иначе поведение 
неопределённое.&]
[s6; Повреждает итераторы к BiArray.&]
[s0; &]
[s4;%- &]
[s5;:Upp`:`:BiArray`:`:AddTail`(Upp`:`:One`<T`>`&`&`):%- [*@4 T][@(0.0.255) `&]_[* AddTail](
[_^Upp`:`:One^ One]<[*@4 T]>`&`&_[*@3 one])&]
[s2; Создаёт новый элемент в хвосте, перемещает 
контент [%-*@3 one] в него. [%-*@3 one] должен 
содержать значение, иначе поведение 
неопределённое.&]
[s6; Повреждает итераторы к BiArray.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:Head`(`):%- [*@4 T][@(0.0.255) `&]_[* Head]()&]
[s2; Возвращает ссылку на голову этого 
BiArray`'я. То же, что и operator`[`](0).&]
[s7; [*/ Возвратное значение]-|Ссылка на голову 
 BiArray`'я.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:Tail`(`):%- [*@4 T][@(0.0.255) `&]_[* Tail]()&]
[s2; Возвращает ссылку на хвост этого 
BiArray`'я. То же, что и operator`[`](GetCount() `- 
1).&]
[s7; [*/ Возвратное значение]-|Ссылка на хвост 
BiArray`'я.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:Head`(`)const:%- [@(0.0.255) const]_[*@4 T][@(0.0.255) `&]_[* Head]()_[@(0.0.255) c
onst]&]
[s2; Возвращает ссылку на голову этого 
BiArray`'я. То же, что и operator`[`](0).&]
[s7; [*/ Возвратное значение]-|Константная 
ссылка на голову BiArray`'я.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:Tail`(`)const:%- [@(0.0.255) const]_[*@4 T][@(0.0.255) `&]_[* Tail]()_[@(0.0.255) c
onst]&]
[s2; Возвращает ссылку на хвост этого 
BiArray`'я. То же, что и operator`[`](GetCount() `- 
1).&]
[s7; [*/ Возвратное значение]-|Константная 
ссылка на хвост BiArray`'я.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:DropHead`(`):%- [@(0.0.255) void]_[* DropHead]()&]
[s2; Удаляет элемент в голове этого BiArray`'я.&]
[s6; Повреждает итераторы к BiArray.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:DropTail`(`):%- [@(0.0.255) void]_[* DropTail]()&]
[s2; Удаляет элемент в хвосте этого BiArray`'я.&]
[s6; Повреждает итераторы к BiArray.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:DetachHead`(`):%- [*@4 T]_`*[* DetachHead]()&]
[s2; Удаляет элемент в голове этогоe BiArray`'я, 
отказываясь от правообладания. Клиент 
отвечает за удаление элемента.&]
[s6; Повреждает итераторы к BiArray.&]
[s7; [*/ Возвратное значение]-|Указатель 
на элемент, расположенный на куче.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:DetachTail`(`):%- [*@4 T]_`*[* DetachTail]()&]
[s2; Удаляет элемент в хвосте этого BiArray`'я, 
отказываясь от правообладания. Клиент 
отвечает за удаление элемента.&]
[s6; Повреждает итераторы к BiArray.&]
[s7; [*/ Возвратное значение]-|Указатель 
на элемент, расположенный на куче.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:operator`[`]`(int`):%- [*@4 T][@(0.0.255) `&]_[* operator`[`]]([@(0.0.255) in
t]_[*@3 i])&]
[s2; Возвращает  ссылку на элемент в указанной 
позиции.&]
[s7; [*C@3 i]-|Позиция элемента.&]
[s7; [*/ Возвратное значение]-|Ссылка на элемент.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:operator`[`]`(int`)const:%- [@(0.0.255) const]_[*@4 T][@(0.0.255) `&]_[* oper
ator`[`]]([@(0.0.255) int]_[*@3 i])_[@(0.0.255) const]&]
[s2; Возвращает ссылку на элемент в указанной 
позиции.&]
[s7; [*C@3 i]-|Позиция элемента.&]
[s7; [*/ Возвратное значение]-|Константная 
ссылка на элемент.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:GetCount`(`)const:%- [@(0.0.255) int]_[* GetCount]()_[@(0.0.255) const]&]
[s2; Возвращает число элементов в BiArray`'е.&]
[s7; [*/ Возвратное значение]-|Действительное 
число элементов.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:IsEmpty`(`)const:%- [@(0.0.255) bool]_[* IsEmpty]()_[@(0.0.255) const]&]
[s2; Тестирует, является ли этот BiArray пустым. 
То же, что и GetCount() `=`= 0.&]
[s7; [*/ Возвратное значение]-|верно, если 
Vector пуст, неверно иначе.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:Clear`(`):%- [@(0.0.255) void]_[* Clear]()&]
[s2; Удаляет все элементы из этого BiArray`'я.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:Shrink`(`):%- [@(0.0.255) void]_[* Shrink]()&]
[s2; Минимизирует потребление памяти 
BiArray`'ем путём минимизирования ёмкости.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:Reserve`(int`):%- [@(0.0.255) void]_[* Reserve]([@(0.0.255) int]_[*@3 n])&]
[s2; Резервирует ёмкость. Если требуемая 
ёмкость больше, чем текущая, ёмкость 
увеличивается на необходимое значение.&]
[s7; [*C@3 n]-|Необходимая ёмкость.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:GetAlloc`(`)const:%- [@(0.0.255) int]_[* GetAlloc]()_[@(0.0.255) const]&]
[s2; Возвращает текущую ёмкость BiArray.&]
[s7; [*/ Возвратное значение]-|Ёмкость BiArray`'я&]
[s3; &]
[s4; &]
[s0;:friend BiArray`& operator`<`<`(BiArray`& b`, const T`& x`): friend 
BiArray`& [* operator]<<(BiArray`& [*@3 b], const T`& [*@3 x])&]
[s2; Оператор, заменяющий [* void AddTail(const T`&x)]. 
Возвращая ссылку на этот BiArray, позволяет 
добавлять в одном выражении больше 
элементов, тем самым, например, позволяя 
конструировать временный BiArray, как 
часть выражения, наподобии Foo(BiArray<int>() 
<< 1 << 2 << 4).&]
[s6; Требуется, чтобы у T был КГК.&]
[s6; Повреждает итераторы к BiArray.&]
[s7; [*C@3 x]-|Значение, копируемое во вновь 
созданный элемент.&]
[s7; [*/ Возвратное значение]-|Ссылка на BiArray 
(то есть `*this).&]
[s3; &]
[s4; &]
[s0;:friend BiArray`& operator`>`>`(const T`& x`, BiArray`& b`): friend 
BiArray`& [* operator]>>(const T`& [*@3 x], BiArray`& [*@3 b])&]
[s2; Оператор, заменяющий [* void AddHead(const T`&x)]. 
Возвращая ссылку на этот BiArray, позволяет 
добавлять в одном выражении больше 
элементов, тем самым, например, позволяя 
конструировать временный BiArray, как 
часть выражения, наподобии Foo(1 >> (2 
>> BiArray<int>())).&]
[s6; Требуется, чтобы у T был КГК.&]
[s6; Повреждает итераторы к BiArray.&]
[s7; [*C@3 x]-|Значение, копируемое во вновь 
созданный элемент.&]
[s7; [*/ Возвратное значение]-|Ссылка на BiArray 
(то есть `*this).&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:Serialize`(Stream`&`):%- [@(0.0.255) void]_[* Serialize]([_^Stream^ Stream][@(0.0.255) `&
]_[*@3 s])&]
[s2; Сериализует контент этого BiArray`'я 
в/из потока Stream. WРаботает только, 
если NTL используется как часть UPP.&]
[s6; Требуется, чтобы у T был определён 
оператор сериализации.&]
[s7; [*C@3 s]-|Целевой/исходный поток.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:IsPicked`(`)const:%- [@(0.0.255) bool]_[* IsPicked]()_[@(0.0.255) const]&]
[s2; Возвращает [* true], если BiArray находится 
в `"пикнутом`" состоянии.&]
[s7; [*/ Возвратное значение     ][* true,] если 
BiArray находится в `"пикнутом`" состоянии, 
[* false] иначе.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:BiArray`:`:BiArray`(const Upp`:`:BiArray`&`,int`):%- [* BiArray]([@(0.0.255) c
onst]_[* BiArray][@(0.0.255) `&]_[*@3 v], [@(0.0.255) int])&]
[s2; Опционный конструктор глубокой копии 
(КГК).&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:BiArray`:`:BiArray`(Upp`:`:BiArray`&`&`):%- [* BiArray]([* BiArray][@(0.0.255) `&
`&]_[*@3 src])&]
[s2; Pick`-конструктор.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:BiArray`:`:operator`=`(Upp`:`:BiArray`&`&`):%- [@(0.0.255) void]_[* operator`=
]([_^Upp`:`:BiArray^ BiArray][@(0.0.255) `&`&]_[*@3 src])&]
[s2; Pick`-присваивание.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:ValueType`:`:typedef:%- [@(0.0.255) typedef]_T_[* ValueType]&]
[s2; Typedef T для использования в шаблонных 
алгоритмах.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:Iterator`:`:typedef:%- [@(0.0.255) typedef]_[_^IIterator^ IIterator][@(0.0.255) <
][_^BiArray^ BiArray][@(0.0.255) >]_[* Iterator]&]
[s2; Тип обходчика.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:ConstIterator`:`:typedef:%- [@(0.0.255) typedef]_[_^ConstIIterator^ Const
IIterator][@(0.0.255) <][_^BiArray^ BiArray][@(0.0.255) >]_[* ConstIterator]&]
[s2; Константный тип обходчика.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:Begin`(`):%- [_^BiArray`:`:Iterator^ Iterator]_[* Begin]()&]
[s2; Взвращает неконстантный итератор 
к голове BiArray`'я. &]
[s7; [*/ Возвратное значение]-|Обходчик.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:End`(`):%- [_^BiArray`:`:Iterator^ Iterator]_[* End]()&]
[s2; Возвращает неконстантный итератор 
к положению сразу за хвостом этого 
BiArray`'я. &]
[s7; [*/ Возвратное значение]-|Обходчик.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:GetIter`(int`):%- [_^BiArray`:`:Iterator^ Iterator]_[* GetIter]([@(0.0.255) i
nt]_[*@3 pos])&]
[s2; Возвращает неконстантный итератор 
к элементу в заданной позиции. То 
же, что и [* Begin() `+ pos]. The benefit of this method 
is that [* pos] is range checked in debug mode.&]
[s7; [*C@3 pos]-|Требуемая позиция.&]
[s7; [*/ Возвратное значение]-|Обходчик.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:Begin`(`)const:%- [_^BiArray`:`:ConstIterator^ ConstIterator]_[* Begin]()
_[@(0.0.255) const]&]
[s2; Возвращает константный итератор 
в голову этого BiArray`'я.&]
[s7; [*/ Возвратное значение]-|Обходчик.&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:End`(`)const:%- [_^BiArray`:`:ConstIterator^ ConstIterator]_[* End]()_[@(0.0.255) c
onst]&]
[s2; Возвращает  константный итератор 
в положение сразу за хвостом этого 
 BiArray`'я..&]
[s7; [*/ Возвратное значение]-|Обходчик.-|&]
[s3; &]
[s4;%- &]
[s5;:BiArray`:`:GetIter`(int`)const:%- [_^BiArray`:`:ConstIterator^ ConstIterator]_[* Get
Iter]([@(0.0.255) int]_[*@3 pos])_[@(0.0.255) const]&]
[s2; Возвращает константный итератор 
к элементу в указанной позиции. То 
же, что и [* Begin() `+ pos]. Выгода этого метода 
в том, что [* pos] проверяется в отладочном 
режиме.&]
[s7; [*C@3 pos]-|Требуемая позиция.&]
[s7; [*/ Возвратное значение]-|Обходчик.&]
[s3; &]
[s4; &]
[s5;K%- friend_[@(0.0.255) void][@(64) _]Swap[@(64) (][^`:`:BiArray^@(64) BiArray][@(64) `&_][@3 a
][@(64) , ][^`:`:BiArray^@(64) BiArray][@(64) `&_][@3 b][@(64) )]&]
[s2; Специализация генерного [* Swap] для 
BiArray`'ев. Обменивает BiArray за операцию 
константно низкого времени.&]
[s7; [*@3 a]-|Первый обмениваемый BiArray.&]
[s7; [*@3 b]-|Второй обмениваемый BiArray.&]
[s3; &]
[s0; ]]