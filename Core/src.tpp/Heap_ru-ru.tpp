topic "Функции Кучи";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,2#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_} 
[ {{10000@(113.42.0) [s0;%RU-RU [*@7;4 Куча (Heap)]]}}&]
[s3; &]
[s0; U`+`+ имеет свой собственный высокопроизводит
ельный разместитель, специально под 
него настроенный. Глобальные операторы 
new/delete, как правило, перегружаются, 
чтобы использовать этот разместитель, 
если, конечно, это возможно и не указан 
макрос flagUSEMALLOC(напр., конфигурация 
главного пакета содержит USEMALLOC).&]
[s0; &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Основные функции размещения]]}}&]
[s3; &]
[s5;:Upp`:`:MemoryAllocPermanent`(size`_t`): [@(0.0.255) void]_`*[* MemoryAllocPermanent](
[_^size`_t^ size`_t]_[*@3 size])&]
[s2;%RU-RU Размещает блок памяти размером 
[%-*@3 size] байтов. Этот указатель перманентный 
и не может высвобождаться; также он 
игнорируется при проверках утечек.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:MemoryAllocSz`(size`_t`&`): [@(0.0.255) void]_`*[* MemoryAllocSz]([_^size`_t^ s
ize`_t][@(0.0.255) `&]_[*@3 size])&]
[s2;%RU-RU Размещает блок памяти размером, 
как минимум, [%-*@3 size] байтов. [%-*@3 size] устанавлива
ется в реальное число байтов в блоке, 
который может использоваться приложением. 
Гарантированное размещение определено 
в константе [* UPP`_HEAP`_ALIGNMENT] (на данный 
момент 16). минимальный реальный размер 
возвращаемого блока в режиме выпуска 
равен [* UPP`_HEAP`_MINBLOCK] (на данный момент 
32).&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:MemoryAlloc`(size`_t`): [@(0.0.255) void]_`*[* MemoryAlloc]([_^size`_t^ size`_t
]_[*@3 size])&]
[s2;%RU-RU Размещает блок памяти размером, 
как минимум, [%-*@3 size] байтов.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:MemoryFree`(void`*`): [@(0.0.255) void]_[* MemoryFree]([@(0.0.255) void]_`*[*@3 p
tr])&]
[s2;%RU-RU Высвобождает блок, ранее размещённый 
посредством MemoryAllocSz или MemoryAlloc.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:MemoryAlloc32`(`): [@(0.0.255) void]_`*[* MemoryAlloc32]()&]
[s2;%RU-RU Размещает блок памяти размером 
ровно 32 байта. Работает одинаково 
с MemoryAlloc(32), но несколько быстрее.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MemoryFree32`(void`*`): [@(0.0.255) void]_[* MemoryFree32]([@(0.0.255) void]_`*
[*@3 ptr])&]
[s2;%RU-RU Высвобождает блок, ранее размещённый 
посредством MemoryAlloc32. Работает одинаково 
с MemoryFree([%-*@3 ptr]), но несколько быстрее.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:MemoryTryRealloc`(void`*`,size`_t`&`): [@(0.0.255) bool]_[* MemoryTryRealloc](
[@(0.0.255) void]_`*[*@3 ptr], [_^size`_t^ size`_t][@(0.0.255) `&]_[*@3 newsize])&]
[s2;%RU-RU Пытается изменить размер блока 
по указателю [%-*@3 ptr] на нечто, близкое 
к размеру [%-*@3 newsize]. Реальное значение 
возвращается в [%-*@3 newsize]. Возвращает 
true при успехе.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:TinyAlloc`(int`): [@(0.0.255) void]_`*[* TinyAlloc]([@(0.0.255) int]_[*@3 size])&]
[s2;%RU-RU Размещает блок в размер [%-*@3 size] 
байтов. Позволяет размещать меньшие 
блоки реального размера (как правило, 
минимальный размер возвращаемого 
блока равен 32 байта), но требует высвобождени
я блока посредством TinyFree.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:TinyFree`(int`,void`*`): [@(0.0.255) void]_[* TinyFree]([@(0.0.255) int]_[*@3 siz
e], [@(0.0.255) void]_`*[*@3 ptr])&]
[s2;%RU-RU Высвобождает блок, размещённый 
через TinyAlloc размер, [%-*@3 size] должен быть 
таким же, как при размещении.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:tiny`_new`(Args`.`.`.args`): [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 T],
 [@(0.0.255) class...]_[*@4 Args]>_[*@4 T]_`*[* tiny`_new]([*@4 Args][@(0.0.255) ...]_args)&]
[s2;%RU-RU Размещает единичный объект посредством 
TinyAlloc и инициализует его (with placement 
new).&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:tiny`_delete`(T`*`): [@(0.0.255) template]_<[@(0.0.255) class]_[*@4 T]>_[@(0.0.255) v
oid]_[* tiny`_delete]([*@4 T]_`*[*@3 ptr])&]
[s2;%RU-RU Удаляет объект, размещённый посредством
 tiny`_new.&]
[s3;%RU-RU &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Диагностика кучи]]}}&]
[s4;%RU-RU &]
[s5;:Upp`:`:GetMemoryBlockSize`(void`*`): [_^size`_t^ size`_t]_[* GetMemoryBlockSize]([@(0.0.255) v
oid]_`*[*@3 ptr])&]
[s2;%RU-RU Возвращает размер блока в байтах.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:MemoryCheck`(`): [@(0.0.255) void]_[* MemoryCheck]()&]
[s2;%RU-RU Проверяет кучу на наличие любых 
ошибок (вызванных, напр., переполнением 
буфера).&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MemoryDumpLarge`(`): [@(0.0.255) void]_[* MemoryDumpLarge]()&]
[s2;%RU-RU Делает дамп списка размещений 
large (1`-64KB) в стандартный лог.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MemoryDumpHuge`(`): [@(0.0.255) void]_[* MemoryDumpHuge]()&]
[s2;%RU-RU Делает дамп списка размещений 
huge (как правило, 64KB `- 16MB) в стандартный 
лог.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MemoryUsedKb`(`): [@(0.0.255) int]_[* MemoryUsedKb]()&]
[s2;%RU-RU Возвращает текущую используемую 
память.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MemoryUsedKbMax`(`): [@(0.0.255) int]_[* MemoryUsedKbMax]()&]
[s2;%RU-RU Возвращает пиковое использование 
памяти.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MemoryLimitKb`(int`): [@(0.0.255) void]_[* MemoryLimitKb]([@(0.0.255) int]_[*@3 k
b])&]
[s2;%RU-RU Эта отладочная / диагностическая 
функция ограничивает использование 
памяти до [%-*@3 kb] КБ. Если приложение 
размещает больше, то оно останавливается 
с ошибкой.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:MemoryGetCurrentSerial`(`): [_^Upp`:`:dword^ dword]_[* MemoryGetCurrentSerial
]()&]
[s2;%RU-RU В отладочном режиме возвращает 
серийный номер следующего размещённого 
блока. Этот номер, при наличии каких`-либо 
утечек памяти, выводится в лог.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MemoryIgnoreNonMainLeaks`(`): [@(0.0.255) void]_[* MemoryIgnoreNonMainLeaks](
)&]
[s2;%RU-RU Заставляет детектор утечек игнорировать
 утечки глобальными конструкторами.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MemoryIgnoreNonUppThreadsLeaks`(`): [@(0.0.255) void]_[* MemoryIgnoreNonUppTh
readsLeaks]()&]
[s2;%RU-RU Заставляет детектор утечек игнорировать
 утечки, созданные потоками (нитями), 
запущенными не из класса U`+`+ Thread.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MemoryIgnoreLeaksBegin`(`): [@(0.0.255) void]_[* MemoryIgnoreLeaksBegin]()&]
[s2;%RU-RU Заставляет детектор утечек игнорировать
 утечки блоков, размещённых до вызова 
[%-* MemoryIgnoreLeaksEnd]. Вызов может быть гнездовым. 
Особенно применимо при работе со 
сторонним кодом, который, напр., может 
создавать статические утечки (память 
размещена один раз, но библиотека 
не принимает по выходу мер для её 
вымещения).&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MemoryIgnoreLeaksEnd`(`): [@(0.0.255) void]_[* MemoryIgnoreLeaksEnd]()&]
[s2;%RU-RU Завершает подавление, начатое 
MemoryIgnoreLeaksBegin.&]
[s3;%RU-RU &]
[s4; &]
[s1;:Upp`:`:MemoryIgnoreLeaksBlock`:`:struct: [@(0.0.255) struct]_[* MemoryIgnoreLeaksBlo
ck]&]
[s2;%RU-RU Этот вспомогательный класс вызывает 
[%-* MemoryIgnoreLeaksBegin] в конструкторе и [%-* MemoryIgnoreLeaksEnd
], другими словами, подавляет утечки 
до конца блока.&]
[s3;%RU-RU &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Настройка кучи]]}}&]
[s0;%RU-RU &]
[s0;%RU-RU Настройка кучи обеспечивается 
классом MemoryOptions. Конструктор этого 
класса устанавливает дефолтные значения 
индивидуальных параметров, деструктор 
применяет их к подсистеме кучи.]]