topic "Класс RWMutex";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,0#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_} 
[ {{10000t/25b/25@(113.42.0) [s0; [*@7;4 Класс RWMutex]]}}&]
[s3; &]
[s1;:RWMutex`:`:class: [@(0.0.255)3 class][3 _][*3 RWMutex][3 _:_][@(0.0.255)3 private][3 _][*@3;3 N
oCopy]&]
[s9;%RU-RU Этот класс является посредником 
между считывателем`-записывателем, 
разделяя глобальные данные. Только 
единственный поток может выполнять 
EnterWrite, но любое число потоков может 
использовать EnterRead. RWMutex НЕ реэнтрантен 
(один и тот же поток может Enter Mutex несколько 
раз).&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Список Публичных Методов]]}}&]
[s3; &]
[s5;:RWMutex`:`:EnterWrite`(`): [@(0.0.255) void]_[* EnterWrite]()&]
[s2;%RU-RU Вход для записи. Блокирует, пока 
все потоки не покинут (через Leave) данный 
RWMutex, затем входит в него и блокирует 
все потоки, входящие в RWMutex, пока не 
будет вызван LeaveWrite().&]
[s3; &]
[s4; &]
[s5;:RWMutex`:`:LeaveWrite`(`): [@(0.0.255) void]_[* LeaveWrite]()&]
[s2;%RU-RU Покидает RWMutex.&]
[s3; &]
[s4; &]
[s5;:RWMutex`:`:EnterRead`(`): [@(0.0.255) void]_[* EnterRead]()&]
[s2;%RU-RU Войти в режиме чтения. Более одного 
потока может входить в RWMutex в режиме 
чтения. Блокируются любые потоки, 
пытающиеся войти для записи (EnterWrite), 
пока все потоки`-считыватели не покинут 
(используя LeaveRead).&]
[s3; &]
[s4; &]
[s5;:RWMutex`:`:LeaveRead`(`): [@(0.0.255) void]_[* LeaveRead]()&]
[s2;%RU-RU Покинуть режим чтения.&]
[s0; &]
[ {{10000@(113.42.0) [s0;%RU-RU [*@7;4 Класс StaticRWMutex]]}}&]
[s3; &]
[s1;:StaticRWMutex`:`:class: [@(0.0.255)3 class][3 _][*3 StaticRWMutex]&]
[s9;%RU-RU Вариант RWMutex, который может использовать
ся как статическия или глобальная 
переменная без необходимости в инициализаци
и  `-у него нет конструктора и первая 
инициализация корректно выполняется 
при вызове любого из методов. Это 
решает проблему порядка инициализации 
или многопоточной инициализации.&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Список Публичных Методов]]}}&]
[s3; &]
[s5;:StaticRWMutex`:`:Get`(`): [_^RWMutex^ RWMutex][@(0.0.255) `&]_[* Get]()&]
[s5;:StaticRWMutex`:`:operator RWMutex`&`(`): [* operator_RWMutex`&]()&]
[s2;%RU-RU Возвращает экземпляр RWMutex.&]
[s3; &]
[s4; &]
[s5;:StaticRWMutex`:`:EnterRead`(`): [@(0.0.255) void]_[* EnterRead]()&]
[s5;:StaticRWMutex`:`:LeaveRead`(`): [@(0.0.255) void]_[* LeaveRead]()&]
[s5;:StaticRWMutex`:`:EnterWrite`(`): [@(0.0.255) void]_[* EnterWrite]()&]
[s5;:StaticRWMutex`:`:LeaveWrite`(`): [@(0.0.255) void]_[* LeaveWrite]()&]
[s2;%RU-RU Вызывает соответствующие методы 
RWMutex.&]
[s0; &]
[ {{10000@(113.42.0) [s0;%RU-RU [*@7;4 Класс RWMutex`::ReadLock]]}}&]
[s3; &]
[s1;:RWMutex`:`:ReadLock`:`:class: [@(0.0.255)3 class][3 _][*3 ReadLock]&]
[s9;%RU-RU Этот гнездовой класс автоматизирует 
вызовы Mutex`::EnterRead / Mutex`::LeaveRead для блока 
кода, используя правила конструктора/дестру
ктора C`+`+. Посредством оператора[*  
StaticRWMutex`::RWMutex], может также использоваться 
со StaticRWMutex.&]
[s3;%RU-RU &]
[s0;%RU-RU &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Детали Конструктора / Деструктора]]}}&]
[s3; &]
[s5;:RWMutex`:`:ReadLock`:`:ReadLock`(RWMutex`&`): [* ReadLock]([_^RWMutex^ RWMutex][@(0.0.255) `&
]_[*@3 s])&]
[s2;%RU-RU Вызывает у [%-*@3 s].EnterRead().&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:RWMutex`:`:ReadLock`:`:`~ReadLock`(`): [@(0.0.255) `~][* ReadLock]()&]
[s2; [%RU-RU Вызывает у s.LeaveRead(), где] [*@3 s] `- параметр 
конструктора.&]
[s0; &]
[ {{10000@(113.42.0) [s0;%RU-RU [*@7;4 Класс RWMutex`::WriteLock]]}}&]
[s3; &]
[s1;:RWMutex`:`:WriteLock`:`:class: [@(0.0.255)3 class][3 _][*3 WriteLock]&]
[s9;%RU-RU [%- Этот гнездовой класс автоматизирует 
вызовы Mutex`::EnterWrite / Mutex`::LeaveLeave для блока 
кода, используя правила конструктора/дестру
ктора C`+`+. Посредством оператора][%-*  
StaticRWMutex`::RWMutex], может также использоваться 
со StaticRWMutex.&]
[s3; &]
[s0; &]
[ {{10000t/25b/25@1 [s0; [* Конструктор  / Destructor detail]]}}&]
[s3; &]
[s5;:RWMutex`:`:WriteLock`:`:WriteLock`(RWMutex`&`): [* WriteLock]([_^RWMutex^ RWMutex][@(0.0.255) `&
]_[*@3 s])&]
[s2;%RU-RU Вызывает у [%-*@3 s].EnterWrite().&]
[s3;%RU-RU &]
[s4;%RU-RU &]
[s5;:RWMutex`:`:WriteLock`:`:`~WriteLock`(`): [@(0.0.255) `~][* WriteLock]()&]
[s2; [%RU-RU Вызывает у ][%RU-RU*@3 s][%RU-RU .LeaveWrite(), где] 
[*@3 s] `- параметр конструктора.&]
[s0; ]]