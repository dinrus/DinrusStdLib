topic "Класс IpAddrInfo";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,2#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_} 
[ {{10000@(113.42.0) [s0;%RU-RU [*@7;4 Класс IpAddrInfo]]}}&]
[s3; &]
[s1;:IpAddrInfo`:`:class: [@(0.0.255)3 class][3 _][*3 IpAddrInfo]&]
[s2;%RU-RU Этот класс инкапсулирует [^http`:`/`/en`.wikipedia`.org`/wiki`/Getaddrinfo^ g
etaddrinfo] API, также предоставляя опционное 
неблокируемое поведение (с использованием 
вспомогательных потоков). Заметьте, 
что на данный момент нет доступной 
синхронизации для такого неблокируемого 
поведения (нет, напр., возможности 
выполнить select над IpAddrInfo). Также заметьте, 
что IpAddrInfo имеет некое максимальное 
число (на данный момент 256) слотов, 
используемых для одновременного 
разрешения адресов хостов, однако, 
когда это число превышено, это означает, 
что InProgress пытается поместить в слот 
запрос (и возвращает true, если недоступно, 
или запрос ещё не разрешился), поэтому, 
на стороне клиента у этого лимита 
мало влияния; а также, что клиент должен, 
как можно скорее, освободить слот, 
используя метод Clear, или деструктируя 
IpAddrInfo.&]
[s3; &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Список Публичных Методов]]}}&]
[s3; &]
[s5;:IpAddrInfo`:`:Start`(const String`&`,int`,int`): [@(0.0.255) void]_[* Start]([@(0.0.255) c
onst]_[_^String^ String][@(0.0.255) `&]_[*@3 host], [@(0.0.255) int]_[*@3 port], 
[@(0.0.255) int]_[*@3 family]_`=_FAMILY`_ANY)&]
[s2;%RU-RU Начинает разрешение адреса хоста 
[%-*@3 host] (с портом [%-*@3 port]). [%-*@3 family] может 
использоваться для сужения диапазона 
сканирования до конкретного протокола 
IP (FAMILY`_IPV4, FAMILY`_IPV6).&]
[s3;%RU-RU &]
[s4; &]
[s5;:IpAddrInfo`:`:InProgress`(`): [@(0.0.255) bool]_[* InProgress]()&]
[s2;%RU-RU Возвращает true, если разрешение 
адреса всё ещё продолжается.&]
[s3; &]
[s4; &]
[s5;:IpAddrInfo`:`:Execute`(const String`&`,int`,int`): [@(0.0.255) bool]_[* Execute]([@(0.0.255) c
onst]_[_^String^ String][@(0.0.255) `&]_[*@3 host], [@(0.0.255) int]_[*@3 port], 
[@(0.0.255) int]_[*@3 family]_`=_FAMILY`_ANY)&]
[s2;%RU-RU Разрешает адрес хоста [%-*@3 host] (с 
портом [%-*@3 port]). Это блокируемый вариант, 
возвращает после разрешения хоста. 
Возвращает true, если адрес найден. 
[%-*@3 family] может использоваться для сужения 
диапазона сканирования до конкретного 
протокола IP (FAMILY`_IPV4, FAMILY`_IPV6).&]
[s3;%RU-RU &]
[s4; &]
[s5;:IpAddrInfo`:`:GetResult`(`)const: addrinfo_`*[* GetResult]()_[@(0.0.255) const]&]
[s2;%RU-RU Возвращает итоговую [^http`:`/`/en`.wikipedia`.org`/wiki`/Getaddrinfo^ a
ddrinfo], если разрешение адреса завершено, 
и успешно, в противном случае `- NULL.&]
[s3; &]
[s4; &]
[s5;:IpAddrInfo`:`:Clear`(`): [@(0.0.255) void]_[* Clear]()&]
[s2;%RU-RU Сбрасывает IpAddrInfo в исходное состояние. 
Заметьте, что также освобождается 
слот, использовавшийся для разрешения 
запроса.&]
[s3; &]
[s4; &]
[s5;:IpAddrInfo`:`:IpAddrInfo`(`): [* IpAddrInfo]()&]
[s5;:IpAddrInfo`:`:`~IpAddrInfo`(`): [@(0.0.255) `~][* IpAddrInfo]()&]
[s2;%RU-RU Конструктор , деструктор.&]
[s3; ]]