topic "Format - форматирование текста";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,0#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_}%RU-RU 
[ {{10000@(113.42.0) [s0; [*@2;4 Format `- форматирование текста]]}}&]
[s0;*@3;4 &]
[s5;:`:`:Format`(const char`*`,const`:`:Vector`<`:`:Value`>`&`):%- [^`:`:String^ String
]_[* Format][@(64) (][@(0.0.255) const][@(64) _][@(0.0.255) char][@(64) _`*][*@3 format][@(64) , 
][@(0.0.255) const][@(64) _][^`:`:Vector^@(64) Vector][@(64) <][^`:`:Value^@(64) Value][@(64) >
`&_][*@3 args][@(64) )]&]
[s5;%- [^`:`:String^ String]_[* Format][@(64) (][@(0.0.255) const][@(64) _][@(0.0.255) char][@(64) _
`*][*@3 format][@(64) , ][^`:`:Value^@(64) Value][@(64) _][*@3 arg][*,@3 1][*@3  
][@4 `[], [^`:`:Value^@(64) Value][@(64) _][*@3 arg][*,@3 n][@4 `]...] [@(64) )]&]
[s5;:Format`(int`,const char`*`,const Vector`<Value`>`&`):%- [^String^ String]_[* Format](
[@(0.0.255) int]_[*@3 language], [@(0.0.255) const]_[@(0.0.255) char]_`*[*@3 s], 
[@(0.0.255) const]_Vector[@(0.0.255) <]Value[@(0.0.255) >`&]_[*@3 v])&]
[s5;%- [^`:`:String^ String]_[* Format][@(64) (][@(0.0.255) int][@(64) _][*@3 language][@(64) , 
][@(0.0.255) const][@(64) _][@(0.0.255) char][@(64) _`*][*@3 format][@(64) , 
][^`:`:Value^@(64) Value][@(64) _][*@3 arg][*,@3 1][*@3  ][@4 `[], [^`:`:Value^@(64) Value][@(64) _
][*@3 arg][*,@3 n][@4 `]...] [@(64) )]&]
[s2; &]
[s0; Format формирует текст вывода, основанный 
на формате [*@3 format], помещая вместо местодержат
елей действительные аргументы. Значения 
аргументов преобразуются в текст 
с помощью форматировщиков. U`+`+ задаёт 
набор стандартных форматировщиков; 
в приложениях можно свободно регистрировать
 свои собственные, для особых типов 
значений.&]
[s0; &]
[s0; Заметьте, что переменное число аргументов 
значений Value реализуется перегрузкой 
Format, до 20 параметров.&]
[s0; &]
[s0; Местодержатели начинаются с [* %] и 
имеют формат:&]
[s0; &]
[s0; [* %][*@4 `[][*@(0.0.255) команды][*@4 `]`[][*@(0.0.255) опции][*@4 `]`[][*@(0.0.255) и
д`-форматировщика][*@4 `]`[][*@(0.0.255) ``][*@4 `]]&]
[s0; &]
[s0; [*@(0.0.255) команды ]интерпретируются 
процедурой Format (а не специфичным форматировщ
иком). Каждая последовательность 
команд заканчивается символом, определяющим
 вид команды, это разграничивает её 
от опций и/или форматировщика.&]
[s0; &]
[s0; Доступные команды:&]
[s0; &]
[ {{1785:8215^ [s0; [*/@(0.0.255) position][* :]]
::= [s0; Переходит к аргументу в позиции [*/@(0.0.255) position].
 Позволяет `"реорганизовать`" порядок 
аргументов, что полезно при переводах.]
::^ [s0; [*/@(0.0.255) width][* <]]
::= [s0; Помещает результат форматировщика 
в поле с шириной [*/@(0.0.255) width] символов, 
раскладка слева.]
::^ [s0; [*/@(0.0.255) width][* >]]
::= [s0; Помещает результат форматировщика 
в поле с шириной [*/@(0.0.255) width] символов, 
раскладка справа.[@N m`_delta]]
::^ [s0; [*/@(0.0.255) width][* `=]]
::= [s0; Помещает результат форматировщика 
в поле с шириной [*/@(0.0.255) width] символов, 
раскладка по центру.]
::^ [s0; [* `[][*/@(0.0.255) text][* `]`~]]
::= [s0; Если аргумент равен [* Null], используется 
текст [*/@(0.0.255) text] вместо результата 
форматировщика.]}}&]
[s0; &]
[s0; [*@(0.0.255) ид`-форматировщика][*  ]должен 
состоять только из алфавитных (`"альфа`"`-) 
символов, в отличие от идентификаторов 
Си, цифры или `'`_`' не допускаются. Всё, 
что между командами [*@(0.0.255) команды 
]и ид`-форматировщика [*@(0.0.255) ид`-форматировщик
а], рассматривается как опции [*@(0.0.255) опции 
]и передаётся форматировщику. Заметьте, 
что [*@(0.0.255) ид`-форматировщика] зависит 
от типа значения:  одно и то же имя 
может указывать на разные форматировщики, 
в зависимости от типа значения. [*@(0.0.255) ид`-фор
матировщика] регистрочувствителен.&]
[s0; &]
[s0; Символ [* `*] в разделе опций [*@(0.0.255) опции 
]заменяется аргументом, преобразованным 
посредством AsString.&]
[s0; &]
[s0; Если [*@(0.0.255) опции ]должны содержать 
альфа`-символы, их нужно `"эскапировать`", 
используя [* `[ `]] для того, чтобы отделить 
опции от ид`-форматировщика.&]
[s0; &]
[s0; местодержатель может оканчиваться 
либо на неалфавитный символ, либо 
на [* ``]. ид`-форматировщика можно оставлять 
пустым; в этом случае Format использует 
AsString для преобразования Value в текст 
(определено в интерфейсе RichValue) `- самый 
тривиальный местодержатель, следовательно, 
[* %``].&]
[s0; &]
[s0; Хотя Format реализует все классические 
форматировщики printf, пожалуйста, обратите 
внимание на два несоответствия:&]
[s0; &]
[s0;i150;O0; Все аргументы Format должны быть 
конвертабельными (и они конвертируются 
) в Value. На позитивной стороне, Value проводит 
естественные конверсии, типа double 
`-> int, поэтому можно, например, применять 
%d для значения double.&]
[s0; &]
[s0;i150;O0; formatter`-id `"ест`" все альфа`-символы. 
Проблема только, когда алфавитный 
символ, не являющийся местодержателем, 
следует за местодержателем, например, 
%dpt `- это надо писать как %d``pt (`` разграничивае
т ид`-форматировщика).&]
[s0; &]
[s0; &]
[s0; [*/ Стандартные форматировщики]&]
[s0; &]
[s0; [* Дефолтный форматировщик]&]
[s0; &]
[s0; Если ид`-форматировщика пуст, Value 
преобразуется с помощью AsString (реализованном
 в интерфейсе RichValue).&]
[s0; &]
[s0; &]
[s0; [* Форматировщики printf]&]
[s0; &]
[s0; Поддерживается большая часть форматировщик
ов printf:&]
[s0; &]
[s0; [* c d i o x X ld li lo lx lX lld lli llo llx llX e E f g G s]&]
[s0; &]
[s0; Описание ищите в документации к printf.&]
[s0; &]
[s0; &]
[s0; [* Форматировщик Switch (Щит)]&]
[s0; &]
[s0; Это особый форматировщик чисел (зарегистрир
ованный для double, int и int64 значений). 
[*@(0.0.255) опции ]форматировщика switch содержат 
список значений и соответствующие 
тексты `- выводится текст для актуального 
аргумента. [*@(0.0.255) ид`-форматировщика] 
равен [* s].&]
[s0; &]
[s0; Формат у switch [*@(0.0.255) опции ]такой&]
[s0; &]
[s0; [*@4 `[][*@(0.0.255) modulo][* %][*@4 `]`[][*@(0.0.255) case][* :][*@(0.0.255) text];[*@4 `]...`[
][*@(0.0.255) default][*@4 `]]&]
[s0; &]
[ {{1395:8605 [s0; [*@(0.0.255) modulo]]
:: [s0; Если присутствует эта необязательная 
часть, то модуль аргумента используется 
для switch cases (`"тумблеров щита`").]
:: [s0; [*@(0.0.255) case]]
:: [s0; Числовой триггер (case).]
:: [s0; [*@(0.0.255) text]]
:: [s0; Текст для данного числового триггера.]
:: [s0; [*@(0.0.255) default]]
:: [s0; Дефолтный текст, если нет совпадений 
текста.]}}&]
[s0; &]
[s0; Заметьте, что, так как текст обычно 
содержит буквы, вся секция опций switch 
почти всегда эскапируется с помощью 
[* `[] [* `]].&]
[s0; &]
[s0; &]
[s0; [* Простые целочисленные форматировщики]&]
[s0; &]
[s0; Эти форматировщики зарегистрированы 
для значений double, int и int64.&]
[s0; &]
[ {{1426:8574h1;@(204) [s0; [*@(0.0.255) ид`-форматировщика]]
:: [s0; Описание]
::@2 [s0;%- [* month]]
:: [s0; Имя месяца прописными.]
:: [s0;%- [* Month]]
:: [s0; Имя месяца с первой заглавной, остальными 
`- прописными.]
:: [s0;%- [* MONTH]]
:: [s0; Имя месяца заглавными.]
:: [s0;%- [* mon]]
:: [s0; Сокращённое имя месяца прописными.]
:: [s0;%- [* Mon]]
:: [s0; Сокращённое имя месяца с первой заглавной, 
остальными `- прописными.]
:: [s0;%- [* MON]]
:: [s0; Сокращённое имя месяца заглавными.]
:: [s0;%- [* day]]
:: [s0; Имя дня прописными.]
:: [s0;%- [* Day]]
:: [s0; Имя дня с первой заглавной, остальными 
`- прописными.]
:: [s0;%- [* DAY]]
:: [s0; Имя дня заглавными.]
:: [s0;%- [* dy]]
:: [s0; Сокращённое имя дня прописными.]
:: [s0;%- [* Dy]]
:: [s0; Сокращённое имя дня, первая буква 
заглавная остальные `- прописные.]
:: [s0;%- [* DY]]
:: [s0; Сокращённое имя дня заглавными.]
:: [s0;%- [* tw]]
:: [s0; 12`-часовой формат модуля.]
:: [s0;%- [* a]]
:: [s0; Формат буквы, 1: a, 2: b, ... 26: z, 27: aa, ...]
:: [s0;%- [* A]]
:: [s0; Формат буквы, 1: a, 2: b, ... 26: z, 27: aa, ...]
:: [s0;%- [* r]]
:: [s0; Прописные римские цифры.]
:: [s0;%- [* R]]
:: [s0; Заглавные римские цифры.]}}&]
[s0; &]
[s0; &]
[s0; [* Расширенные форматировщики реальных 
чисел]&]
[s0; &]
[s0; Эти форматировщики эквивалентны 
обычным %g, %f and %e, но предоставляют 
дополнительные опции и реализованы 
посредством быстрой процедуры внутреннего 
преобразования U`+`+.&]
[s0; &]
[ {{2388:7612 [s0; [* m]]
:: [s0; эквивалент %g]
:: [s0; [* M]]
:: [s0; эквивалент %G (с заглавной E в экспоненте)]
:: [s0; [* me]]
:: [s0; эквивалент %e]
:: [s0; [* mE]]
:: [s0; эквивалент %E]
:: [s0; [* mf]]
:: [s0; эквивалент  %f]
::^ [s0; [* ml, Ml, mle, mlE, mlf]]
:: [s0; добавление `'l`' после `'m`' активирует 
локальную кастомизацию, основанную 
на языке. На данный момент decimal point 
заменяется на локальную версию.]}}&]
[s0; &]
[s0; Формат [* опций] альтернативных форматировщик
ов реальных чисел:&]
[s0; &]
[s0; [C@(0.0.255) `[][*C `+][C@(0.0.255) `|][/C@(0.0.255) <пробел>][C@(0.0.255) `]`[`[][C `-
][C@(0.0.255) `]`[][*/C ширина][C@(0.0.255) `]`[][C ,][C@(0.0.255) `|][*C .][C@(0.0.255) `]
`[][*/C точность][C@(0.0.255) `]`[][*C !][C@(0.0.255) `|][*C ?][C@(0.0.255) `|`|][*C `^
][C@(0.0.255) `|][*C `&][C@(0.0.255) `|][*C #][C@(0.0.255) `]..]&]
[s0;C@(0.0.255) &]
[s0;%- &]
[ {{2388:7612 [s0; [* `+]]
:: [s0; всегда приставляет перед числом 
знак]
:: [s0; [/C@(0.0.255) <space>]]
:: [s0; если число положительное, приставляет 
перед ним пробел]
:: [s0; [C@(0.0.255) `[][C `-][C@(0.0.255) `]`[][*/C ширина][C@(0.0.255) `]]]
:: [s0; требуемая минимальная ширина. Если 
форматированное число меньше, перед 
ним ставятся пробелы или нули, если 
ширина начинается с нуля. Если ширина 
отрицательная, падинг добавляется 
справа (иначе слева).]
:: [s0; [C , ][*C .]]
:: [s0; отделяет ширину от точности. `',`' устанавлива
ет десятичную точку в `',`'.]
:: [s0; [*/C точность]]
:: [s0; число полноценных цифр для %m, число 
мест после десятичной точки для %me 
и %mf.]
:: [s0; [*C !]]
:: [s0; сохранять незначащие нули в формате 
%m]
:: [s0; [*C ?]]
:: [s0; если число inf или nan, не выводить `"inf`" 
или `"nan`" и оставить вывод пустым]
:: [s0; [*C `_]]
:: [s0; не предпоставлять `'`-`' для отрицательного 
нуля]
:: [s0; [*C `^]]
:: [s0; не добавлять знак плюс к экспоненте]
:: [s0; [*C `&]]
:: [s0; сделать экспоненту минимальной `- 
1e9 вместо 1e`+09]
:: [s0; [*C #]]
:: [s0; сохранять незначащие нули и/или всегда 
выводить десятичную точку]}}&]
[s0;C@(0.0.255) &]
[s0; &]
[s0; [*/ Унаследованные форматировщики 
реальных чисел]&]
[s0; &]
[s0; [@(102) These are legacy U`+`+ formatters, superseded by %m family]&]
[s0;@(102) &]
[ {{1426:8574 [s0; [*@(102) n]]
:: [s0; [@(102) fixed decimals]]
:: [s0; [*@(102) v]]
:: [s0; [@(102) valid decimals]]
:: [s0; [*@(102) ne][@(102) , ][*@(102) ve]]
:: [s0; [@(102) force exponential notation]]
:: [s0; [*@(102) nf][@(102) , ][*@(102) vf]]
:: [s0; [@(102) force fixed notation]]
:: [s0; [*@(102) nl][@(102) , ][*@(102) vl]]
:: [s0; [@(102) locale/language`-based formatting (can use `',`' instead 
of `'.`' and add thousands separators)]]}}&]
[s0;@(102) &]
[s0;@(102) &]
[s0; [@(102) The format of ][*@(102) options][@(102)  of alternative real 
number formatters is]&]
[s0;@(102) &]
[s0; [*@(102) `[`+`]`[`[`-`]digits`]`[`@`]`[,`]`[!`]`[`^`[`+`]expdig`]]&]
[s0;@(102) &]
[ {{1426:8574 [s0; [@(102) `+]]
:: [s0; [@(102) always prepend sign (even if positive number)]]
:: [s0; [*@(102) `[`-`]digits]]
:: [s0; [@(102) number of decimals to print (negative `= left of decimal 
point, default `= 6)]]
:: [s0; [@(102) `@]]
:: [s0; [@(102) do not use thousands separators (in internationalized 
formatting ][*@(102) nl][@(102)  or ][*@(102) vl][@(102) )]]
:: [s0; [*@(102) ,]]
:: [s0; [@(102) use `',`' instead of `'.`' for decimal point]]
:: [s0; [*@(102) !]]
:: [s0; [@(102) keep insignificant zeros]]
:: [s0; [*@(102) `^]]
:: [s0; [@(102) exponent options:]&]
[ {{5000:5000 [s0; [*@(102) `+]]
:: [s0; [@(102) always prepend sign to exponent]]
:: [s0; [*@(102) expdig]]
:: [s0; [@(102) exponent padding width]]}}]}}&]
[s0;@(102) &]
[s0; &]
[s0; &]
[s0;%- [*/ Примеры стандартных форматировщиков]&]
[s0; &]
[s0;3%- &]
[ {{5073:4927 [s0;%- Format(`"[* %d, %s]`", 123, `"TEXT`")]
:: [s0;%- [C 123, TEXT]]
:: [s0;%- Format(`"[* %2:s, %1:d]`", 123, `"TEXT`")]
:: [s0;%- [C TEXT, 123]]
:: [s0;%- Format(`"[* %010d]`", 123)]
:: [s0;%- [C 0000000123]]
:: [s0;%- Format(`"[* %0`*d]`", 11, 123)]
:: [s0;%- [C 00000000123]]
:: [s0;%- Format(`"[* `|%20<d`|]`", 123)]
:: [s0;%- [C `|123                 `|]]
:: [s0;%- Format(`"[* `|%20>d`|]`", 123)]
:: [s0;%- [C `|                 123`|]]
:: [s0;%- Format(`"[* `|%20`=d`|]`", 123)]
:: [s0;%- [C `|        123         `|]]
:: [s0;%- Format(`"[* %dpt]`", 123)]
:: [s0;%- [C 123pt]]
:: [s0;%- Format(`"[* %`[empty`]`~d, %`[empty`]`~d]`", 123, Null)]
:: [s0;%- [C 123, empty]]
:: [s0;%- Format(`"[* %]`", 123)]
:: [s0;%- [C 123]]
:: [s0;%- Format(`"[* %c]`", 65)]
:: [s0;%- [C A]]
:: [s0;%- Format(`"[* %d]`", 123)]
:: [s0;%- [C 123]]
:: [s0;%- Format(`"[* %i]`", 123)]
:: [s0;%- [C 123]]
:: [s0;%- Format(`"[* %o]`", 123)]
:: [s0;%- [C 173]]
:: [s0;%- Format(`"[* %x]`", 123)]
:: [s0;%- [C 7b]]
:: [s0;%- Format(`"[* %X]`", 123)]
:: [s0;%- [C 7B]]
:: [s0;%- Format(`"[* %e]`", 1234567.89)]
:: [s0;%- [C 1.234568e`+006]]
:: [s0;%- Format(`"[* %E]`", 1234567.89)]
:: [s0;%- [C 1.234568E`+006]]
:: [s0;%- Format(`"[* %f]`", 1234567.89)]
:: [s0;%- [C 1234567.890000]]
:: [s0;%- Format(`"[* %g]`", 1234567.89)]
:: [s0;%- [C 1.23457e`+006]]
:: [s0;%- Format(`"[* %G]`", 1234567.89)]
:: [s0;%- [C 1.23457E`+006]]
:: [s0;%- Format(`"[* %m]`", 1234567.89)]
:: [s0;%- [C 1.23457e`+06]]
:: [s0;%- Format(`"[* %M]`", 1234567.89)]
:: [s0;%- [C 1.23457E`+06]]
:: [s0;%- Format(`"[* %,m]`", 1234567.89)]
:: [s0;%- [C 1,23457e`+06]]
:: [s0;%- Format(`"[* %`+m]`", 1234567.89)]
:: [s0;%- [C `+1.23457e`+06]]
:: [s0;%- Format(`"[* % m]`", 1234567.89)]
:: [s0;%- [C  1.23457e`+06]]
:: [s0;%- Format(`"[* %.10m]`", 1234567.89)]
:: [s0;%- [C 1234567.89]]
:: [s0;%- Format(`"[* %.10!m]`", 1234567.89)]
:: [s0;%- [C 1234567.890]]
:: [s0;%- Format(`"[* %.6m]`", 1234567.89)]
:: [s0;%- [C 1.23457e`+06]]
:: [s0;%- Format(`"[* %.7m]`", 1234567.89)]
:: [s0;%- [C 1234568]]
:: [s0;%- Format(`"[* %.7#m]`", 1234567)]
:: [s0;%- [C 1234567.]]
:: [s0;%- Format(`"[* %m]`", `-0.0)]
:: [s0;%- [C `-0]]
:: [s0;%- Format(`"[* %`_m]`", `-0.0)]
:: [s0;%- [C 0]]
:: [s0;%- Format(`"[* %m]`", 1e9)]
:: [s0;%- [C 1e`+09]]
:: [s0;%- Format(`"[* %`^m]`", 1e9)]
:: [s0;%- [C 1e09]]
:: [s0;%- Format(`"[* %`&m]`", 1e9)]
:: [s0;%- [C 1e`+9]]
:: [s0;%- Format(`"[* %`&`^m]`", 1e9)]
:: [s0;%- [C 1e9]]
:: [s0;%- Format(`"[* %m]`", log(`-1))]
:: [s0;%- [C `-nan]]
:: [s0;%- Format(`"[* %?m]`", log(`-1))]
:: [s0;C%- ]
:: [s0;%- Format(`"[* %.5mf]`", 1234567.89)]
:: [s0;%- [C 1234567.89000]]
:: [s0;%- Format(`"[* %.2me]`", 1234567.89)]
:: [s0;%- [C 1.23e`+06]]
:: [s0;%- Format(`"[* %.2mE]`", 1234567.89)]
:: [s0;%- [C 1.23E`+06]]
:: [s0;%- Format(`"[* %`[1:one;2:two;3:three;another`]s]`", 2)]
:: [s0;%- [C two]]
:: [s0;%- Format(`"[* %`[1:one;2:two;3:three;another`]s]`", 20)]
:: [s0;%- [C another]]
:: [s0;%- Format(`"[* %`[3%1:one;2:two;3:three;another`]s]`", 20)]
:: [s0;%- [C two]]
:: [s0;%- Format(`"[* %month]`", 6)]
:: [s0;%- [C june]]
:: [s0;%- Format(`"[* %Month]`", 6)]
:: [s0;%- [C June]]
:: [s0;%- Format(`"[* %MONTH]`", 6)]
:: [s0;%- [C JUNE]]
:: [s0;%- Format(`"[* %mon]`", 6)]
:: [s0;%- [C jun]]
:: [s0;%- Format(`"[* %Mon]`", 6)]
:: [s0;%- [C Jun]]
:: [s0;%- Format(`"[* %MON]`", 6)]
:: [s0;%- [C JUN]]
:: [s0;%- Format(`"[* %day]`", 6)]
:: [s0;%- [C saturday]]
:: [s0;%- Format(`"[* %Day]`", 6)]
:: [s0;%- [C Saturday]]
:: [s0;%- Format(`"[* %DAY]`", 6)]
:: [s0;%- [C SATURDAY]]
:: [s0;%- Format(`"[* %dy]`", 6)]
:: [s0;%- [C sa]]
:: [s0;%- Format(`"[* %Dy]`", 6)]
:: [s0;%- [C Sa]]
:: [s0;%- Format(`"[* %DY]`", 6)]
:: [s0;%- [C SA]]
:: [s0;%- Format(`"[* %tw]`", 0)]
:: [s0;%- [C 12]]
:: [s0;%- Format(`"[* %tw]`", 5)]
:: [s0;%- [C 5]]
:: [s0;%- Format(`"[* %tw]`", 15)]
:: [s0;%- [C 3]]
:: [s0;%- Format(`"[* %0tw]`", 15)]
:: [s0;%- [C 03]]
:: [s0;%- Format(`"[* %a]`", 1)]
:: [s0;%- [C a]]
:: [s0;%- Format(`"[* %a]`", 123)]
:: [s0;%- [C es]]
:: [s0;%- Format(`"[* %A]`", 1)]
:: [s0;%- [C A]]
:: [s0;%- Format(`"[* %A]`", 123)]
:: [s0;%- [C ES]]
:: [s0;%- Format(`"[* %r]`", 8)]
:: [s0;%- [C viii]]
:: [s0;%- Format(`"[* %R]`", 1231)]
:: [s0;%- [C MCCXXXI]]
:: [s0;%- Format(`"[* %]`", GetSysDate())]
:: [s0;%- [C 11/11/2011]]
:: [s0;%- Format(`"[* %]`", GetSysTime())]
:: [s0;%- [C 11/11/2011 14:44:11]]
:: [s0;%- Format(`"[* %]`", `"text`")]
:: [s0;%- [C text]]}}&]
[s0; &]
[s0; &]
[s0; &]
[s0;%- [*@3+117 Регистрация собственных форматировщик
ов]&]
[s0; &]
[s5;:Formatter`:`:typedef:%- typedef_[^String^ String]_(`*Formatter)([@(0.0.255) const][@(64) _
][^Formatting^@(64) Formatting][@(64) `&_fmt)]&]
[s2; Форматировщик должен иметь форму 
функции с единственным аргументом 
[^Formatting^ Formatting].&]
[s1; &]
[ {{10000F(128)G(128)@1 [s0; [* Форматирование]]}}&]
[s0;%- &]
[s1;:Formatting`:`:struct:%- [@(0.0.255) struct]_[* Formatting]&]
[s2; Эта структура передаёт всю информацию 
для форматирования значения аргумента 
форматировщику.&]
[s3; &]
[s4;%- &]
[s5;:Formatting`:`:language:%- [@(0.0.255) int]_[* language]&]
[s2; Язык итогового текста.&]
[s3;%- &]
[s4;%- &]
[s5;:Formatting`:`:arg:%- Value_[* arg]&]
[s2; Действительный аргумент.&]
[s3;%- &]
[s4;%- &]
[s5;:Formatting`:`:format:%- String_[* format]&]
[s2; Опции форматирования.&]
[s3;%- &]
[s4;%- &]
[s5;:Formatting`:`:id:%- String_[* id]&]
[s2; Ид форматировщика.&]
[s1; &]
[ {{10000F(128)G(128)@1 [s0; [* Функции регистрации формата]]}}&]
[s3;%- &]
[s5;:RegisterFormatter`(int`,const char`*`,Formatter`)init`_:%- [@(0.0.255) void]_[* Regi
sterFormatter]([@(0.0.255) int]_[*@3 type], [@(0.0.255) const]_[@(0.0.255) char]_`*[*@3 id],
 Formatter_[*@3 f])&]
[s2; Регистрирует форматировщик для специфичног
о типа значения [%-*@3 type]. Если [%-*@3 type] 
равен VALUE`_V, форматировщик применяется 
ко всем типам значений, если этим 
типам ещё не присвоен специальный 
форматировщик.&]
[s3;%- &]
[s4;%- &]
[s5;:RegisterNumberFormatter`(const char`*`,Formatter`)init`_:%- [@(0.0.255) void]_[* Reg
isterNumberFormatter]([@(0.0.255) const]_[@(0.0.255) char]_`*[*@3 id], 
Formatter_[*@3 f])&]
[s2; Регистрирует форматировщик для типов 
bool, int, double и int64.&]
[s3;%- &]
[s4;%- &]
[s5;:RegisterStringFormatter`(const char`*`,Formatter`)init`_:%- [@(0.0.255) void]_[* Reg
isterStringFormatter]([@(0.0.255) const]_[@(0.0.255) char]_`*[*@3 id], 
Formatter_[*@3 f])&]
[s2; Регистрирует форматировщик для типов 
String и WString.&]
[s3;%- &]
[s4;%- &]
[s5;:RegisterDateTimeFormatter`(const char`*`,Formatter`)init`_:%- [@(0.0.255) void]_[* R
egisterDateTimeFormatter]([@(0.0.255) const]_[@(0.0.255) char]_`*[*@3 id], 
Formatter_[*@3 f])&]
[s2; Регистрирует форматировщик для типов 
Date и Time.&]
[s3;%- &]
[s4;%- &]
[s5;:RegisterValueFormatter`(const char`*`,Formatter`)init`_:%- [@(0.0.255) void]_[* Regi
sterValueFormatter]([@(0.0.255) const]_[@(0.0.255) char]_`*[*@3 id], 
Formatter_[*@3 f])&]
[s2; Регистрирует форматировщик, применяемый, 
если для какого`-то типа ещё не присвоен 
форматировщик.&]
[s3; &]
[s4;%- &]
[s5;:RegisterNullFormatter`(const char`*`,Formatter`)init`_:%- [@(0.0.255) void]_[* Regis
terNullFormatter]([@(0.0.255) const]_[@(0.0.255) char]_`*[*@3 id], 
Formatter_[*@3 f])&]
[s2; Регистрирует форматировщик [%-*@3 id], 
применяемый, когда аргумент значения 
равен Void (Value()) или ErrorValue.&]
[s3; &]
[s0; ]]