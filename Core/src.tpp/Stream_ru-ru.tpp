topic "Потоки";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,0#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_}%RU-RU 
[ {{10000@(113.42.0) [s0; [*@7;4 Класс Stream]]}}&]
[s3; &]
[s1;:Stream`:`:class:%- [@(0.0.255)3 class][3 _][*3 Stream]&]
[s9; Stream `- это базовый класс всех потоков 
U`+`+.&]
[s0; Потоки U`+`+, как правило, выполняют 
две различные роли:&]
[s0;i150;O0; Базовых сырых двоичных потоков, 
в которые входит ввод и вывод текста.&]
[s0;i150;O0; Цели/источника двоичной сериализации. 
Для этого в основном нужно сохранять 
флаг, указывающий направление сериализации.
&]
[s0; &]
[s0; В то время как Stream предлагает базовый 
интерфейс для операций на основе 
потока, более специфичные операции 
обрабатываются одним из следующих 
классов, производных от Stream:&]
[s0; &]
[ {{993:993:993:993:995:996:987:1013:1016:1021f0;g33;GNl17/25r17/4t17/0b17/0@7-2 [s0; [^topic`:`/`/Core`/src`/Stream`_ru`-ru`#Stream`:`:class^1 Stream]]
::l0/25r0/25t0/15b0/15@2-1 [s0;%- ]
:: [s0;%- ]
::r/4t/0b/0 [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
::l17/25r17/4t17/0b17/0@7-2 [s0; [^topic`:`/`/Core`/src`/Stream`_ru`-ru`#StringStream`:`:class^1 StringStream]]
::l0/25r0/25t0/15b0/15@2-1 [s0;%- ]
:: [s0;%- ]
::r/4t/0b/0 [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
::l17/25r17/4t17/0b17/0@7-2 [s0; [^topic`:`/`/Core`/src`/Stream`_ru`-ru`#MemStream`:`:class^1 MemStream]]
::l0/25r0/25t0/15b0/15@2-1 [s0;%- ]
:: [s0;%- ]
::r/4t/0b/0 [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
::l17/25r17/4t17/0b17/0@7-2 [s0; [^topic`:`/`/Core`/src`/Stream`_ru`-ru`#MemReadStream`:`:class^1 MemReadStream]]
::l0/25r0/25t0/15b0/15@2-1 [s0;%- ]
:: [s0;%- ]
::r/4t/0b/0 [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
::l17/25r17/4t17/0b17/0@7-2 [s0; [^topic`:`/`/Core`/src`/Stream`_ru`-ru`#BlockStream`:`:class^1 BlockStream]]
::l0/25r0/25t0/15b0/15@2-1 [s0;%- ]
:: [s0;%- ]
::r/4t/0b/0 [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
::l17/25r17/4t17/0b17/0@7-2 [s0; [^topic`:`/`/Core`/src`/Stream`_ru`-ru`#FileStream`:`:class^1 FileStream]]
::l0/25r0/25t0/15b0/15@2-1 [s0;%- ]
:: [s0;%- ]
::r/4t/0b/0 [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
::l17/25r17/4t17/0b17/0@7-2 [s0; [^topic`:`/`/Core`/src`/Stream`_ru`-ru`#FileIn`:`:class^1 FileIn]]
::l0/25r0/25t0/15b0/15@2-1 [s0;%- ]
:: [s0;%- ]
::r/4t/0b/0 [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
::l17/25r17/4t17/0b17/0@7-2 [s0; [^topic`:`/`/Core`/src`/Stream`_ru`-ru`#FileOut`:`:class^1 FileOut]]
::l0/25r0/25t0/15b0/15@2-1 [s0;%- ]
:: [s0;%- ]
::r/4t/0b/0 [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
::l17/25r17/4t17/0b17/0@7-2 [s0; [^topic`:`/`/Core`/src`/Stream`_ru`-ru`#FileAppend`:`:class^1 FileAppend]]
::l0/25r0/25t0/15b0/15@2-1 [s0;%- ]
:: [s0;%- ]
::r/4t/0b/0 [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
::l17/25r17/4t17/0b17/0@7-2 [s0; [^topic`:`/`/Core`/src`/Stream`_ru`-ru`#SizeStream`:`:class^1 SizeStream]]
::l0/25r0/25t0/15b0/15@2-1 [s0;%- ]
:: [s0;%- ]
::r/4t/0b/0 [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
::l17/25r17/4t17/0b17/0@7-2 [s0; [^topic`:`/`/Core`/src`/Stream`_ru`-ru`#CompareStream`:`:class^1 CompareStream]]
::l0/25r0/25t0/15b0/15@2-1 [s0;%- ]
:: [s0;%- ]
::r/4t/0b/0 [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]
:: [s0; ]}}&]
[s3; &]
[s0; &]
[s0; Чтобы достичь оптимальной производительнос
ти от операций буферированного потока, 
у наиболее частых операций несколько 
более сложная реализация, требующая 
надлежащего определения виртуальных 
методов, так как они должны точно 
отрегулировать некоторые протекционированн
ые члены Stream. Следовательно, реализацию 
некоего метода можно рассматривать 
как часть определения интерфейса:&]
[s0; &]
[s0; [*C@5 void  Stream`::Put(int c)]&]
[s0; [*C@5 `{]&]
[s0; [*C@5 -|if(ptr < wrlim)]&]
[s0; [*C@5 -|-|`*ptr`+`+ `= c;]&]
[s0; [*C@5 -|else]&]
[s0; [*C@5 -|-|`_Put(c);]&]
[s0; [*C@5 `}]&]
[s0;*C@5 &]
[s0; [*C@5 int  Stream`::Term()]&]
[s0; [*C@5 `{]&]
[s0; [*C@5 -|return ptr < rdlim ? `*ptr : `_Term();]&]
[s0; [*C@5 `}]&]
[s0;*C@5 &]
[s0; [*C@5 int  Stream`::Get()]&]
[s0; [*C@5 `{]&]
[s0; [*C@5 -|return ptr < rdlim ? `*ptr`+`+ : `_Get();]&]
[s0; [*C@5 `}]&]
[s0;*C@5 &]
[s0; [*C@5 int64 Stream`::GetPos() const]&]
[s0; [*C@5 `{]&]
[s0; [*C@5 -|return dword(ptr `- buffer) `+ pos;]&]
[s0; [*C@5 `}]&]
[s0; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0; [* Протекционированные члены]]}}&]
[s3;%- &]
[s5;:Stream`:`:pos:%- [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[* pos]&]
[s6;%- Protected.&]
[s2; Позиция буфера в потоке.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:buffer:%- [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:byte`:`:typedef^ b
yte]_`*[* buffer]&]
[s6; Protected.&]
[s2; Указатель на начало буфера.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:ptr:%- [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:byte`:`:typedef^ b
yte]_`*[* ptr]&]
[s6; Protected.&]
[s2; Указатель на текущий вводимый/выводимый 
байт.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:rdlim:%- [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:byte`:`:typedef^ b
yte]_`*[* rdlim]&]
[s6; Protected.&]
[s2; Предел чтения. Метод [* Get] возвращает 
значения из буфера, пока [* ptr < rdlim].&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:wrlim:%- [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:byte`:`:typedef^ b
yte]_`*[* wrlim]&]
[s6; Protected.&]
[s2; Предел записи. Метод [* Put] возвращает 
значения из буфера, пока [* ptr < wrlim].&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:`_Put`(int`):%- [@(0.0.255) virtual] [@(0.0.255) void]_[* `_Put]([@(0.0.255) i
nt]_[*@3 w])&]
[s2; Вызывается методом [* Put] в случае, когда 
выводимый байт не может быть сохранён 
в буфере ([* ptr >`= wrlim]). Если Stream намерен 
использовать буферирование, этим 
методом следует настроить [* buffer], [* ptr] 
и [* wrlim].&]
[s7; [%-*C@3 w]-|Сохраняемый байт.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:`_Term`(`):%- [@(0.0.255) virtual] [@(0.0.255) int]_[* `_Term]()&]
[s2; Вызывается методом [* Term] в случае, 
когда вводимого байта нет в буфере 
([* ptr >`= rdlim]).Если Stream намерен использовать 
буферирование, этим методом следует 
настроить [* buffer], [* ptr] и [* rdlim].&]
[s7; [*/ Возвратное значение]-|Значение в 
текущей позиции в потоке. Текущая 
позиция не продвигается.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:`_Get`(`):%- [@(0.0.255) virtual] [@(0.0.255) int]_[* `_Get]()&]
[s2; Вызывается методом [* Get] в случае, когда 
вводимого байта нет в буфере ([* ptr >`= 
rdlim]). Если Stream намерен использовать 
буферирование, этим методом следует 
настроить [* buffer], [* ptr] и [* rdlim].&]
[s7; [*/ Возвратное значение]-|Значение, считанное 
из потока.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:`_Put`(const void`*`,dword`):%- [@(0.0.255) virtual] 
[@(0.0.255) void]_[* `_Put]([@(0.0.255) const]_[@(0.0.255) void]_`*[*@3 data], 
[_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:dword`:`:typedef^ dword
]_[*@3 size])&]
[s2; Прямо вызывается методом [* Put]. Записывает 
блок двоичных данных.&]
[s7; [%-*C@3 data]-|Указатель на данные.&]
[s7; [%-*C@3 size]-|Размер.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:`_Get`(void`*`,dword`):%- [@(0.0.255) virtual] [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:dword`:`:typedef^ d
word]_[* `_Get]([@(0.0.255) void]_`*[*@3 data], [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:dword`:`:typedef^ d
word]_[*@3 size])&]
[s2; Прямо вызывается методом [* Get]. &]
[s7; [%-*C@3 data]-|Указатель на данные.&]
[s7; [%-*C@3 size]-|Размер.&]
[s7; &]
[ {{10000F(128)G(128)@1 [s0; [* Детали Конструктора]]}}&]
[s3; &]
[s5;:Stream`:`:Stream`(`):%- [* Stream]()&]
[s2; Дефолтный конструктор. Устанавливает 
поток в режим сериализации Loading и 
отступы нулевого уровня (zero level indentation). 
Все защищённые переменные устанавливаются 
в 0 / NULL.&]
[s3;%- &]
[s4;%- &]
[s5;:Stream`:`:Stream`(const Stream`&`):%- [* Stream]([@(0.0.255) const]_[* Stream][@(0.0.255) `&
]_[*@3 s])&]
[s2; Дефолтный копи`-конструктор.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:`~Stream`(`):%- [@(0.0.255) `~][* Stream]()&]
[s2; Дефолтный деструктор.&]
[s3;%- &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0; [* Список Публичных Членов: Raw Operations]]}}&]
[s3;%- &]
[s5;:Stream`:`:Seek`(int64`):%- [@(0.0.255) virtual] [@(0.0.255) void]_[* Seek]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 pos])&]
[s2; Перемещает к указанной позиции.&]
[s7; [%-*C@3 pos]-|Позиция.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:Stream`:`:SetVersion`(int`):%- [@(0.0.255) void]_[* SetVersion]([@(0.0.255) int
]_[*@3 ver])&]
[s2; Устанавливает произвольное число 
[%-*@3 ver] потоку. Код`-клиент может использовать 
его любым образом, но основное назначение 
`- сохранении информации о версии 
при сериализации.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:Stream`:`:GetVersion`(`)const:%- [@(0.0.255) int]_[* GetVersion]()_[@(0.0.255) c
onst]&]
[s2; Считывает число, установленное SetVersion.&]
[s3;%- &]
[s4;%- &]
[s5;:Stream`:`:GetSize`(`)const:%- [@(0.0.255) virtual] [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[* GetSize]()_[@(0.0.255) const]&]
[s7; [* Возвратное значение]-|Размер потока.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:SetSize`(int64`):%- [@(0.0.255) virtual] [@(0.0.255) void]_[* SetSize]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 size])&]
[s2; Меняет размер потока.&]
[s7; [%-*C@3 size]-|Новый размер.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Flush`(`):%- [@(0.0.255) virtual] [@(0.0.255) void]_[* Flush]()&]
[s2; Если у потока имеются внутренние 
буферы (как у [* FileStream]), записывает их 
в OS.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Close`(`):%- [@(0.0.255) virtual] [@(0.0.255) void]_[* Close]()&]
[s2; Закрывает поток.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:IsOpen`(`)const:%- [@(0.0.255) virtual] [@(0.0.255) bool]_[* IsOpen]()_[@(0.0.255) c
onst]_`=_[@3 0]&]
[s7; [* Возвратное значение]-|true, если поток 
открыт.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:IsError`(`)const:%- [@(0.0.255) bool]_[* IsError]()_[@(0.0.255) const]&]
[s7; [* Возвратное значение]-|true, если с момента 
открытия потока в течении операции 
с ним имелись ошибки или с последнего 
вызова [* ClearError] `- код ошибки не равен 
нулю.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:IsOK`(`)const:%- [@(0.0.255) bool]_[* IsOK]()_[@(0.0.255) const]&]
[s7; [*/ Возвратное значение]-|!IsError().&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:SetError`(int`):%- [@(0.0.255) void]_[* SetError]([@(0.0.255) int]_[*@3 c]_`=_
[@3 0])&]
[s2; Устанавливает код ошибки потока.&]
[s7; [%-*C@3 c]-|Код ошибки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:SetLastError`(`):%- [@(0.0.255) void]_[* SetLastError]()&]
[s2; Устанавливает ошибку потока в последнюю, 
специфичную для ОС (получаемую, напр., 
вызовом GetLastError в Win32 или в errno в Posix). 
Эту ошибку может интерпретировать 
функция GetErrorMessage.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:GetError`(`)const:%- [@(0.0.255) int]_[* GetError]()_[@(0.0.255) const]&]
[s2; Возвращает текущий код ошибки. Ноль 
означает отсутствие ошибки.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:Stream`:`:GetErrorText`(`)const:%- [_^Upp`:`:String^ String]_[* GetErrorText](
)_[@(0.0.255) const]&]
[s2; Возвращает текстовое описание последней 
ошибки.&]
[s3;%- &]
[s4;%- &]
[s5;:Stream`:`:ClearError`(`):%- [@(0.0.255) void]_[* ClearError]()&]
[s2; Очищает код ошибки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:GetPos`(`)const:%- [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[* GetPos]()_[@(0.0.255) const]&]
[s7; [*/ Возвратное значение]-|Текущее положение 
в потоке.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:GetLeft`(`)const:%- [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[* GetLeft]()_[@(0.0.255) const]&]
[s7; [*/ Возвратное значение]-|Байты между 
текущей позицией и концом потока 
`- эквивалентно GetSize() `- GetPos().&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:SeekEnd`(int64`):%- [@(0.0.255) void]_[* SeekEnd]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 rel]_`=_[@3 0])&]
[s2; Устанавливает текущую позицию в 
потоке относительно его конца. То 
же, что и Seek(GetSize() `+ rel).&]
[s7; [%-*C@3 rel]-|Позиция`- должна быть меньше 
или равна нулю.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:SeekCur`(int64`):%- [@(0.0.255) void]_[* SeekCur]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 rel])&]
[s2; Устанавливает текущую позицию в 
потоке относительно текущей. То же, 
что и Seek(GetPos() `+ rel).&]
[s7; [%-*C@3 rel]-|Относительное смещение.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:IsEof`(`):%- [@(0.0.255) bool]_[* IsEof]()&]
[s2; Больше не осталось в потоке байтов 
для чтения. Также равен true при ошибке.&]
[s3;%- &]
[s4;%- &]
[s5;:Stream`:`:Put`(int`):%- [@(0.0.255) void]_[* Put]([@(0.0.255) int]_[*@3 c])&]
[s2; Помещает в поток вывода единичный 
байт.&]
[s7; [%-*C@3 c]-|Байт.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Term`(`):%- [@(0.0.255) int]_[* Term]()&]
[s5;:Stream`:`:Peek`(`):%- [@(0.0.255) int]_[* Peek]()&]
[s2; Берёт байт из потока не изменяя текущего 
положения. Если в вводном потоке уже 
нет байтов или случилась ошибка, возвращаетс
я отрицательное значение.&]
[s3;%- &]
[s4;%- &]
[s5;:Stream`:`:Get`(`):%- [@(0.0.255) int]_[* Get]()&]
[s2; Читает единичный байт из вводного 
потока, перемещая текущее положение. 
Если в вводном потоке уже нет байтов 
или случилась ошибка, возвращается 
отрицательное значение&]
[s7; [*/ Возвратное значение]-|Байт, считанный 
из вводного потока.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:PeekPtr`(int`):%- [@(0.0.255) const]_[_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:byte`:`:typedef^ b
yte]_`*[* PeekPtr]([@(0.0.255) int]_[*@3 size]_`=_[@3 1])&]
[s2; Это специальный оптимизационный 
метод; может возвращать указатель 
на данные [%-*@3 size] байтов в текущей позиции 
в потоке, но может вернуть и NULL `- в 
таком случае нужно использовать Get, 
чтобы загрузить данные. PeekPtr не продвигает 
вперёд позицию, для этого нужно использовать
 один из методов Seek.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:GetPtr`(int`):%- [@(0.0.255) const]_[_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:byte`:`:typedef^ b
yte]_`*[* GetPtr]([@(0.0.255) int]_[*@3 size]_`=_[@3 1])&]
[s2; Это специальный оптимизационный 
метод; может возвращать указатель 
на данные [%-*@3 size] байтов в текущей позиции 
в потоке, но может вернуть и NULL `- в 
таком случае нужно использовать Get, 
чтобы загрузить данные. В отличие 
от PeekPtr, он продвигает поток на [%-*@3 size].&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:PutPtr`(int`):%- [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:byte`:`:typedef^ b
yte]_`*[* PutPtr]([@(0.0.255) int]_[*@3 size]_`=_[@3 1])&]
[s2; Это специальный оптимизационный 
метод; может возвращать записываемый 
указатель, куда можно записать выводные 
данные [%-*@3 size] байтов, но может вернуть 
и NULL `- в таком случае данные нужно 
выводить с помощью Put. Продвигает 
поток на [%-*@3 size].&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:GetSzPtr`(int`&`):%- [@(0.0.255) const]_[_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:byte`:`:typedef^ b
yte]_`*[* GetSzPtr]([@(0.0.255) int`&]_[*@3 size])&]
[s2; Это специальный оптимизационный 
метод; возвращает указатель на данные 
в текущей позиции потока, устанавливает 
[%-*@3 size] в максимальное возможное количество 
байтов, которое можно считать из этого 
указателя, и продвигает поток на этот 
размер. [%-*@3 size] можно установить в ноль, 
в таком случае поток нужно читать 
другим способом (напр., Get).&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Put`(const void`*`,int`):%- [@(0.0.255) void]_[* Put]([@(0.0.255) const]_[@(0.0.255) v
oid]_`*[*@3 data], [@(0.0.255) int]_[*@3 size])&]
[s2; Записывает блок сырых двоичных данных 
в поток вывода.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Get`(void`*`,int`):%- [@(0.0.255) int]_[* Get]([@(0.0.255) void]_`*[*@3 data],
 [@(0.0.255) int]_[*@3 size])&]
[s2; Читает максимум [%-*@3 size] байтов из потока 
в [%-*@3 data]. Возвращает число действительно 
считанных байтов.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Get`(int`):%- [_^String^ String]_[* Get]([@(0.0.255) int]_[*@3 size])&]
[s2; Читает максимум [%-*@3 size] байтов из потока 
ввода и возвращает итог как String.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:GetAll`(int`):%- [_^String^ String]_[* GetAll]([@(0.0.255) int]_[*@3 size])&]
[s2; Читает ровно [%-*@3 size] байтов из вводного 
потока и возвращает итог как String. 
Если осталось недостаточно байтов, 
возвращает String`::GetVoid(). Заметьте, что 
[%-*@3 size] is large (на данный момент > 4MB), функция 
считывает результат порциями, чтобы 
избежать проблем с повреждёнными 
потоками, напр., в ситуациях, когда 
[%-*@3 size], полученный из потока, повреждён 
и слишком велик, а размещение такого 
количества памяти вызовет ситуацию 
нехватки памяти.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:Stream`:`:Skip`(int`):%- [@(0.0.255) int]_[* Skip]([@(0.0.255) int]_[*@3 size])&]
[s2; [%- Пропускает ][%-*@3 size] байтов в вводном 
потоке Stream. Похоже на SeekCur([%-*@3 size]), однако 
работает с потоками, которые не поддерживают
 перемещение в них (seeking). Возвращает 
число реально пропущенных байтов 
(может быть меньше, чем нужно, из`-за 
КФ (EOF).&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:GetAll`(void`*`,int`):%- [@(0.0.255) bool]_[* GetAll]([@(0.0.255) void]_`*[*@3 d
ata], [@(0.0.255) int]_[*@3 size])&]
[s2; Считывает [%-*@3 size] байтов из потока 
в память по [%-*@3 data]. Если в потоке недостаточно
 данных, вызывается LoadError (который, 
в свою очередь, может выводить исключение). 
Возвращает true, если было считано требуемое 
число байтов.&]
[s3;%- &]
[s4;%- &]
[s5;:Stream`:`:Put64`(const void`*`,int64`):%- [@(0.0.255) void]_[* Put64]([@(0.0.255) cons
t]_[@(0.0.255) void]_`*[*@3 data], [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 size])&]
[s2; Записывает блок сырых двоичных данных 
в поток вывода, в отличие от обычного 
Put, размер блока болжен быть больше 
2 ГБ, если ЦПБ (CPU) 64`-битный.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Get64`(void`*`,int64`):%- [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[* Get64]([@(0.0.255) void]_`*[*@3 data], [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 size])&]
[s2; Считывает максимиум [%-*@3 size] байтов 
из потока в [%-*@3 data]. Возвращает число 
действительно считанных байтов. В 
отличие от обычного Get, размер блока 
может быть больше чем 2 ГБ, iесли ЦПБ 
(CPU) 64`-битный.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:GetAll64`(void`*`,int64`):%- [@(0.0.255) bool]_[* GetAll64]([@(0.0.255) void
]_`*[*@3 data], [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 size])&]
[s2; Считывает [%-*@3 size] байтов из потока 
в память по [%-*@3 data]. Если в потоке недостаточно
 данных, вызывается LoadError (который, 
в свою очередь, может выводить исключение). 
Возвращает true, еслибыло считано требуемое 
число байтов. В отличие от обычного 
Get, размер блока может быть больше 
чем 2 ГБ, если ЦПБ (CPU) 64`-битный.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:Stream`:`:Get`(Upp`:`:Huge`&`,size`_t`):%- [_^size`_t^ size`_t]_[* Get]([_^Upp`:`:Huge^ H
uge][@(0.0.255) `&]_[*@3 h], [_^size`_t^ size`_t]_[*@3 size])&]
[s2; Считывает данные в [%-*@3 h], возвращает 
считанный размер.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:Stream`:`:GetAll`(Upp`:`:Huge`&`,size`_t`):%- [@(0.0.255) bool]_[* GetAll]([_^Upp`:`:Huge^ H
uge][@(0.0.255) `&]_[*@3 h], [_^size`_t^ size`_t]_[*@3 size])&]
[s2; Считывает данные в [%-*@3 h], возвращает 
считанный размер. Если в потоке недостаточно
 данных, вызывается LoadError (это, в свою 
очередь, может вывести исключение).&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:LoadThrowing`(`):%- [@(0.0.255) void]_[* LoadThrowing]()&]
[s2; Устанавливает поток в режим, который 
выводит исключение LoadingError, когда 
вызывается LoadError. Этот режим типичен 
для потока при сериализации.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:LoadError`(`):%- [@(0.0.255) void]_[* LoadError]()&]
[s2; Выполняет SetError(ERROR`_LOADING`_FAILED). Если 
Stream установлен в режим LoadThrowing (методом 
LoadThrowing()),то выводится исключение 
LoadingError.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Get8`(`):%- [@(0.0.255) int]_[* Get8]()&]
[s2; Считывает один байт из потока. Если 
в потоке недостаточно данных, вызывается 
LoadError (который, в свою очередь, может 
вывести исключение) `- в этом отличие 
от метода Get().&]
[s7; [*/ Возвратное значение]-|Байт из потока 
или `-1.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Get16`(`):%- [@(0.0.255) int]_[* Get16]()&]
[s2; Читает из потока 16`-битное значение 
в специфичном для платформы формате 
(либо в little`-endian, либо в big`-endian). Если 
в потоке недостаточно данных, вызывается 
LoadError (который, в свою очередь, может 
вывести исключение) и возвращает 
`-1.&]
[s7; [*/ Возвратное значение]-|16`-битное значение.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Get32`(`):%- [@(0.0.255) int]_[* Get32]()&]
[s2; Читает из потока 32`-битное значение 
в специфичном для платформы формате 
(либо в little`-endian, либо в big`-endian). Если 
в потоке недостаточно данных, вызывается 
LoadError (который, в свою очередь, может 
вывести исключение) и возвращает 
`-1 (но это такое же полноценное возвратное 
значение).&]
[s7; [*/ Возвратное значение]-|32`-битное значение.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Get64`(`):%- [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[* Get64]()&]
[s2; Читает из потока 64`-битное значение 
в специфичном для платформы формате 
(либо в little`-endian, либо в big`-endian). Если 
в потоке недостаточно данных, вызывается 
LoadError (который, в свою очередь, может 
вывести исключение) и возвращает 
`-1 (но это такое же полноценное возвратное 
значение).&]
[s7; [*/ Возвратное значение]-|64`-битное значение.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Get16le`(`):%- [@(0.0.255) int]_[* Get16le]()&]
[s2; Читает из потока 16`-битное значение 
в режиме little`-endian. Если в потоке недостаточно
 данных, вызывается LoadError (который, 
в свою очередь, может вывести исключение) 
и возвращает `-1.&]
[s7; [*/ Возвратное значение]-|16`-битное значение.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Get32le`(`):%- [@(0.0.255) int]_[* Get32le]()&]
[s2; Читает из потока 32`-битное значение 
в режиме little`-endian. Если в потоке недостаточно
 данных, вызывается LoadError (который, 
в свою очередь, может вывести исключение) 
и возвращает `-1 (но это такое же полноценное 
возвратное значение).&]
[s7; [*/ Возвратное значение]-|32`-битное значение.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Get64le`(`):%- [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[* Get64le]()&]
[s2; Читает из потока 64`-битное значение 
в режиме little`-endian. Если в потоке недостаточно
 данных, вызывается LoadError (который, 
в свою очередь, может вывести исключение) 
и возвращает `-1 (но это такое же полноценное 
возвратное значение).&]
[s7; [*/ Возвратное значение]-|64`-битное значение.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Get16be`(`):%- [@(0.0.255) int]_[* Get16be]()&]
[s2; Читает из потока 16`-битное значение 
в режиме big`-endian. Если в потоке недостаточно 
данных, вызывается LoadError (который, 
в свою очередь, может вывести исключение) 
и возвращает `-1.&]
[s7; [*/ Возвратное значение]-|16`-битное значение.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Get32be`(`):%- [@(0.0.255) int]_[* Get32be]()&]
[s2; Читает из потока 32`-битное значение 
в режиме big`-endian. Если в потоке недостаточно 
данных, вызывается LoadError (который, 
в свою очередь, может вывести исключение) 
и возвращает `-1 (но это такое же полноценное 
возвратное значение).&]
[s7; [*/ Возвратное значение]-|32`-битное значение.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Get64be`(`):%- [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[* Get64be]()&]
[s2; Читает из потока 64`-битное значение 
в режиме big`-endian. Если в потоке недостаточно 
данных, вызывается LoadError (который, 
в свою очередь, может вывести исключение) 
и возвращает `-1 (но это такое же полноценное 
возвратное значение).&]
[s7; [*/ Возвратное значение]-|64`-битное значение.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:GetLine`(`):%- [_^String^ String]_[* GetLine]()&]
[s2; Читает из потока одну строку. Строка 
разграничивается символом `'`\n`' или 
концом файла (или ошибкой). Символы 
`'`\r`' игнорируются.&]
[s7; [*/ Возвратное значение]-|Строка из потока.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:GetUtf8`(`):%- [@(0.0.255) int]_[* GetUtf8]()&]
[s2; Читает из потока единичное значение 
в кодировке Utf8.&]
[s7; [*/ Возвратное значение]-|Значение в 
Utf`-8.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Put16`(word`):%- [@(0.0.255) void]_[* Put16]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:word`:`:typedef^ w
ord]_[*@3 q])&]
[s2; Записывает 16`-битное значение [%- q в 
специфичном для платформы формате 
(либо в] little`-endian, либо в big`-endian).&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Put32`(dword`):%- [@(0.0.255) void]_[* Put32]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:dword`:`:typedef^ d
word]_[*@3 q])&]
[s2; Записывает 32`-битное значение [%- q в 
специфичном для платформы формате 
(либо в] little`-endian, либо в big`-endian).&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Put64`(int64`):%- [@(0.0.255) void]_[* Put64]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 q])&]
[s2; Записывает 64`-битное значение [%- q в 
специфичном для платформы формате 
(либо в] little`-endian, либо в big`-endian).&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Put16le`(word`):%- [@(0.0.255) void]_[* Put16le]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:word`:`:typedef^ w
ord]_[*@3 q])&]
[s2; Записывает 16`-битное значение [%-*@3 q 
]в режиме little`-endian.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Put32le`(dword`):%- [@(0.0.255) void]_[* Put32le]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:dword`:`:typedef^ d
word]_[*@3 q])&]
[s2; Записывает 32`-битное значение [%-*@3 q 
]в режиме little`-endian.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Put64le`(int64`):%- [@(0.0.255) void]_[* Put64le]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 q])&]
[s2; Записывает 64`-битное значение [%-*@3 q 
]в режиме little`-endian.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Put16be`(word`):%- [@(0.0.255) void]_[* Put16be]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:word`:`:typedef^ w
ord]_[*@3 q])&]
[s2; Записывает 16`-битное значение [%-*@3 q 
]в режиме big`-endian.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Put32be`(dword`):%- [@(0.0.255) void]_[* Put32be]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:dowrd`:`:typedef^ d
word]_[*@3 q])&]
[s2; Записывает 32`-битное значение [%-*@3 q 
]в режиме big`-endian.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Put64be`(int64`):%- [@(0.0.255) void]_[* Put64be]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 q])&]
[s2; Записывает 64`-битное значение [%-*@3 q 
]в режиме big`-endian.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:PutUtf8`(int`):%- [@(0.0.255) void]_[* PutUtf8]([@(0.0.255) int]_[*@3 c])&]
[s2; Помещает в поток единичное значение 
в Utf8.&]
[s7; [%-*C@3 c]-|Значение.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Put`(const char`*`):%- [@(0.0.255) void]_[* Put]([@(0.0.255) const]_[@(0.0.255) c
har]_`*[*@3 s])&]
[s2; Записывает в поток строку с нулевым 
окончанием (ноль не записывается).&]
[s7; [%-*C@3 s]-|Записываемая строка.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Put`(const String`&`):%- [@(0.0.255) void]_[* Put]([@(0.0.255) const]_[_^String^ S
tring][@(0.0.255) `&]_[*@3 s])&]
[s2; Записывает в поток String. String иожет 
содержать символы нулей.&]
[s7; [%-*C@3 s]-|Записываемая строка.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Put`(int`,int`):%- [@(0.0.255) void]_[* Put]([@(0.0.255) int]_[*@3 c], 
[@(0.0.255) int]_[*@3 count])&]
[s2; Записывает единичный байт в поток 
требуемое количество раз.&]
[s7; [%-*C@3 c]-|Записываемый байт.&]
[s7; [%-*C@3 count]-|Число повторов.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Put0`(int`):%- [@(0.0.255) void]_[* Put0]([@(0.0.255) int]_[*@3 count])&]
[s2; Записывает в поток нулевой байт требуемое 
количество раз. Эта вариация предоставляетс
я главным образом из`-за того, что 
Put(0, count) вызывает неоднозначность, 
так как 0 рассматривается также и 
как указатель NULL.&]
[s7; [%-*C@3 count]-|Число повторов.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:PutCrLf`(`):%- [@(0.0.255) void]_[* PutCrLf]()&]
[s2; Записывает в поток пару CR`-LF.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:PutEol`(`):%- [@(0.0.255) void]_[* PutEol]()&]
[s2; Записывает в поток специфичный для 
платформы `"конец строки`" Это пара 
CR`-LF на платформе Win32, либо LF на платформе 
Posix.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`<`<`(EOLenum`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operator<<](
EOLenum)&]
[s2; Аналогично PutEol. EOLenum содержит единственное 
значение, EOL (КС, конец строки). Этот 
оператор даёт более удобный способ 
выразить PutEol в цепочке операторов 
<<.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:PutLine`(const char`*`):%- [@(0.0.255) void]_[* PutLine]([@(0.0.255) const]_
[@(0.0.255) char]_`*[*@3 s])&]
[s2; Записывает в поток строку `- эквивалентно 
Put(s); PutEol();&]
[s7; [%-*C@3 s]-|Строка с нулевым окончанием.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:PutLine`(const String`&`):%- [@(0.0.255) void]_[* PutLine]([@(0.0.255) const
]_[_^String^ String][@(0.0.255) `&]_[*@3 s])&]
[s2; Записывает строчку в поток `- эквивалентно 
Put(s); PutEol();&]
[s7; [%-*C@3 s]-|String.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Put`(Stream`&`,int64`,dword`):%- [@(0.0.255) void]_[* Put]([_^Stream^ Stream
][@(0.0.255) `&]_[*@3 s], [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 size]_`=_INT64`_MAX, [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:dword`:`:typedef^ d
word]_[*@3 click]_`=_[@3 4096])&]
[s2; Записывает контент из указанного 
потока в этот поток.&]
[s7; [%-*C@3 s]-|Вводный поток.&]
[s7; [%-*C@3 size]-|Максимальное число записываемых 
байтов. Дефолтное значение INT64`_MAX 
означает,что записывается весь вводный 
поток, от текущей позиции до конца.&]
[s7; [%-*C@3 click]-|Размер буфера, используемого 
для копирования.&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0; [* Список Публичных Членов: Поддержка 
Сериализации]]}}&]
[s3;%- &]
[s5;:Stream`:`:SetLoading`(`):%- [@(0.0.255) void]_[* SetLoading]()&]
[s2; Устанавливает поток в режим загрузки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:SetStoring`(`):%- [@(0.0.255) void]_[* SetStoring]()&]
[s2; Устанавливает поток в режим сохранения.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:IsLoading`(`)const:%- [@(0.0.255) bool]_[* IsLoading]()_[@(0.0.255) const]&]
[s2; Возвращает true, если поток находится 
в режиме загрузки.&]
[s3;%- &]
[s4;%- &]
[s5;:Stream`:`:IsStoring`(`)const:%- [@(0.0.255) bool]_[* IsStoring]()_[@(0.0.255) const]&]
[s2; Возвращает true, если поток находится 
в режиме сохранения.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:Stream`:`:SerializeRaw`(Upp`:`:byte`*`,Upp`:`:int64`):%- [@(0.0.255) void]_
[* SerializeRaw]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:byte`:`:typedef^ b
yte]_`*[*@3 data], [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 count])&]
[s2; Сериализует сырые 8`-битные данные. 
Может вызывать LoadError, если данных 
для загрузки недостаточно. Данные 
всегда сохраняются в режиме little`-endian 
(на системах BE при необходимости выполняется
 преобразование).&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:Stream`:`:SerializeRaw`(Upp`:`:word`*`,Upp`:`:int64`):%- [@(0.0.255) void]_
[* SerializeRaw]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:word`:`:typedef^ w
ord]_`*[*@3 data], [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 count])&]
[s2; Сериализует сырые 16`-битные данные. 
Может вызывать LoadError, если данных 
для загрузки недостаточно. Данные 
всегда сохраняются в режиме little`-endian 
(на системах BE при необходимости выполняется
 преобразование).&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:Stream`:`:SerializeRaw`(Upp`:`:dword`*`,Upp`:`:int64`):%- [@(0.0.255) void]_
[* SerializeRaw]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:dword`:`:typedef^ d
word]_`*[*@3 data], [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 count])&]
[s2; Сериализует сырые 32`-битные данные. 
Может вызывать LoadError, если данных 
для загрузки недостаточно. Данные 
всегда сохраняются в режиме little`-endian 
(на системах BE при необходимости выполняется
 преобразование).&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:Stream`:`:SerializeRaw`(Upp`:`:uint64`*`,Upp`:`:int64`):%- [@(0.0.255) void
]_[* SerializeRaw]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:uint64`:`:typedef^ u
int64]_`*[*@3 data], [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 count])&]
[s2; Сериализует сырые 64`-битные данные. 
Может вызывать LoadError, если данных 
для загрузки недостаточно. Данные 
всегда сохраняются в режиме little`-endian 
(на системах BE при необходимости выполняется
 преобразование).&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:SerializeRLE`(byte`*`,int`):%- [@(0.0.255) void]_[* SerializeRLE]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:byte`:`:typedef^ b
yte]_`*[*@3 data], [@(0.0.255) int]_[*@3 count])&]
[s2; Сериализует сырые данные, используя 
простое сжатие RLE.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`%`(bool`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operator%]([@(0.0.255) b
ool`&]_[*@3 d])&]
[s2; Сериализует булеву переменную [%-*@3 d]. 
Может вызывать LoadError, если данных 
для загрузки недостаточно. Возвращает 
[* `*this] для сцепки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`%`(char`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operator%]([@(0.0.255) c
har`&]_[*@3 d])&]
[s2; Сериализует переменную типа char [%-*@3 d]. 
Может вызывать LoadError, если данных 
для загрузки недостаточно. Возвращает 
[* `*this] для сцепки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`%`(signed char`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operator
%]([@(0.0.255) signed]_[@(0.0.255) char`&]_[*@3 d])&]
[s2; Сериализует переменную типа signed 
char [%-*@3 d]. Может вызывать LoadError, если 
данных для загрузки недостаточно. 
Возвращает [* `*this] для сцепки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`%`(unsigned char`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operat
or%]([@(0.0.255) unsigned]_[@(0.0.255) char`&]_[*@3 d])&]
[s2; Сериализует переменную типа unsigned 
char [%-*@3 d]. Может вызывать LoadError, если 
данных для загрузки недостаточно. 
Возвращает [* `*this] для сцепки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`%`(short`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operator%]([@(0.0.255) s
hort`&]_[*@3 d])&]
[s2; Сериализует переменную типа short [%-*@3 d]. 
Может вызывать LoadError, если данных 
для загрузки недостаточно. Возвращает 
[* `*this] for chaining.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`%`(unsigned short`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* opera
tor%]([@(0.0.255) unsigned]_[@(0.0.255) short`&]_[*@3 d])&]
[s2; Сериализует переменную типа unsigned 
short [%-*@3 d]. Может вызывать LoadError, если 
данных для загрузки недостаточно. 
Возвращает [* `*this] для сцепки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`%`(int`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operator%]([@(0.0.255) i
nt`&]_[*@3 d])&]
[s2; Сериализует переменную типа int [%-*@3 d]. 
Может вызывать LoadError, если данных 
для загрузки недостаточно. Возвращает 
[* `*this]для сцепки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`%`(unsigned int`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operato
r%]([@(0.0.255) unsigned]_[@(0.0.255) int`&]_[*@3 d])&]
[s2; Сериализует переменную типа unsigned 
int [%-*@3 d]. Может вызывать LoadError, если 
данных для загрузки недостаточно. 
Возвращает [* `*this] для сцепки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`%`(long`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operator%]([@(0.0.255) l
ong`&]_[*@3 d])&]
[s2; Сериализует переменную типа long [%-*@3 d]. 
Может вызывать LoadError, если данных 
для загрузки недостаточно. Возвращает 
[* `*this] для сцепки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`%`(unsigned long`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operat
or%]([@(0.0.255) unsigned]_[@(0.0.255) long`&]_[*@3 d])&]
[s2; Сериализует переменную типа unsigned 
long [%-*@3 d]. Может вызывать LoadError, если 
данных для загрузки недостаточно. 
Возвращает [* `*this] для сцепки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`%`(float`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operator%]([@(0.0.255) f
loat`&]_[*@3 d])&]
[s2; Сериализует переменную типа float [%-*@3 d]. 
Может вызывать LoadError, если данных 
для загрузки недостаточно. Возвращает 
[* `*this] для сцепки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`%`(double`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operator%]([@(0.0.255) d
ouble`&]_[*@3 d])&]
[s2; Сериализует переменную типа double 
[%-*@3 d]. Может вызывать LoadError, если данных 
для загрузки недостаточно. Возвращает 
[* `*this] для сцепки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`%`(int64`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operator%]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64][@(0.0.255) `&]_[*@3 d])&]
[s2; Сериализует переменную типа int64 [%-*@3 d]. 
Может вызывать LoadError, если данных 
для загрузки недостаточно. Возвращает 
[* `*this] для сцепки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`%`(uint64`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operator%]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:uint64`:`:typedef^ u
int64][@(0.0.255) `&]_[*@3 d])&]
[s2; Сериализует переменную типа uint64 
[%-*@3 d]. Может вызывать LoadError, если данных 
для загрузки недостаточно. Возвращает 
[* `*this] для сцепки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`%`(String`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operator%]([_^String^ S
tring][@(0.0.255) `&]_[*@3 s])&]
[s2; Сериализует переменную типа String 
[%-*@3 s]. Может вызывать LoadError, если данных 
для загрузки недостаточно или вводимые 
данные повреждены. Возвращает [* `*this] 
для сцепки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`/`(String`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operator/]([_^String^ S
tring][@(0.0.255) `&]_[*@3 s])&]
[s2; Сериализует переменную типа String 
[%-*@3 s], используя сжатие RLE и упакованный 
формат для длины. Может вызывать LoadError, 
если данных для загрузки недостаточно 
или вводимые данные повреждены. Возвращает 
[* `*this] для сцепки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`%`(WString`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operator%]([_^WString^ W
String][@(0.0.255) `&]_[*@3 s])&]
[s2; Сериализует переменную типа WString. 
Может вызывать LoadError, если данных 
для загрузки недостаточно или вводимые 
данные повреждены. Возвращает [* `*this] 
для сцепки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`/`(WString`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operator/]([_^WString^ W
String][@(0.0.255) `&]_[*@3 s])&]
[s2; Сериализует переменную типа String, 
используя сжатие RLE и упакованный 
формат для длины. Может вызывать LoadError, 
если данных для загрузки недостаточно 
или вводимые данные повреждены. Возвращает 
[* `*this] для сцепки.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Pack`(dword`&`):%- [@(0.0.255) void]_[* Pack]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:dword`:`:typedef^ d
word][@(0.0.255) `&]_[*@3 i])&]
[s2; Сериализует значение типа dword, используя 
формат, оптимизированный для хранения 
небольших значений. Значения 0..254 
сохраняются при сериализации в одном 
байте, другие значения передаются 
5`-ю байтами. Может вызывать LoadError, 
если данных для загрузки недостаточно 
или вводимые данные повреждены.&]
[s7; [%-*C@3 i]-|Сериализуемая переменная.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`/`(int`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operator/]([@(0.0.255) i
nt`&]_[*@3 i])&]
[s2; Сериализует значение типа int, используя 
формат, оптимизированный для хранения 
небольших значений. Может вызывать 
LoadError, если данных для загрузки недостаточно
 или вводимые данные повреждены.&]
[s7; [%-*C@3 i]-|Сериализуемая переменная.&]
[s7; [*/ Возвратное значение]-|`*this для сцепления.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:operator`/`(unsigned int`&`):%- [_^Stream^ Stream][@(0.0.255) `&]_[* operato
r/]([@(0.0.255) unsigned]_[@(0.0.255) int`&]_[*@3 i])&]
[s2; Сериализует значение типа unsigned int, 
используя формат, оптимизированный 
для хранения небольших значений. 
Может вызывать LoadError, если данных 
для загрузки недостаточно или вводимые 
данные повреждены.&]
[s7; [%-*C@3 i]-|Сериализуемая переменная.&]
[s7; [*/ Возвратное значение]-|`*this для сцепления.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Magic`(dword`):%- [@(0.0.255) void]_[* Magic]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:dword`:`:typedef^ d
word]_[*@3 magic]_`=_[@3 0]x7d674d7b)&]
[s2; Сериализует `"магическое значение`", 
гарантирующее целостность потока. 
При загрузке это значение загружается 
и проверяется `- несовпадение приводит 
к вызову LoadError.&]
[s7; [%-*C@3 magic]-|Магическое значенеи.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Pack`(bool`&`,bool`&`,bool`&`,bool`&`,bool`&`,bool`&`,bool`&`,bool`&`):%- [@(0.0.255) v
oid]_[* Pack]([@(0.0.255) bool`&]_[*@3 a], [@(0.0.255) bool`&]_[*@3 b], 
[@(0.0.255) bool`&]_[*@3 c], [@(0.0.255) bool`&]_[*@3 d], [@(0.0.255) bool`&]_[*@3 e], 
[@(0.0.255) bool`&]_[*@3 f], [@(0.0.255) bool`&]_[*@3 g], [@(0.0.255) bool`&]_[*@3 h])&]
[s2; Сериализует набор булевых значений, 
сжатый в одном байте.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Pack`(bool`&`,bool`&`,bool`&`,bool`&`,bool`&`,bool`&`,bool`&`):%- [@(0.0.255) v
oid]_[* Pack]([@(0.0.255) bool`&]_[*@3 a], [@(0.0.255) bool`&]_[*@3 b], 
[@(0.0.255) bool`&]_[*@3 c], [@(0.0.255) bool`&]_[*@3 d], [@(0.0.255) bool`&]_[*@3 e], 
[@(0.0.255) bool`&]_[*@3 f], [@(0.0.255) bool`&]_[*@3 g])&]
[s2; Сериализует набор булевых значений, 
сжатый в одном байте.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Pack`(bool`&`,bool`&`,bool`&`,bool`&`,bool`&`,bool`&`):%- [@(0.0.255) vo
id]_[* Pack]([@(0.0.255) bool`&]_[*@3 a], [@(0.0.255) bool`&]_[*@3 b], 
[@(0.0.255) bool`&]_[*@3 c], [@(0.0.255) bool`&]_[*@3 d], [@(0.0.255) bool`&]_[*@3 e], 
[@(0.0.255) bool`&]_[*@3 f])&]
[s2; Сериализует набор булевых значений, 
сжатый в одном байте.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Pack`(bool`&`,bool`&`,bool`&`,bool`&`,bool`&`):%- [@(0.0.255) void]_[* Pac
k]([@(0.0.255) bool`&]_[*@3 a], [@(0.0.255) bool`&]_[*@3 b], [@(0.0.255) bool`&]_[*@3 c], 
[@(0.0.255) bool`&]_[*@3 d], [@(0.0.255) bool`&]_[*@3 e])&]
[s2; Сериализует набор булевых значений, 
сжатый в одном байте.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Pack`(bool`&`,bool`&`,bool`&`,bool`&`):%- [@(0.0.255) void]_[* Pack]([@(0.0.255) b
ool`&]_[*@3 a], [@(0.0.255) bool`&]_[*@3 b], [@(0.0.255) bool`&]_[*@3 c], 
[@(0.0.255) bool`&]_[*@3 d])&]
[s2; Сериализует набор булевых значений, 
сжатый в одном байте.&]
[s3; &]
[s4;%- &]
[s5;:Stream`:`:Pack`(bool`&`,bool`&`,bool`&`):%- [@(0.0.255) void]_[* Pack]([@(0.0.255) boo
l`&]_[*@3 a], [@(0.0.255) bool`&]_[*@3 b], [@(0.0.255) bool`&]_[*@3 c])&]
[s2; Сериализует набор булевых значений, 
сжатый в одном байте.&]
[s4;%- &]
[s5;:Stream`:`:Pack`(bool`&`,bool`&`):%- [@(0.0.255) void]_[* Pack]([@(0.0.255) bool`&]_[*@3 a
], [@(0.0.255) bool`&]_[*@3 b])&]
[s2; Сериализует набор булевых значений, 
сжатый в одном байте.&]
[s0;%- &]
[ {{10000@(113.42.0) [s0; [*@7;4 Класс StringStream]]}}&]
[s3; &]
[s1;:StringStream`:`:class:%- [@(0.0.255)3 class][3 _][*3 StringStream][3 _:_][@(0.0.255)3 publi
c][3 _][*@3;3 Stream]&]
[s9; StringStream `- поток, использующий в качестве 
средства хранения String. Максимальный 
размер вывода ограничен до 2 ГБ (максимальны 
предер размера String).&]
[s2; &]
[s0;%- [%RU-RU/ Производный от][%RU-RU  ][^topic`:`/`/Core`/src`/Stream`_ru`-ru`#Stream`:`:class^ S
tream]&]
[s3; &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Детали Конструктора]]}}&]
[s3;%- &]
[s5;:StringStream`:`:StringStream`(`):%- [* StringStream]()&]
[s2; Конструирует пустой поток и устанавливает 
его в режим сериализации Storing (сохранение) 
(подобно [* Create]).&]
[s3; &]
[s4;%- &]
[s5;:StringStream`:`:StringStream`(const String`&`):%- [* StringStream]([@(0.0.255) const
]_[_^String^ String][@(0.0.255) `&]_[*@3 data])&]
[s2; Конструирует поток с заданным контентом 
и устанавливает его в режим сериализации 
Loading (загрузка) (подобно [* Open]).&]
[s7; [%-*C@3 data]-|Контент потока.&]
[s3; &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Список Публичных Членов: Serialization 
Support]]}}&]
[s3;%- &]
[s5;:StringStream`:`:Open`(const String`&`):%- [@(0.0.255) void]_[* Open]([@(0.0.255) const
]_[_^String^ String][@(0.0.255) `&]_[*@3 data])&]
[s2;%- Устанавливает контент потока в 
указанный String и включает режим сериализации
 Loading (загрузка).&]
[s7; [%-*C@3 data]-|Контент потока.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:StringStream`:`:Limit`(int`):%- [@(0.0.255) void]_[* Limit]([@(0.0.255) int]_[*@3 s
z])&]
[s2; Устанавливает предел размера вывода. 
Выводится исключение StringStream`::LimitExc, 
когда размер вывода достигает его.&]
[s3; &]
[s4;%- &]
[s5;:StringStream`:`:Create`(`):%- [@(0.0.255) void]_[* Create]()&]
[s2; Создаёт пустой поток StringStream и устанавливает
 его в режим сериализации Storing (сохранение).&]
[s3; &]
[s4;%- &]
[s5;:StringStream`:`:Reserve`(int`):%- [@(0.0.255) void]_[* Reserve]([@(0.0.255) int]_[*@3 n])
&]
[s2; Резервирует дополнительно [%-*@3 n] байтов 
внутреннего хранилища в качестве 
optimization hint. Это в некоторых случаях 
ускоряет работу, если известно, сколько 
приблизительно данных будет помещено 
в поток StringStream.&]
[s3; &]
[s4;%- &]
[s5;:StringStream`:`:GetResult`(`):%- [_^String^ String]_[* GetResult]()&]
[s2; Возвращает итоговый String.&]
[s7; [*/ Возвратное значение]-|Итог.&]
[s3; &]
[s4;%- &]
[s5;:StringStream`:`:operator String`(`):%- [* operator_String]()&]
[s7; [*/ Возвратное значение]-|[^topic`:`/`/Core`/src`/Stream`_ru`-ru`#StringStream`:`:GetResult`(`)^ G
etResult]().&]
[s0;%- &]
[ {{10000@(113.42.0) [s0; [*@7;4 Класс MemStream]]}}&]
[s3; &]
[s1;:MemStream`:`:class:%- [@(0.0.255)3 class][3 _][*3 MemStream][3 _:_][@(0.0.255)3 public][3 _][*@3;3 S
tream]&]
[s9; Поток, использующий в качестве контента 
сырую память.&]
[s2; &]
[s0;%- [%RU-RU/ Производный от][%RU-RU  ][^topic`:`/`/Core`/src`/Stream`_ru`-ru`#Stream`:`:class^ S
tream]&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0; [* Детали Конструктора]]}}&]
[s3;%- &]
[s5;:MemStream`:`:MemStream`(void`*`,int`):%- [* MemStream]([@(0.0.255) void]_`*[*@3 data],
 [@(0.0.255) int]_[*@3 size])&]
[s2; Конструирует [* MemStream] в заданном буфере 
памяти.&]
[s7; [%-*C@3 data]-|Указатель на контент потока.&]
[s7; [%-*C@3 size]-|Размер.&]
[s0;%- &]
[ {{10000@(113.42.0) [s0; [*@7;4 Класс MemReadStream]]}}&]
[s3;%- &]
[s1;:MemReadStream`:`:class:%- [@(0.0.255)3 class][3 _][*3 MemReadStream][3 _:_][@(0.0.255)3 pub
lic][3 _][*@3;3 MemStream]&]
[s9; Поток только для чтения, использующий 
в качестве контента сырую память.&]
[s2; &]
[s0;%- [%RU-RU/ Производный от][%RU-RU  ][^topic`:`/`/Core`/src`/Stream`_ru`-ru`#MemStream`:`:class^ M
emStream]&]
[s3; &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Детали Конструктора]]}}&]
[s3; &]
[s5;:MemReadStream`:`:MemReadStream`(const void`*`,int`):%- [* MemReadStream]([@(0.0.255) c
onst]_[@(0.0.255) void]_`*[*@3 data], [@(0.0.255) int]_[*@3 size])&]
[s2; Конструирует [* MemStream] в заданном буфере 
памяти.&]
[s7; [%-*C@3 data]-|Указатель на контент потока.&]
[s7; [%-*C@3 size]-|Размер.&]
[s0;%- &]
[ {{10000@(113.42.0) [s0; [*@7;4 Класс BlockStream]]}}&]
[s3; &]
[s1;:BlockStream`:`:class:%- [@(0.0.255)3 class][3 _][*3 BlockStream][3 _:_][@(0.0.255)3 public][3 _
][*@3;3 Stream]&]
[s9; BlockStream реализует операции, необходимые 
для управления потоками, которые 
могут читать или записывать блок 
данных в случайной позиции. BlockStream 
предоставляет буферную реализацию 
такого потока. Он реализует все виртуальные 
методы класса Stream, за исключением 
[* IsOpen] и [* Close], применяя новые виртуальные 
методы [* Read], [* Write] и [* SetStreamSize].&]
[s2; &]
[s0;%- [%RU-RU/ Производный от][%RU-RU  ][^topic`:`/`/Core`/src`/Stream`_ru`-ru`#Stream`:`:class^ S
tream]&]
[s3; &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Список Публичных Членов]]}}&]
[s3;%- &]
[s0;%- [@(0.0.255) enum]_`{_[*@3 READ], [*@3 CREATE], [*@3 APPEND], [*@3 READWRITE], 
[*@3 NOWRITESHARE], [*@3 DELETESHARE], [*@3 NOREADSHARE], [*@3 SHAREMASK]_`}&]
[s2; Этот перечень определяет основные 
режимы работы класса BlockStream (используемые 
в сочитании с двоичным Или).&]
[s7;:`:`:BlockStream`:`:READ: [%-*C@3 READ]-|Режим чтения.&]
[s7;:`:`:BlockStream`:`:CREATE: [%-*C@3 CREATE]-|Режим записи.&]
[s7;:`:`:BlockStream`:`:APPEND: [%-*C@3 APPEND]-|Режим приставки 
`-т.е. начальная позиция в конце потока.&]
[s7;:`:`:BlockStream`:`:READWRITE: [%-*C@3 READWRITE]-|Даёт последующим 
потокам полный доступ к себе.&]
[s7;:`:`:BlockStream`:`:NOWRITESHARE: [%-*C@3 NOWRITESHARE]-|Отключает 
у последующих потоков возможность 
записывать в себя.&]
[s7;:`:`:BlockStream`:`:DELETESHARE: [%-*C@3 DELETESHARE]-|Даёт 
последующим потокам возможность 
удалять себя.&]
[s7;:`:`:BlockStream`:`:NOREADSHARE: [%-*C@3 NOREADSHARE]-|Отключает 
у последующих потоков возможность 
читать из этого потока.&]
[s3; &]
[s4;%- &]
[s5;:BlockStream`:`:SetBufferSize`(dword`):%- [@(0.0.255) void]_[* SetBufferSize]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:dword`:`:typedef^ d
word]_[*@3 newsize])&]
[s2; Устанавливает новый размер внутреннего 
буфера.&]
[s7; [%-*C@3 newsize]-|Новый размер буфера.&]
[s3; &]
[s4;%- &]
[s5;:BlockStream`:`:GetBufferSize`(`)const:%- [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:dword`:`:typedef^ d
word]_[* GetBufferSize]()_[@(0.0.255) const]&]
[s2; [*/ Возвратное значение  ]Размер буфера.&]
[s3;%- &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Список Защищённых Членов]]}}&]
[s3; &]
[s5;:BlockStream`:`:Read`(int64`,void`*`,dword`):%- [@(0.0.255) virtual] 
[_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:dword`:`:typedef^ dword
]_[* Read]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 at], [@(0.0.255) void]_`*[*@3 ptr], [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:dword`:`:typedef^ d
word]_[*@3 size])&]
[s2; Реализация этого виртуального метода 
в производном классе должна читать 
блок данных в указанной позиции средства 
хранения.&]
[s7; [%-*C@3 at]-|Позиция в средстве хранения.&]
[s7; [%-*C@3 ptr]-|Указатель на буфер для получения 
данных.&]
[s7; [%-*C@3 size]-|Требуемый размер данных.&]
[s7; [*/ Возвратное значение]-|Размер прочитанных 
данных.&]
[s3; &]
[s4;%- &]
[s5;:BlockStream`:`:Write`(int64`,const void`*`,dword`):%- [@(0.0.255) virtual] 
[@(0.0.255) void]_[* Write]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 at], [@(0.0.255) const]_[@(0.0.255) void]_`*[*@3 data], [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:dword`:`:typedef^ d
word]_[*@3 size])&]
[s2; Реализация этого виртуального метода 
в производном классе должна записывать 
блок данных в указанной позиции средства 
хранения.&]
[s7; [%-*C@3 at]-|Позиция в средстве хранения.&]
[s7; [%-*C@3 data]-|Указатель на данные.&]
[s7; [%-*C@3 size]-|Размер данных.&]
[s3; &]
[s4;%- &]
[s5;:BlockStream`:`:SetStreamSize`(int64`):%- [@(0.0.255) virtual] 
[@(0.0.255) void]_[* SetStreamSize]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 size])&]
[s2; Реализация этого виртуального метода 
в производном классе должна регулировать 
размер средства хранения.&]
[s7; [%-*C@3 size]-|Требуемый новый размер средства 
хранения.&]
[s3; &]
[s4;%- &]
[s5;:BlockStream`:`:GetStreamSize`(`)const:%- [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[* GetStreamSize]()_[@(0.0.255) const]&]
[s2; Возвращает текущий размер средства 
хранения. Заметьте, что он может отличаться 
от текущего GetSize() `- Настройка размера 
средства хранения обычно изменяется 
при сливе буфера.&]
[s7; [*/ Возвратное значение]-|Текущий размер 
средства хранения.&]
[s3; &]
[s4;%- &]
[s5;:BlockStream`:`:OpenInit`(dword`,int64`):%- [@(0.0.255) void]_[* OpenInit]([_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:dword`:`:typedef^ d
word]_[*@3 mode], [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:int64`:`:typedef^ i
nt64]_[*@3 file`_size])&]
[s2; Инициализует поток BlockStream в указанном 
режиме и с реальным размером средства 
хранения (носителя).&]
[s7; [%-*C@3 mode]-|Режим.&]
[s7; [%-*C@3 file`_size]-|Реальный размер носителя.&]
[s0;%- &]
[ {{10000@(113.42.0) [s0; [*@7;4 Класс FileStream]]}}&]
[s3; &]
[s1;:FileStream`:`:class:%- [@(0.0.255)3 class][3 _][*3 FileStream][3 _:_][@(0.0.255)3 public][3 _
][*@3;3 BlockStream]&]
[s9; Классический файловый поток.&]
[s9; &]
[s0;%- [%RU-RU/ Производный от][%RU-RU  ][^topic`:`/`/Core`/src`/Stream`_ru`-ru`#BlockStream`:`:class^ B
lockStream]&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0; [* Детали Конструктора]]}}&]
[s3;%- &]
[s5;:FileStream`:`:FileStream`(const char`*`,dword`):%- [* FileStream]([@(0.0.255) const]_
[@(0.0.255) char]_`*[*@3 filename], [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:dword`:`:typedef^ d
word]_[*@3 mode])&]
[s2; Открывает файловый поток в указанном 
режиме (определённом в BlockStream).&]
[s7; [%-*C@3 filename]-|Имя файла.&]
[s7; [%-*C@3 mode]-|Режим открытия.&]
[s3; &]
[s4;%- &]
[s5;:FileStream`:`:FileStream`(const char`*`,dword`,mode`_t`):%- [* FileStream]([@(0.0.255) c
onst]_[@(0.0.255) char]_`*[*@3 filename], [_^topic`:`/`/Core`/src`/PrimitiveDataTypes`$en`-us`#Upp`:`:dword`:`:typedef^ d
word]_[*@3 mode], mode`_t_[*@3 acm]_`=_[@3 0644])&]
[s6;%- Специфичен для Posix.&]
[s2; Открывает файловый поток в указанном 
режиме (определённом в BlockStream) и со 
специфичными правами доступа POSIX.&]
[s7; [%-*C@3 filename]-|Имя файла.&]
[s7; [%-*C@3 mode]-|Режим открытия.&]
[s7; [%-*C@3 acm]-|Права доступа.&]
[s3; &]
[s4;%- &]
[s5;:FileStream`:`:FileStream`(int`):%- [* FileStream]([@(0.0.255) int]_[*@3 std`_handle])&]
[s6;%- Специфичен для Posix.&]
[s2; Присваивает существующий файловый 
хэндл потоку FileStream.&]
[s7; [%-*C@3 std`_handle]-|Файловый хэндл открытого 
файла. FileStream берёт его во владение.&]
[s3; &]
[s4;%- &]
[s5;:FileStream`:`:FileStream`(`):%- [* FileStream]()&]
[s2; Создаёт пустой неоткрытый FileStream.&]
[s3; &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Список Публичных Членов]]}}&]
[s3;%- &]
[s5;:FileStream`:`:operator bool`(`)const:%- [* operator_bool]()_[@(0.0.255) const]&]
[s2; [*/ Возвратное значение]-|   True, если поток 
открыт.&]
[s3; &]
[s4;%- &]
[s5;:FileStream`:`:GetTime`(`)const:%- [_^FileTime^ FileTime]_[* GetTime]()_[@(0.0.255) con
st]&]
[s2; Возвращает время последней записи 
в поток.&]
[s7; [*/ Возвратное значение]-|Структура 
FileTime.&]
[s3; &]
[s4;%- &]
[s5;:FileStream`:`:SetTime`(const FileTime`&`):%- [@(0.0.255) void]_[* SetTime]([@(0.0.255) c
onst]_[_^FileTime^ FileTime][@(0.0.255) `&]_[*@3 tm])&]
[s2; Устанавливает время последнего изменения 
потока.&]
[s7; [%-*C@3 tm]-|Структура FileTime.&]
[s3; &]
[s4;%- &]
[s5;:FileStream`:`:Open`(const char`*`,dword`):%- [@(0.0.255) bool]_[* Open]([@(0.0.255) co
nst]_[@(0.0.255) char]_`*[*@3 filename], [_^dword^ dword]_[*@3 mode])&]
[s6;%- Специфичен для Posix.&]
[s2; Открывает файловый поток в указанном 
режиме (определённом в классе BlockStream), 
со специфичными для POSIX правами доступа. 
[%-*@3 mode] может быть одним из: READ, CREATE, 
APPEND, READWRITE, возможно, в сочетании (с 
применением `'`|`') с флагом NOWRITESHARE. 
Это укрепляет эксклюзивность права 
доступа к файлу.&]
[s7; [%-*C@3 filename]-|Имя файла.&]
[s7; [%-*C@3 mode]-|Режим открытия.&]
[s3; &]
[s4;%- &]
[s5;:FileStream`:`:Open`(const char`*`,dword`,mode`_t`):%- [@(0.0.255) bool]_[* Open]([@(0.0.255) c
onst]_[@(0.0.255) char]_`*[*@3 filename], [_^dword^ dword]_[*@3 mode], 
mode`_t_[*@3 acm]_`=_[@3 0644])&]
[s6;%- Специфичен для Posix.&]
[s2; Отрывает файловый поток в указанном 
режиме (определённом в классе BlockStream) 
со специфичными для POSIX правами доступа. 
[%-*@3 mode] может быть одним из: READ, CREATE, 
APPEND, READWRITE, возможно, в сочетании (с 
применением `'`|`') с флагом  NOWRITESHARE. 
Этот флаг использует системный вызов 
flock, укрепляя эксклюзивность права 
доступа к файлу. При READ, если файла 
не существует, функция завершается 
провалом. При режиме CREATE файл всегда 
создаётся пустым. При режимах APPEND 
и READWRITE файл создаётся, если его ещё 
не существует.&]
[s7; [%-*C@3 filename]-|Имя файла.&]
[s7; [%-*C@3 mode]-|Режим открытия.&]
[s7; [%-*C@3 acm]-|Права доступа.&]
[s3; &]
[s4;%- &]
[s5;:FileStream`:`:GetHandle`(`)const:%- HANDLE_[* GetHandle]()_[@(0.0.255) const]&]
[s2; [*/ Возвратное значение]-|   Файловый 
хэндл, либо POSIX, либо WIN32.&]
[s0;%- &]
[ {{10000@(113.42.0) [s0; [*@7;4 Класс FileIn]]}}&]
[s3; &]
[s1;:FileIn`:`:class:%- [@(0.0.255)3 class][3 _][*3 FileIn][3 _:_][@(0.0.255)3 public][3 _][*@3;3 Fi
leStream]&]
[s9; Простой вспомогательный класс, представляю
щий собой FileStream в режиме чтения.&]
[s0; &]
[s9;%- [%RU-RU/ Производный от][%RU-RU  ][^topic`:`/`/Core`/src`/Stream`$en`-us`#`:`:FileStream`:`:class FileStream^ F
ileStream]&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0; [* Детали Конструктора]]}}&]
[s3; &]
[s5;:FileIn`:`:FileIn`(const char`*`):%- [* FileIn]([@(0.0.255) const]_[@(0.0.255) char]_`*
[*@3 fn])&]
[s2; Открывает файл для чтения.&]
[s7; [%-*C@3 fn]-|Имя файла.&]
[s3; &]
[s4;%- &]
[s5;:FileIn`:`:FileIn`(`):%- [* FileIn]()&]
[s2; Конструирует пустой FileStream.&]
[s3; &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Список Публичных Членов]]}}&]
[s3;%- &]
[s5;:FileIn`:`:Open`(const char`*`):%- [@(0.0.255) bool]_[* Open]([@(0.0.255) const]_[@(0.0.255) c
har]_`*[*@3 fn])&]
[s2; Открывает файл для чтения.&]
[s7; [%-*C@3 fn]-|Имя файла.&]
[s7; [*/ Возвратное значение]-|True, если открыт 
удачно.&]
[s0;%- &]
[ {{10000@(113.42.0) [s0; [*@7;4 Класс FileOut]]}}&]
[s3; &]
[s1;:FileOut`:`:class:%- [@(0.0.255)3 class][3 _][*3 FileOut][3 _:_][@(0.0.255)3 public][3 _][*@3;3 F
ileStream]&]
[s9; Простой воспомогательный класс, 
представляющи собой FileStream в режиме 
записи.&]
[s2; &]
[s0;%- [%RU-RU/ Производный от][%RU-RU  ][^topic`:`/`/Core`/src`/Stream`_ru`-ru`#FileStream`:`:class^ F
ileStream]&]
[s3; &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0; [* Детали Конструктора]]}}&]
[s3;%- &]
[s5;:FileOut`:`:FileOut`(const char`*`):%- [* FileOut]([@(0.0.255) const]_[@(0.0.255) char]_
`*[*@3 fn])&]
[s2; Открывает файл для записи.&]
[s7; [%-*C@3 fn]-|Имя файла.&]
[s3; &]
[s4;%- &]
[s5;:FileOut`:`:FileOut`(`):%- [* FileOut]()&]
[s2;%- Конструирует неоткрытый FileStream.&]
[s3; &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Список Публичных Членов]]}}&]
[s3; &]
[s5;:FileOut`:`:Open`(const char`*`):%- [@(0.0.255) bool]_[* Open]([@(0.0.255) const]_[@(0.0.255) c
har]_`*[*@3 fn])&]
[s2; Открывает файл для записи.&]
[s7; [%-*C@3 fn]-|Имя файла.&]
[s7; [*/ Возвратное значение]-|True, если открыт 
удачно.&]
[s3; &]
[s4;%- &]
[s5;:FileOut`:`:Open`(const char`*`,mode`_t`):%- [@(0.0.255) bool]_[* Open]([@(0.0.255) con
st]_[@(0.0.255) char]_`*[*@3 fn], mode`_t_[*@3 acm]_`=_[@3 0644])&]
[s2; Открывает файл для записи.&]
[s6; Специфика POSIX&]
[s7; [%-*C@3 fn]-|Имя файла.&]
[s7;%- [*@3 acm][@3 -|]Режим файла&]
[s2; [*/ Возвратное значение]-|True, если открыт 
удачно.&]
[s0;3 &]
[ {{10000@(113.42.0) [s0; [*@7;4 Класс FileAppend]]}}&]
[s3; &]
[s1;:FileAppend`:`:class:%- [@(0.0.255)3 class][3 _][*3 FileAppend][3 _:_][@(0.0.255)3 public][3 _
][*@3;3 FileStream]&]
[s9; Простой вспомогательный класс, представляю
щий собой FileStream в режиме приставки 
`- что фактически означает режим записи 
с текущей позицией в конце файла.&]
[s2; &]
[s0;%- [%RU-RU/ Производный от][%RU-RU  ][^topic`:`/`/Core`/src`/Stream`_ru`-ru`#FileStream`:`:class^ F
ileStream]&]
[s3; &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Детали Конструктора]]}}&]
[s3; &]
[s5;:FileAppend`:`:FileAppend`(const char`*`):%- [* FileAppend]([@(0.0.255) const]_[@(0.0.255) c
har]_`*[*@3 fn])&]
[s2; Открывает файл в режиме приставки.&]
[s7; [%-*C@3 fn]-|Имя файла.&]
[s3; &]
[s4;%- &]
[s5;:FileAppend`:`:FileAppend`(`):%- [* FileAppend]()&]
[s2; Конструирует пустой FileStream.&]
[s3; &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Список Публичных Членов]]}}&]
[s3; &]
[s5;:FileAppend`:`:Open`(const char`*`):%- [@(0.0.255) bool]_[* Open]([@(0.0.255) const]_[@(0.0.255) c
har]_`*[*@3 fn])&]
[s2; Открывает файл в режиме приставки.&]
[s7; [%-*C@3 fn]-|Имя файла.&]
[s7; [*/ Возвратное значение]-|true, когда открыт 
удачно.&]
[s0;%- &]
[ {{10000@(113.42.0) [s0; [*@7;4 Класс SizeStream]]}}&]
[s3; &]
[s1;:SizeStream`:`:class:%- [@(0.0.255)3 class][3 _][*3 SizeStream][3 _:_][@(0.0.255)3 public][3 _
][*@3;3 Stream]&]
[s9; Специальный выводной поток, который 
фактически не сохраняет выводимые 
данные, а только считает общее число 
записанных байтов.&]
[s2; &]
[s0;%- [%RU-RU/ Производный от][%RU-RU  ][^topic`:`/`/Core`/src`/Stream`_ru`-ru`#Stream`:`:class^ S
tream]&]
[s3; &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Детали Конструктора]]}}&]
[s3; &]
[s0;:`:`:SizeStream`:`:SizeStream`(`):%- [* SizeStream]()&]
[s2; Дефолтный конструктор.&]
[s3; &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Список Публичных Членов]]}}&]
[s3; &]
[s5;:SizeStream`:`:Open`(`):%- [@(0.0.255) void]_[* Open]()&]
[s2; Повторно открывает данные `- сбрасывает 
счётчик выведенных байтов.&]
[s3; &]
[s4;%- &]
[s5;:SizeStream`:`:operator int64`(`)const:%- [* operator_int64]()_[@(0.0.255) const]&]
[s2; Возвращает текущее число записанных 
байтов.&]
[s0;%- &]
[ {{10000@(113.42.0) [s0; [*@7;4 Класс CompareStream]]}}&]
[s3; &]
[s1;:CompareStream`:`:class:%- [@(0.0.255)3 class][3 _][*3 CompareStream][3 _:_][@(0.0.255)3 pub
lic][3 _][*@3;3 Stream]&]
[s9; Особый выводящий поток, который вместо 
сохранения данных, выполняет их сравнение 
с данными другого потока.&]
[s2; &]
[s0;%- [%RU-RU/ Производный от][%RU-RU  ][^topic`:`/`/Core`/src`/Stream`_ru`-ru`#Stream`:`:class^ S
tream]&]
[s3; &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Детали Конструктора]]}}&]
[s3; &]
[s0;:CompareStream`:`:CompareStream`(`):%- [* CompareStream]()&]
[s2; Конструирует закрытый CompareStream.&]
[s3; &]
[s4;%- &]
[s5;:CompareStream`:`:CompareStream`(Stream`&`):%- [* CompareStream]([_^Stream^ Stream][@(0.0.255) `&
]_[*@3 aStream])&]
[s2; Конструирует CompareStream, открытый для 
сравнения с другим указанным потоком.&]
[s7; [%-*C@3 aStream]-|Поток для сравнения.&]
[s3;%- &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Список Публичных Членов]]}}&]
[s3; &]
[s5;:CompareStream`:`:Open`(Stream`&`):%- [@(0.0.255) void]_[* Open]([_^Stream^ Stream][@(0.0.255) `&
]_[*@3 aStream])&]
[s2; Открывает CompareStream для сравнения с 
указанным потоком.&]
[s7; [%-*C@3 aStream]-|Поток для сравнения.&]
[s3; &]
[s4;%- &]
[s5;:CompareStream`:`:IsEqual`(`):%- [@(0.0.255) bool]_[* IsEqual]()&]
[s7; Возвратное значение-|true, если все 
записанные байты совпадают с байтами 
в сравниваемом потоке.&]
[s3; &]
[s4;%- &]
[s5;:CompareStream`:`:operator bool`(`):%- [* operator_bool]()&]
[s7; Возвратное значение-|IsEqual().&]
[s3; &]
[s0; ]]