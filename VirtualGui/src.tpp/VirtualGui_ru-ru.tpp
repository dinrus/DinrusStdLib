topic "Структура VirtualGui";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,2#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_} 
[ {{10000@(113.42.0) [s0;*@7;4%RU-RU ]}}&]
[s3; &]
[s1;:Upp`:`:VirtualGui`:`:struct: [@(0.0.255)3 struct][3 _][*3 VirtualGui]&]
[s2;%RU-RU VirtualGui представляет собой интерфейс 
для реализации простого виртуализированног
о рабочего стола ГИП. Реализуя ряд 
методов, клиент получает в итоге рабочий 
стол ГИП, работающий над заданной 
поверхностью.&]
[s2;%RU-RU VirtualGUI представляет собой в основном 
`"событийную`" часть ГИП. Клиент также 
должен реализовать или использовать 
некоторый Draw, чтобы отрисовывать 
на поверхности, а также некоторую 
шрифтовую систему, чтобы измерять 
шрифты (напр., DrawGL и plugin/FT`_fontsys).&]
[s3; &]
[ {{10000F(128)G(128)@1 [s0;%RU-RU [* Список Публичных Методов]]}}&]
[s3; &]
[s5;:Upp`:`:VirtualGui`:`:GetOptions`(`): [@(0.0.255) virtual] [_^Upp`:`:dword^ dword]_[* G
etOptions]()&]
[s2;%RU-RU Возвращает набор флагов, описывающий 
некоторые аспекты поведения VirtualGui. 
Доступные необязательные флаги следующие:-|&]
[s2;%RU-RU &]
[s7;i1120;a17;:Ctrl`:`:CENTER:%RU-RU [%-*C@3 GUI`_SETMOUSECURSOR]-|Ипользовать
 метод SetMouseCursor() вместо отрисовки 
курсора.&]
[s7;i1120;a17;:Ctrl`:`:STDSIZE:%RU-RU [%-*C@3 GUI`_SETCARET]-|Использовать 
метод SetCaret() вместо отрисовуи каретки.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:VirtualGui`:`:GetSize`(`): [@(0.0.255) virtual] [_^Upp`:`:Size^ Size]_[* GetSiz
e]()_`=_[@3 0]&]
[s2;%RU-RU Возвращает размер ГИП`-поверхности.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:VirtualGui`:`:GetMouseButtons`(`): [@(0.0.255) virtual] 
[_^Upp`:`:dword^ dword]_[* GetMouseButtons]()_`=_[@3 0]&]
[s2;%RU-RU Возвращает текущее состояние 
кнопок мыши.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:VirtualGui`:`:GetModKeys`(`): [@(0.0.255) virtual] [_^Upp`:`:dword^ dword]_[* G
etModKeys]()_`=_[@3 0]&]
[s2;%RU-RU Возвращает текущее состояние 
клавиш`-модификаторов.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:VirtualGui`:`:IsMouseIn`(`): [@(0.0.255) virtual] [@(0.0.255) bool]_[* IsMouseI
n]()_`=_[@3 0]&]
[s2;%RU-RU Возвращает true, если указатель 
мыши расположен на ГИП`-поверхности.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:VirtualGui`:`:IsWaitingEvent`(`): [@(0.0.255) virtual] 
[@(0.0.255) bool]_[* IsWaitingEvent]()_`=_[@3 0]&]
[s2;%RU-RU Возвращает true, если есть события 
ввода, нуждающиеся в обработке.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:VirtualGui`:`:ProcessEvent`(bool`*`): [@(0.0.255) virtual] 
[@(0.0.255) bool]_[* ProcessEvent]([@(0.0.255) bool]_`*[*@3 quit])_`=_[@3 0]&]
[s2;%RU-RU Обрабатывает событие ввода. Этой 
функции следует исползовать статические 
функции Ctrl`::DoKeyFB и Ctrl`::DoMouseFB для передачи 
событий в виртуальный ГИП.В некоторых 
случаях также используются Ctrl`::PaintAll 
и Ctrl`::EndSession. Для указания на конец 
сессии, инициализированной хостом, 
может [%-*@3 quit] быть установлен в true (quit 
может быть NULL, пожтому перед его установкой 
необходимо протетстировать на это).&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:VirtualGui`:`:WaitEvent`(int`): [@(0.0.255) virtual] [@(0.0.255) void]_[* WaitE
vent]([@(0.0.255) int]_[*@3 ms])_`=_[@3 0]&]
[s2;%RU-RU Ждёт до [%-*@3 ms] миллисекунд доступности 
следующего события.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:VirtualGui`:`:WakeUpGuiThread`(`): [@(0.0.255) virtual] 
[@(0.0.255) void]_[* WakeUpGuiThread]()_`=_[@3 0]&]
[s2;%RU-RU Должен работать так, как если 
бы событию ввода `'empty`' (`"пустой`") подошла 
очередь, потому WithEvent возврашает немедленно.
 Эту функцию можно вызывать из другого 
потока.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:VirtualGui`:`:SetMouseCursor`(const Upp`:`:Image`&`): [@(0.0.255) virtual] 
[@(0.0.255) void]_[* SetMouseCursor]([@(0.0.255) const]_[_^Upp`:`:Image^ Image][@(0.0.255) `&
]_[*@3 image])_`=_[@3 0]&]
[s2;%RU-RU Изменяет курсор мыши. Используется 
только, когда активен флаг GUI`_SETMOUSECURSOR 
в GetOptions.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:VirtualGui`:`:SetCaret`(const Upp`:`:Rect`&`): [@(0.0.255) void]_[* SetCaret](
[@(0.0.255) const]_[_^Upp`:`:Rect^ Rect][@(0.0.255) `&]_[*@3 caret])&]
[s2;%RU-RU Помещает каретку. Используется 
только, когда активен флаг GUI`_SETMOUSECURSOR 
в GetOptions.&]
[s3;%RU-RU &]
[s4; &]
[s5;:Upp`:`:VirtualGui`:`:Quit`(`): [@(0.0.255) virtual] [@(0.0.255) void]_[* Quit]()_`=_[@3 0
]&]
[s2;%RU-RU Вызывается, когда требуется завершение 
операции ГИП.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:VirtualGui`:`:BeginDraw`(`): [@(0.0.255) virtual] [_^Upp`:`:SystemDraw^ Syste
mDraw][@(0.0.255) `&]_[* BeginDraw]()_`=_[@3 0]&]
[s2;%RU-RU Начинает рисование на поверхности. 
VirtualGui требуется только один экземпляр 
SystemDraw, чтобы существовуюший в любое 
время, поэтому неплохо бы иметь соответствую
щий Draw, в качетсве переменной экземпляра 
реализации VirtualGui.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:VirtualGui`:`:CommitDraw`(`): [@(0.0.255) virtual] [@(0.0.255) void]_[* CommitD
raw]()_`=_[@3 0]&]
[s2;%RU-RU Завершает операции прорисовки, 
передаёт результат на показ.&]
[s3; &]
[s0; &]
[ {{10000@(113.42.0) [s0;%RU-RU [*@7;4 VirtualGui]]}}&]
[s4; &]
[s5;:Upp`:`:RunVirtualGui`(Upp`:`:VirtualGui`&`,Upp`:`:Event`<`>`): [@(0.0.255) void]_[* R
unVirtualGui]([_^Upp`:`:VirtualGui^ VirtualGui][@(0.0.255) `&]_[*@3 gui], 
[_^Upp`:`:Event^ Event]<>_[*@3 app`_main])&]
[s2;%RU-RU Эта функция выполняет сессию 
виртуального ГИП.&]
[s3;%RU-RU &]
[s0;%RU-RU ]]