#ifndef _Dinrus_RuCore_RuCore_h_
#define _Dinrus_RuCore_RuCore_h_
#include <drx/Core/ru.h>

#define сис     std::system
#define пишиф   std::printf
#define фпишиф  fprintf
#define выход   exit


#define РНЦП          "РНЦП \"Динрус\""
#define Ткст          drx::Txt
#define ШТкст         drx::WTxt
#define Массив        drx::Array
#define ТкстБуф       drx::TxtBuf
#define ШТкстБуф      drx::WTxtBuf
#define какТкст       drx::AsTxt
#define сравни        ::strcmp //drx::CompareNoCase //
#define дайИмяФ       drx::GetFName
#define дайПапкуПроги drx::GetExeFolder
#define естьФайл      drx::FileExists
#define нетФайла      !естьФайл
#define естьДир       drx::DirExists
#define нетДир        !естьДир
#define дайПутьКПроге drx::GetExeFilePath
#define дайДомДир     drx::GetHomeDir
#define фм            drx::Format
#define Век           drx::Vec
#define ВекМап        drx::VecMap
#define КС            Ткст("\n")
#define Искл          drx::Exc
#define копируйФл     drx::FileCopy
#define переместиФл   drx::FileMove

enum ППозКурсора {
  Уст,
  Тек,
  Кон,
};

    i32k ОШНЕДОП              = 1;        // Недопустимая операция
    i32k ОШНЕСУЩ             = 2;        // Файл или каталог не найден
    i32k ОШПОИСК              = 3;        // Процес не найден
    i32k ОШПРЕРВ              = 4;        // Прерванный системный вызов
    i32k ОШВВ                = 5;        // Ошибка ввода-вывода
    i32k ОШНЕТУСТРВА              = 6;        //Устройство или адрес не найдены
    i32k ОШАРГСЛИШБ              = 7;        // Слишком много аргументов
    i32k ОШНЕИСП            = 8;        // Exec format error
    i32k ОШНЕВФАЙЛ              = 9;        // Неправильный номер файла
    i32k ОШНЕТОТПРЫСК             = 10;       // Отсутствуют дочерние процессы
    i32k ОШПОВТОР             = 11;       // Попробовать снова
    i32k ОШНЕТПАМ             = 12;       // Вне памяти
    i32k ОШДОСТУП             = 13;       // Доступ запрещён
    i32k ОШНЕТОТАДР             = 14;       // Неправильный адрес
    i32k ОШЗАНЯТ              = 16;       // Устройство или ресурс заняты
    i32k ОШФЕСТЬ             = 17;       // Файл уже есть
    i32k ОШКРОССУСТРССЫЛ              = 18;       // Ссылка на другое устройство
    i32k ОШНЕТУСТР             = 19;       // Устройство не обнаружено
    i32k ОШНЕПАП            = 20;       // Это не папка
    i32k ОШПАП             = 21;       // Это папка
    i32k ОШИНВАЛАРГ             = 22;       // Неверный аргумент
    i32k ОШПЕРЕПФТ             = 23;       // Переполнение файловой таблицы
    i32k ОШМНОГОТКРФ             = 24;       // Слишком много открытых файлов
    i32k ОШНЕТП             = 25;       // Not a typewriter
    i32k ОШФСЛИШБ              = 27;       // Файл слишком громоздкий
    i32k ОШНЕТМЕСТ             = 28;       // На устойстве закончилось свободное пространство
    i32k ОШПЕРЕМЕСТ             = 29;       // Недопустимое перемещение
    i32k ОШФСТЧ              = 30;       // Файловая система только для чтения
    i32k ОШСЛИШМССЫЛ             = 31;       // Слишком много ссылок
    i32k ОШПАЙП              = 32;       // Разорван тунель (pipe)
    i32k ОШДОМ               = 33;       // Математический аргумент вне домена или функции
    i32k ОШДИАП             = 34;       // Математический результат невозможно представить
    i32k ОШДЕДЛОК            = 36;       // Resource deadlock would occur
    i32k ОШСЛИШБФИМЯ       = 38;       // Слишком длинное название файла
    i32k ОШНЕТЗАМЗАП             = 39;       // No record locks available
    i32k ОШФУНКНЕРЕАЛИЗ             = 40;       // Функция не реализована
    i32k ОШПАПНЕПУСТ          = 41;       // Папка не пуста
    i32k ОШБАЙТПОСЛ             = 42;       // Недопустимая байтовая

 enum
    {
	ФУК_ДОБАВКА	= 0x04,
	ФУК_УСТРВО	= 0x08,
	ФУК_ТЕКСТ	= 0x10,
	ФУК_БАЙТ	= 0x20,
	ФУК_ШИМ	= 0x40,

    ВВФБФ   = 0,
    ВВЛБФ   = 0x40,
	ВВНБФ   = 4,
    ВВЧИТ  = 1,	  // нестандартно
    ВВЗАП   = 2,	  // нестандартно
    ВВМОЙБУФ = 8,	  // нестандартно
    ВВКФ   = 0x10,  // нестандартно
    ВВОШ   = 0x20,  // нестандартно
    ВВСТРЖ  = 0x40,  // нестандартно
    ВВЧЗ    = 0x80,  // нестандартно
    ВВТРАН  = 0x100, // нестандартно
    ВВПРИЛ   = 0x200, // нестандартно
    };

 enum
    {
        РАЗМБУФ       = 0x4000,
        КФ          = -1,//конец файла
        МАКС_ОТКРФ    = 20,
        МАКС_ИМЯФ = 256, // 255 plus NULL
        МАКС_ВРЕМ      = 32767,
        СИС_ОТКР     = 20,	// нестандартно
    };

enum ФИскл
{
    Повреждён      = 1,
    Ненорм     = 2, // нестандартно
    ДелениеНаНоль    = 4,
    Переполнение     = 8,
    Недополнение    = 0x10,
    Неточность      = 0x20,
    ВсеИскл   = 0x3F,
    КБлиж    = 0,
    Выше       = 0x800,
    Ниже     = 0x400,
    КНулю   = 0xC00,
};

#define УДАЧНЫЙ_ВЫХОД   0
#define НЕУДАЧНЫЙ_ВЫХОД 1
#define СЛУЧ_МАКС       32767
#define МБ_ТЕК_МАКС     1

#define стдвхо stdin
#define стдвыв stdout
#define стдош  stderr
#define стддоп stdaux
#define стдпрн stdprn

#define ткст тук
#define кткст тукк
#define шткст штук
#define кшткст штукк

typedef дол т_максцел;
typedef бдол т_максбцел;

struct лпреобр
{

    ткст десятичная_точка;
    ткст делит_тысяч;
    ткст группировка;
    ткст цел_валютн_символ;
    ткст символ_валюты;
    ткст мон_десятичная_точка;
    ткст мон_делит_тыс;
    ткст мон_группировка;
    ткст положит_знак;
    ткст отрицат_знак;
    байт  цел_дробн_цифры;
    байт  дробн_цифры;
    байт  p_cs_precedes;
    байт  p_sep_by_space;
    байт  n_cs_precedes;
    байт  n_sep_by_space;
    байт  p_sign_posn;
    байт  n_sign_posn;
    байт  цел_p_cs_precedes;
    байт  цел_p_sep_by_space;
    байт  цел_n_cs_precedes;
    байт  цел_n_sep_by_space;
    байт  цел_p_sign_posn;
    байт  цел_n_sign_posn;
};

struct т_цмаксдел
	{
	
		дол    квот,
					рем;
	};

struct т_фсред
    {
	
        бкрат    статус;
        бкрат    контроль;
        бкрат    округл;
        бкрат    резерв[2];
    };

struct т_дели
	{
	
		цел квот,
			рем;
	};


struct т_делиц
	{
	
		цел квот,
			рем;
	};

struct т_делид
	{
	
		дол квот,
			 рем;
	};
	
/*
const шим ШКФ = 0xFFFF;

const дво ДВОБЕСК      = дво.infinity;
const дво ПЛАВБЕСК     = плав.infinity;
const дво РЕАЛБЕСК    = реал.infinity;

const СИМБИТ       = 8;
const БАЙТМИН      = байт.min;
const БАЙТМАКС      = байт.max;
const ББАЙТМИН      = ббайт.min;
const СИММИН       = сим.min;
const СИММАКС       = сим.max;
const МБДЛИНМАКС     = 2;
const КРАТМИН       = крат.min;
const КРАТМАКС       = крат.max;
const БКРАТМАКС      = бкрат.max;
const ЦЕЛМИН        = цел.min;
const ЦЕЛМАКС        = цел.max;
const БЦЕЛМАКС       = бцел.max;
const ДОЛМИН      = дол.min;
const ДОЛМАКС      = дол.max;
const БДОЛМАКС     = бдол.max;

const ПЛАВОКРУГЛ			= 1;
const ПЛАВМЕТОДОЦЕНКИ	= 2;
const ПЛАВКОРЕНЬ			= 2;

const ПЛАВЦИФР			= плав.dig;
const ДВОЦИФР			= дво.dig;
const РЕАЛЦИФР			= реал.dig;

const ПЛАВМАНТЦИФР		= плав.mant_dig;
const ДВОМАНТЦИФР		= дво.mant_dig;
const РЕАЛМАНТЦИФР		= реал.mant_dig;

//const ПЛАВМИН			= плав.min;
//const ДВОМИН			= дво.min;
//const РЕАЛМИН			= реал.min;

const ПЛАВМАКС			= плав.max;
const ДВОМАКС			= дво.max;
const РЕАЛМАКС			= реал.max;

const ПЛАВЭПС		= плав.epsilon;
const ДВОЭПС		= дво.epsilon;
const РЕАЛЭПС		= реал.epsilon;

const ПЛАВМИНЭКСП		= плав.min_exp;
const ДВОМИНЭКСП		= дво.min_exp;
const РЕАЛМИНЭКСП		= реал.min_exp;

const ПЛАВМАКСЭКСП		= плав.max_exp;
const ДВОМАКСЭКСП		= дво.max_exp;
const РЕАЛМАКСЭКСП		= реал.max_exp;

const ПЛАВМИН10ЭКСП		= плав.min_10_exp;
const ДВОМИН10ЭКСП		= дво.min_10_exp;
const РЕАЛМИН10ЭКСП	= реал.min_10_exp;

const ПЛАВМАКС10ЭКСП		= плав.max_10_exp;
const ДВОМАКС10ЭКСП		= дво.max_10_exp;
const РЕАЛМАКС10ЭКСП	= реал.max_10_exp;

const плав БЕСКОНЕЧНОСТЬ       = плав.infinity;
const плав Н_Ч            = плав.nan;

const цел ПЗ_ИЛОГБ0        = цел.min;
const цел ПЗ_ИЛОГБНЧ      = цел.min;

const цел МАТОШ       = 1;//математическая ошибка
const цел МАТОШИСКЛ   = 2;
const цел матошобработка = МАТОШ | МАТОШИСКЛ;

i32k ЛП_СИТИП          = 0;
i32k ЛП_ЧИСЛО        = 1;
i32k ЛП_ВРЕМЯ           = 2;
i32k ЛП_КОЛЛЕЙТ        = 3;
i32k ЛП_МОНЕТА       = 4;
i32k ЛП_ВСЕ            = 6;
i32k ЛП_БУМАГА          = 7;  // нестандартно
i32k ЛП_ИМЯ           = 8;  // нестандартно
i32k ЛП_АДРЕС        = 9;  // нестандартно
i32k ЛП_ТЕЛЕФОН      = 10; // нестандартно
i32k ЛП_МЕРА    = 11; // нестандартно
i32k ЛП_ИДЕНТИФИКАЦИЯ = 12; // нестандартно
*/
#include "rustd.h"
#include "rumath.h"
#endif
